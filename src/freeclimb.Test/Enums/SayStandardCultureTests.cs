/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Enums
{
    /// <summary>
    ///  Class for testing SayStandardCulture
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class SayStandardCultureTests : IDisposable
    {
        private SayStandardCulture instance;

        public SayStandardCultureTests()
        {
            instance = new SayStandardCulture();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SayStandardCulture
        /// </summary>
        [Fact]
        public void SayStandardCultureInstanceTest()
        {
            Assert.IsType<SayStandardCulture>(instance);
        }

        [Fact]
        public void TestCA_ESShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.CA_ES;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestCA_ESShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.CA_ES;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "CA_ES");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestCA_ESShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.CA_ES;
            string expectedValue = "CA_ES";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDA_DKShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.DA_DK;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestDA_DKShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.DA_DK;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "DA_DK");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDA_DKShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.DA_DK;
            string expectedValue = "DA_DK";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDE_DEShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.DE_DE;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestDE_DEShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.DE_DE;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "DE_DE");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDE_DEShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.DE_DE;
            string expectedValue = "DE_DE";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestEN_AUShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.EN_AU;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestEN_AUShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.EN_AU;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "EN_AU");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestEN_AUShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.EN_AU;
            string expectedValue = "EN_AU";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestEN_CAShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.EN_CA;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestEN_CAShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.EN_CA;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "EN_CA");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestEN_CAShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.EN_CA;
            string expectedValue = "EN_CA";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestEN_GBShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.EN_GB;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestEN_GBShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.EN_GB;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "EN_GB");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestEN_GBShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.EN_GB;
            string expectedValue = "EN_GB";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestEN_INShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.EN_IN;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestEN_INShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.EN_IN;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "EN_IN");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestEN_INShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.EN_IN;
            string expectedValue = "EN_IN";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestEN_USShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.EN_US;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestEN_USShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.EN_US;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "EN_US");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestEN_USShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.EN_US;
            string expectedValue = "EN_US";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestES_ESShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.ES_ES;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestES_ESShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.ES_ES;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "ES_ES");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestES_ESShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.ES_ES;
            string expectedValue = "ES_ES";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestES_MXShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.ES_MX;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestES_MXShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.ES_MX;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "ES_MX");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestES_MXShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.ES_MX;
            string expectedValue = "ES_MX";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestFI_FIShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.FI_FI;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestFI_FIShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.FI_FI;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "FI_FI");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestFI_FIShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.FI_FI;
            string expectedValue = "FI_FI";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestFR_CAShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.FR_CA;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestFR_CAShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.FR_CA;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "FR_CA");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestFR_CAShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.FR_CA;
            string expectedValue = "FR_CA";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestFR_FRShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.FR_FR;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestFR_FRShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.FR_FR;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "FR_FR");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestFR_FRShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.FR_FR;
            string expectedValue = "FR_FR";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestIT_ITShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.IT_IT;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestIT_ITShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.IT_IT;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "IT_IT");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestIT_ITShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.IT_IT;
            string expectedValue = "IT_IT";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestJA_JPShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.JA_JP;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestJA_JPShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.JA_JP;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "JA_JP");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestJA_JPShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.JA_JP;
            string expectedValue = "JA_JP";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestKO_KRShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.KO_KR;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestKO_KRShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.KO_KR;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "KO_KR");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestKO_KRShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.KO_KR;
            string expectedValue = "KO_KR";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestNB_NOShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.NB_NO;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestNB_NOShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.NB_NO;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "NB_NO");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestNB_NOShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.NB_NO;
            string expectedValue = "NB_NO";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestNL_NLShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.NL_NL;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestNL_NLShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.NL_NL;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "NL_NL");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestNL_NLShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.NL_NL;
            string expectedValue = "NL_NL";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestPL_PLShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.PL_PL;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestPL_PLShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.PL_PL;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "PL_PL");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestPL_PLShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.PL_PL;
            string expectedValue = "PL_PL";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestPT_BRShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.PT_BR;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestPT_BRShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.PT_BR;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "PT_BR");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestPT_BRShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.PT_BR;
            string expectedValue = "PT_BR";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestPT_PTShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.PT_PT;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestPT_PTShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.PT_PT;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "PT_PT");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestPT_PTShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.PT_PT;
            string expectedValue = "PT_PT";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestRU_RUShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.RU_RU;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestRU_RUShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.RU_RU;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "RU_RU");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestRU_RUShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.RU_RU;
            string expectedValue = "RU_RU";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestSV_SEShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.SV_SE;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestSV_SEShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.SV_SE;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "SV_SE");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestSV_SEShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.SV_SE;
            string expectedValue = "SV_SE";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestZH_CNShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.ZH_CN;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestZH_CNShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.ZH_CN;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "ZH_CN");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestZH_CNShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.ZH_CN;
            string expectedValue = "ZH_CN";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestZH_HKShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.ZH_HK;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestZH_HKShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.ZH_HK;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "ZH_HK");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestZH_HKShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.ZH_HK;
            string expectedValue = "ZH_HK";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestZH_TWShouldWork()
        {
            SayStandardCulture test = SayStandardCulture.ZH_TW;
            Assert.Equal(typeof(SayStandardCulture), test.GetType());
        }

        [Fact]
        public void TestZH_TWShouldSerializeToEnum()
        {
            SayStandardCulture expectedValue = SayStandardCulture.ZH_TW;
            SayStandardCulture calculatedValue = (SayStandardCulture)
                Enum.Parse(typeof(SayStandardCulture), "ZH_TW");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestZH_TWShouldDeserializeToString()
        {
            SayStandardCulture test = SayStandardCulture.ZH_TW;
            string expectedValue = "ZH_TW";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }
    }
}
