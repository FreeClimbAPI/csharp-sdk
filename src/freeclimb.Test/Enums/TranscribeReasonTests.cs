/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Enums
{
    /// <summary>
    ///  Class for testing TranscribeReason
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class TranscribeReasonTests : IDisposable
    {
        private TranscribeReason instance;

        public TranscribeReasonTests()
        {
            instance = new TranscribeReason();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TranscribeReason
        /// </summary>
        [Fact]
        public void TranscribeReasonInstanceTest()
        {
            Assert.IsType<TranscribeReason>(instance);
        }

        [Fact]
        public void TestINTERNAL_ERRORShouldWork()
        {
            TranscribeReason test = TranscribeReason.INTERNAL_ERROR;
            Assert.Equal(typeof(TranscribeReason), test.GetType());
        }

        [Fact]
        public void TestINTERNAL_ERRORShouldSerializeToEnum()
        {
            TranscribeReason expectedValue = TranscribeReason.INTERNAL_ERROR;
            TranscribeReason calculatedValue = (TranscribeReason)
                Enum.Parse(typeof(TranscribeReason), "INTERNAL_ERROR");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestINTERNAL_ERRORShouldDeserializeToString()
        {
            TranscribeReason test = TranscribeReason.INTERNAL_ERROR;
            string expectedValue = "INTERNAL_ERROR";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHANGUPShouldWork()
        {
            TranscribeReason test = TranscribeReason.HANGUP;
            Assert.Equal(typeof(TranscribeReason), test.GetType());
        }

        [Fact]
        public void TestHANGUPShouldSerializeToEnum()
        {
            TranscribeReason expectedValue = TranscribeReason.HANGUP;
            TranscribeReason calculatedValue = (TranscribeReason)
                Enum.Parse(typeof(TranscribeReason), "HANGUP");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHANGUPShouldDeserializeToString()
        {
            TranscribeReason test = TranscribeReason.HANGUP;
            string expectedValue = "HANGUP";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestMAX_LENGTHShouldWork()
        {
            TranscribeReason test = TranscribeReason.MAX_LENGTH;
            Assert.Equal(typeof(TranscribeReason), test.GetType());
        }

        [Fact]
        public void TestMAX_LENGTHShouldSerializeToEnum()
        {
            TranscribeReason expectedValue = TranscribeReason.MAX_LENGTH;
            TranscribeReason calculatedValue = (TranscribeReason)
                Enum.Parse(typeof(TranscribeReason), "MAX_LENGTH");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestMAX_LENGTHShouldDeserializeToString()
        {
            TranscribeReason test = TranscribeReason.MAX_LENGTH;
            string expectedValue = "MAX_LENGTH";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIGITShouldWork()
        {
            TranscribeReason test = TranscribeReason.DIGIT;
            Assert.Equal(typeof(TranscribeReason), test.GetType());
        }

        [Fact]
        public void TestDIGITShouldSerializeToEnum()
        {
            TranscribeReason expectedValue = TranscribeReason.DIGIT;
            TranscribeReason calculatedValue = (TranscribeReason)
                Enum.Parse(typeof(TranscribeReason), "DIGIT");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIGITShouldDeserializeToString()
        {
            TranscribeReason test = TranscribeReason.DIGIT;
            string expectedValue = "DIGIT";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestNO_INPUTShouldWork()
        {
            TranscribeReason test = TranscribeReason.NO_INPUT;
            Assert.Equal(typeof(TranscribeReason), test.GetType());
        }

        [Fact]
        public void TestNO_INPUTShouldSerializeToEnum()
        {
            TranscribeReason expectedValue = TranscribeReason.NO_INPUT;
            TranscribeReason calculatedValue = (TranscribeReason)
                Enum.Parse(typeof(TranscribeReason), "NO_INPUT");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestNO_INPUTShouldDeserializeToString()
        {
            TranscribeReason test = TranscribeReason.NO_INPUT;
            string expectedValue = "NO_INPUT";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }
    }
}
