/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */




using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using System.Text;
using freeclimb.Api;
using freeclimb.Model;
using freeclimb.Client;
using System.Reflection;
using Newtonsoft.Json;
using System.Globalization;
using freeclimb.Enums;


namespace freeclimb.Test.Enums
{
    /// <summary>
    ///  Class for testing GetSpeechReason
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class GetSpeechReasonTests
    {
        private GetSpeechReason instance;

        public GetSpeechReasonTests()
        {
            instance = new GetSpeechReason();
            
        }

        /// <summary>
        /// Test an instance of GetSpeechReason
        /// </summary>
        [Fact]
        public void GetSpeechReasonInstanceTest()
        {
            Assert.IsType<GetSpeechReason>(instance);
        }


        [Fact]
        public void TestERRORShouldWork()
        {
            GetSpeechReason test = GetSpeechReason.ERROR;
            Assert.Equal(typeof(GetSpeechReason), test.GetType());
        }

        [Fact]
        public void TestERRORShouldSerializeToEnum()
        {
            GetSpeechReason expectedValue = GetSpeechReason.ERROR;
            GetSpeechReason calculatedValue = (GetSpeechReason)Enum.Parse(typeof(GetSpeechReason), "ERROR");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestERRORShouldDeserializeToString()
        {
            GetSpeechReason test = GetSpeechReason.ERROR;
            string expectedValue = "ERROR";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHANGUPShouldWork()
        {
            GetSpeechReason test = GetSpeechReason.HANGUP;
            Assert.Equal(typeof(GetSpeechReason), test.GetType());
        }

        [Fact]
        public void TestHANGUPShouldSerializeToEnum()
        {
            GetSpeechReason expectedValue = GetSpeechReason.HANGUP;
            GetSpeechReason calculatedValue = (GetSpeechReason)Enum.Parse(typeof(GetSpeechReason), "HANGUP");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHANGUPShouldDeserializeToString()
        {
            GetSpeechReason test = GetSpeechReason.HANGUP;
            string expectedValue = "HANGUP";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIGITShouldWork()
        {
            GetSpeechReason test = GetSpeechReason.DIGIT;
            Assert.Equal(typeof(GetSpeechReason), test.GetType());
        }

        [Fact]
        public void TestDIGITShouldSerializeToEnum()
        {
            GetSpeechReason expectedValue = GetSpeechReason.DIGIT;
            GetSpeechReason calculatedValue = (GetSpeechReason)Enum.Parse(typeof(GetSpeechReason), "DIGIT");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIGITShouldDeserializeToString()
        {
            GetSpeechReason test = GetSpeechReason.DIGIT;
            string expectedValue = "DIGIT";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestNO_INPUTShouldWork()
        {
            GetSpeechReason test = GetSpeechReason.NO_INPUT;
            Assert.Equal(typeof(GetSpeechReason), test.GetType());
        }

        [Fact]
        public void TestNO_INPUTShouldSerializeToEnum()
        {
            GetSpeechReason expectedValue = GetSpeechReason.NO_INPUT;
            GetSpeechReason calculatedValue = (GetSpeechReason)Enum.Parse(typeof(GetSpeechReason), "NO_INPUT");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestNO_INPUTShouldDeserializeToString()
        {
            GetSpeechReason test = GetSpeechReason.NO_INPUT;
            string expectedValue = "NO_INPUT";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestNO_MATCHShouldWork()
        {
            GetSpeechReason test = GetSpeechReason.NO_MATCH;
            Assert.Equal(typeof(GetSpeechReason), test.GetType());
        }

        [Fact]
        public void TestNO_MATCHShouldSerializeToEnum()
        {
            GetSpeechReason expectedValue = GetSpeechReason.NO_MATCH;
            GetSpeechReason calculatedValue = (GetSpeechReason)Enum.Parse(typeof(GetSpeechReason), "NO_MATCH");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestNO_MATCHShouldDeserializeToString()
        {
            GetSpeechReason test = GetSpeechReason.NO_MATCH;
            string expectedValue = "NO_MATCH";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestRECOGNITIONShouldWork()
        {
            GetSpeechReason test = GetSpeechReason.RECOGNITION;
            Assert.Equal(typeof(GetSpeechReason), test.GetType());
        }

        [Fact]
        public void TestRECOGNITIONShouldSerializeToEnum()
        {
            GetSpeechReason expectedValue = GetSpeechReason.RECOGNITION;
            GetSpeechReason calculatedValue = (GetSpeechReason)Enum.Parse(typeof(GetSpeechReason), "RECOGNITION");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestRECOGNITIONShouldDeserializeToString()
        {
            GetSpeechReason test = GetSpeechReason.RECOGNITION;
            string expectedValue = "RECOGNITION";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

    }
}
