/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Enums
{
    /// <summary>
    ///  Class for testing RecordUtteranceTermReason
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class RecordUtteranceTermReasonTests : IDisposable
    {
        private RecordUtteranceTermReason instance;

        public RecordUtteranceTermReasonTests()
        {
            instance = new RecordUtteranceTermReason();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of RecordUtteranceTermReason
        /// </summary>
        [Fact]
        public void RecordUtteranceTermReasonInstanceTest()
        {
            Assert.IsType<RecordUtteranceTermReason>(instance);
        }

        [Fact]
        public void TestFINISH_KEYShouldWork()
        {
            RecordUtteranceTermReason test = RecordUtteranceTermReason.FINISH_KEY;
            Assert.Equal(typeof(RecordUtteranceTermReason), test.GetType());
        }

        [Fact]
        public void TestFINISH_KEYShouldSerializeToEnum()
        {
            RecordUtteranceTermReason expectedValue = RecordUtteranceTermReason.FINISH_KEY;
            RecordUtteranceTermReason calculatedValue = (RecordUtteranceTermReason)
                Enum.Parse(typeof(RecordUtteranceTermReason), "FINISH_KEY");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestFINISH_KEYShouldDeserializeToString()
        {
            RecordUtteranceTermReason test = RecordUtteranceTermReason.FINISH_KEY;
            string expectedValue = "FINISH_KEY";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestTIMEOUTShouldWork()
        {
            RecordUtteranceTermReason test = RecordUtteranceTermReason.TIMEOUT;
            Assert.Equal(typeof(RecordUtteranceTermReason), test.GetType());
        }

        [Fact]
        public void TestTIMEOUTShouldSerializeToEnum()
        {
            RecordUtteranceTermReason expectedValue = RecordUtteranceTermReason.TIMEOUT;
            RecordUtteranceTermReason calculatedValue = (RecordUtteranceTermReason)
                Enum.Parse(typeof(RecordUtteranceTermReason), "TIMEOUT");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestTIMEOUTShouldDeserializeToString()
        {
            RecordUtteranceTermReason test = RecordUtteranceTermReason.TIMEOUT;
            string expectedValue = "TIMEOUT";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHANGUPShouldWork()
        {
            RecordUtteranceTermReason test = RecordUtteranceTermReason.HANGUP;
            Assert.Equal(typeof(RecordUtteranceTermReason), test.GetType());
        }

        [Fact]
        public void TestHANGUPShouldSerializeToEnum()
        {
            RecordUtteranceTermReason expectedValue = RecordUtteranceTermReason.HANGUP;
            RecordUtteranceTermReason calculatedValue = (RecordUtteranceTermReason)
                Enum.Parse(typeof(RecordUtteranceTermReason), "HANGUP");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHANGUPShouldDeserializeToString()
        {
            RecordUtteranceTermReason test = RecordUtteranceTermReason.HANGUP;
            string expectedValue = "HANGUP";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestMAX_LENGTHShouldWork()
        {
            RecordUtteranceTermReason test = RecordUtteranceTermReason.MAX_LENGTH;
            Assert.Equal(typeof(RecordUtteranceTermReason), test.GetType());
        }

        [Fact]
        public void TestMAX_LENGTHShouldSerializeToEnum()
        {
            RecordUtteranceTermReason expectedValue = RecordUtteranceTermReason.MAX_LENGTH;
            RecordUtteranceTermReason calculatedValue = (RecordUtteranceTermReason)
                Enum.Parse(typeof(RecordUtteranceTermReason), "MAX_LENGTH");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestMAX_LENGTHShouldDeserializeToString()
        {
            RecordUtteranceTermReason test = RecordUtteranceTermReason.MAX_LENGTH;
            string expectedValue = "MAX_LENGTH";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }
    }
}
