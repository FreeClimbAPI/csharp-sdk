/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Enums
{
    /// <summary>
    ///  Class for testing BargeInReason
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class BargeInReasonTests : IDisposable
    {
        private BargeInReason instance;

        public BargeInReasonTests()
        {
            instance = new BargeInReason();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BargeInReason
        /// </summary>
        [Fact]
        public void BargeInReasonInstanceTest()
        {
            Assert.IsType<BargeInReason>(instance);
        }

        [Fact]
        public void TestNO_BARGE_INShouldWork()
        {
            BargeInReason test = BargeInReason.NO_BARGE_IN;
            Assert.Equal(typeof(BargeInReason), test.GetType());
        }

        [Fact]
        public void TestNO_BARGE_INShouldSerializeToEnum()
        {
            BargeInReason expectedValue = BargeInReason.NO_BARGE_IN;
            BargeInReason calculatedValue = (BargeInReason)
                Enum.Parse(typeof(BargeInReason), "NO_BARGE_IN");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestNO_BARGE_INShouldDeserializeToString()
        {
            BargeInReason test = BargeInReason.NO_BARGE_IN;
            string expectedValue = "NO_BARGE_IN";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestBARGE_IN_BY_DTMFShouldWork()
        {
            BargeInReason test = BargeInReason.BARGE_IN_BY_DTMF;
            Assert.Equal(typeof(BargeInReason), test.GetType());
        }

        [Fact]
        public void TestBARGE_IN_BY_DTMFShouldSerializeToEnum()
        {
            BargeInReason expectedValue = BargeInReason.BARGE_IN_BY_DTMF;
            BargeInReason calculatedValue = (BargeInReason)
                Enum.Parse(typeof(BargeInReason), "BARGE_IN_BY_DTMF");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestBARGE_IN_BY_DTMFShouldDeserializeToString()
        {
            BargeInReason test = BargeInReason.BARGE_IN_BY_DTMF;
            string expectedValue = "BARGE_IN_BY_DTMF";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestBARGE_IN_BY_ENERGYShouldWork()
        {
            BargeInReason test = BargeInReason.BARGE_IN_BY_ENERGY;
            Assert.Equal(typeof(BargeInReason), test.GetType());
        }

        [Fact]
        public void TestBARGE_IN_BY_ENERGYShouldSerializeToEnum()
        {
            BargeInReason expectedValue = BargeInReason.BARGE_IN_BY_ENERGY;
            BargeInReason calculatedValue = (BargeInReason)
                Enum.Parse(typeof(BargeInReason), "BARGE_IN_BY_ENERGY");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestBARGE_IN_BY_ENERGYShouldDeserializeToString()
        {
            BargeInReason test = BargeInReason.BARGE_IN_BY_ENERGY;
            string expectedValue = "BARGE_IN_BY_ENERGY";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }
    }
}
