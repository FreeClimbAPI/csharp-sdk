/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Enums
{
    /// <summary>
    ///  Class for testing ExportStatus
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class ExportStatusTests : IDisposable
    {
        private ExportStatus instance;

        public ExportStatusTests()
        {
            instance = new ExportStatus();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ExportStatus
        /// </summary>
        [Fact]
        public void ExportStatusInstanceTest()
        {
            Assert.IsType<ExportStatus>(instance);
        }

        [Fact]
        public void TestINTAKINGShouldWork()
        {
            ExportStatus test = ExportStatus.INTAKING;
            Assert.Equal(typeof(ExportStatus), test.GetType());
        }

        [Fact]
        public void TestINTAKINGShouldSerializeToEnum()
        {
            ExportStatus expectedValue = ExportStatus.INTAKING;
            ExportStatus calculatedValue = (ExportStatus)
                Enum.Parse(typeof(ExportStatus), "INTAKING");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestINTAKINGShouldDeserializeToString()
        {
            ExportStatus test = ExportStatus.INTAKING;
            string expectedValue = "INTAKING";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestQUEUEDShouldWork()
        {
            ExportStatus test = ExportStatus.QUEUED;
            Assert.Equal(typeof(ExportStatus), test.GetType());
        }

        [Fact]
        public void TestQUEUEDShouldSerializeToEnum()
        {
            ExportStatus expectedValue = ExportStatus.QUEUED;
            ExportStatus calculatedValue = (ExportStatus)Enum.Parse(typeof(ExportStatus), "QUEUED");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestQUEUEDShouldDeserializeToString()
        {
            ExportStatus test = ExportStatus.QUEUED;
            string expectedValue = "QUEUED";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestIN_PROGRESSShouldWork()
        {
            ExportStatus test = ExportStatus.IN_PROGRESS;
            Assert.Equal(typeof(ExportStatus), test.GetType());
        }

        [Fact]
        public void TestIN_PROGRESSShouldSerializeToEnum()
        {
            ExportStatus expectedValue = ExportStatus.IN_PROGRESS;
            ExportStatus calculatedValue = (ExportStatus)
                Enum.Parse(typeof(ExportStatus), "IN_PROGRESS");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestIN_PROGRESSShouldDeserializeToString()
        {
            ExportStatus test = ExportStatus.IN_PROGRESS;
            string expectedValue = "IN_PROGRESS";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestCOMPLETEDShouldWork()
        {
            ExportStatus test = ExportStatus.COMPLETED;
            Assert.Equal(typeof(ExportStatus), test.GetType());
        }

        [Fact]
        public void TestCOMPLETEDShouldSerializeToEnum()
        {
            ExportStatus expectedValue = ExportStatus.COMPLETED;
            ExportStatus calculatedValue = (ExportStatus)
                Enum.Parse(typeof(ExportStatus), "COMPLETED");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestCOMPLETEDShouldDeserializeToString()
        {
            ExportStatus test = ExportStatus.COMPLETED;
            string expectedValue = "COMPLETED";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestFAILEDShouldWork()
        {
            ExportStatus test = ExportStatus.FAILED;
            Assert.Equal(typeof(ExportStatus), test.GetType());
        }

        [Fact]
        public void TestFAILEDShouldSerializeToEnum()
        {
            ExportStatus expectedValue = ExportStatus.FAILED;
            ExportStatus calculatedValue = (ExportStatus)Enum.Parse(typeof(ExportStatus), "FAILED");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestFAILEDShouldDeserializeToString()
        {
            ExportStatus test = ExportStatus.FAILED;
            string expectedValue = "FAILED";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDELETEDShouldWork()
        {
            ExportStatus test = ExportStatus.DELETED;
            Assert.Equal(typeof(ExportStatus), test.GetType());
        }

        [Fact]
        public void TestDELETEDShouldSerializeToEnum()
        {
            ExportStatus expectedValue = ExportStatus.DELETED;
            ExportStatus calculatedValue = (ExportStatus)
                Enum.Parse(typeof(ExportStatus), "DELETED");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDELETEDShouldDeserializeToString()
        {
            ExportStatus test = ExportStatus.DELETED;
            string expectedValue = "DELETED";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }
    }
}
