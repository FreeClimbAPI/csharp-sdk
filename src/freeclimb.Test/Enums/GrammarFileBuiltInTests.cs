/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Enums
{
    /// <summary>
    ///  Class for testing GrammarFileBuiltIn
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class GrammarFileBuiltInTests : IDisposable
    {
        private GrammarFileBuiltIn instance;

        public GrammarFileBuiltInTests()
        {
            instance = new GrammarFileBuiltIn();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GrammarFileBuiltIn
        /// </summary>
        [Fact]
        public void GrammarFileBuiltInInstanceTest()
        {
            Assert.IsType<GrammarFileBuiltIn>(instance);
        }

        [Fact]
        public void TestALPHNUM6ShouldWork()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.ALPHNUM6;
            Assert.Equal(typeof(GrammarFileBuiltIn), test.GetType());
        }

        [Fact]
        public void TestALPHNUM6ShouldSerializeToEnum()
        {
            GrammarFileBuiltIn expectedValue = GrammarFileBuiltIn.ALPHNUM6;
            GrammarFileBuiltIn calculatedValue = (GrammarFileBuiltIn)
                Enum.Parse(typeof(GrammarFileBuiltIn), "ALPHNUM6");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestALPHNUM6ShouldDeserializeToString()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.ALPHNUM6;
            string expectedValue = "ALPHNUM6";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestANY_DIGShouldWork()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.ANY_DIG;
            Assert.Equal(typeof(GrammarFileBuiltIn), test.GetType());
        }

        [Fact]
        public void TestANY_DIGShouldSerializeToEnum()
        {
            GrammarFileBuiltIn expectedValue = GrammarFileBuiltIn.ANY_DIG;
            GrammarFileBuiltIn calculatedValue = (GrammarFileBuiltIn)
                Enum.Parse(typeof(GrammarFileBuiltIn), "ANY_DIG");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestANY_DIGShouldDeserializeToString()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.ANY_DIG;
            string expectedValue = "ANY_DIG";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIG1ShouldWork()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.DIG1;
            Assert.Equal(typeof(GrammarFileBuiltIn), test.GetType());
        }

        [Fact]
        public void TestDIG1ShouldSerializeToEnum()
        {
            GrammarFileBuiltIn expectedValue = GrammarFileBuiltIn.DIG1;
            GrammarFileBuiltIn calculatedValue = (GrammarFileBuiltIn)
                Enum.Parse(typeof(GrammarFileBuiltIn), "DIG1");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIG1ShouldDeserializeToString()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.DIG1;
            string expectedValue = "DIG1";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIG2ShouldWork()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.DIG2;
            Assert.Equal(typeof(GrammarFileBuiltIn), test.GetType());
        }

        [Fact]
        public void TestDIG2ShouldSerializeToEnum()
        {
            GrammarFileBuiltIn expectedValue = GrammarFileBuiltIn.DIG2;
            GrammarFileBuiltIn calculatedValue = (GrammarFileBuiltIn)
                Enum.Parse(typeof(GrammarFileBuiltIn), "DIG2");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIG2ShouldDeserializeToString()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.DIG2;
            string expectedValue = "DIG2";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIG3ShouldWork()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.DIG3;
            Assert.Equal(typeof(GrammarFileBuiltIn), test.GetType());
        }

        [Fact]
        public void TestDIG3ShouldSerializeToEnum()
        {
            GrammarFileBuiltIn expectedValue = GrammarFileBuiltIn.DIG3;
            GrammarFileBuiltIn calculatedValue = (GrammarFileBuiltIn)
                Enum.Parse(typeof(GrammarFileBuiltIn), "DIG3");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIG3ShouldDeserializeToString()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.DIG3;
            string expectedValue = "DIG3";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIG4ShouldWork()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.DIG4;
            Assert.Equal(typeof(GrammarFileBuiltIn), test.GetType());
        }

        [Fact]
        public void TestDIG4ShouldSerializeToEnum()
        {
            GrammarFileBuiltIn expectedValue = GrammarFileBuiltIn.DIG4;
            GrammarFileBuiltIn calculatedValue = (GrammarFileBuiltIn)
                Enum.Parse(typeof(GrammarFileBuiltIn), "DIG4");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIG4ShouldDeserializeToString()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.DIG4;
            string expectedValue = "DIG4";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIG5ShouldWork()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.DIG5;
            Assert.Equal(typeof(GrammarFileBuiltIn), test.GetType());
        }

        [Fact]
        public void TestDIG5ShouldSerializeToEnum()
        {
            GrammarFileBuiltIn expectedValue = GrammarFileBuiltIn.DIG5;
            GrammarFileBuiltIn calculatedValue = (GrammarFileBuiltIn)
                Enum.Parse(typeof(GrammarFileBuiltIn), "DIG5");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIG5ShouldDeserializeToString()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.DIG5;
            string expectedValue = "DIG5";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIG6ShouldWork()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.DIG6;
            Assert.Equal(typeof(GrammarFileBuiltIn), test.GetType());
        }

        [Fact]
        public void TestDIG6ShouldSerializeToEnum()
        {
            GrammarFileBuiltIn expectedValue = GrammarFileBuiltIn.DIG6;
            GrammarFileBuiltIn calculatedValue = (GrammarFileBuiltIn)
                Enum.Parse(typeof(GrammarFileBuiltIn), "DIG6");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIG6ShouldDeserializeToString()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.DIG6;
            string expectedValue = "DIG6";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIG7ShouldWork()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.DIG7;
            Assert.Equal(typeof(GrammarFileBuiltIn), test.GetType());
        }

        [Fact]
        public void TestDIG7ShouldSerializeToEnum()
        {
            GrammarFileBuiltIn expectedValue = GrammarFileBuiltIn.DIG7;
            GrammarFileBuiltIn calculatedValue = (GrammarFileBuiltIn)
                Enum.Parse(typeof(GrammarFileBuiltIn), "DIG7");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIG7ShouldDeserializeToString()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.DIG7;
            string expectedValue = "DIG7";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIG8ShouldWork()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.DIG8;
            Assert.Equal(typeof(GrammarFileBuiltIn), test.GetType());
        }

        [Fact]
        public void TestDIG8ShouldSerializeToEnum()
        {
            GrammarFileBuiltIn expectedValue = GrammarFileBuiltIn.DIG8;
            GrammarFileBuiltIn calculatedValue = (GrammarFileBuiltIn)
                Enum.Parse(typeof(GrammarFileBuiltIn), "DIG8");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIG8ShouldDeserializeToString()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.DIG8;
            string expectedValue = "DIG8";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIG9ShouldWork()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.DIG9;
            Assert.Equal(typeof(GrammarFileBuiltIn), test.GetType());
        }

        [Fact]
        public void TestDIG9ShouldSerializeToEnum()
        {
            GrammarFileBuiltIn expectedValue = GrammarFileBuiltIn.DIG9;
            GrammarFileBuiltIn calculatedValue = (GrammarFileBuiltIn)
                Enum.Parse(typeof(GrammarFileBuiltIn), "DIG9");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIG9ShouldDeserializeToString()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.DIG9;
            string expectedValue = "DIG9";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIG10ShouldWork()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.DIG10;
            Assert.Equal(typeof(GrammarFileBuiltIn), test.GetType());
        }

        [Fact]
        public void TestDIG10ShouldSerializeToEnum()
        {
            GrammarFileBuiltIn expectedValue = GrammarFileBuiltIn.DIG10;
            GrammarFileBuiltIn calculatedValue = (GrammarFileBuiltIn)
                Enum.Parse(typeof(GrammarFileBuiltIn), "DIG10");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIG10ShouldDeserializeToString()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.DIG10;
            string expectedValue = "DIG10";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIG11ShouldWork()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.DIG11;
            Assert.Equal(typeof(GrammarFileBuiltIn), test.GetType());
        }

        [Fact]
        public void TestDIG11ShouldSerializeToEnum()
        {
            GrammarFileBuiltIn expectedValue = GrammarFileBuiltIn.DIG11;
            GrammarFileBuiltIn calculatedValue = (GrammarFileBuiltIn)
                Enum.Parse(typeof(GrammarFileBuiltIn), "DIG11");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDIG11ShouldDeserializeToString()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.DIG11;
            string expectedValue = "DIG11";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestUP_TO_20_DIGIT_SEQUENCEShouldWork()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.UP_TO_20_DIGIT_SEQUENCE;
            Assert.Equal(typeof(GrammarFileBuiltIn), test.GetType());
        }

        [Fact]
        public void TestUP_TO_20_DIGIT_SEQUENCEShouldSerializeToEnum()
        {
            GrammarFileBuiltIn expectedValue = GrammarFileBuiltIn.UP_TO_20_DIGIT_SEQUENCE;
            GrammarFileBuiltIn calculatedValue = (GrammarFileBuiltIn)
                Enum.Parse(typeof(GrammarFileBuiltIn), "UP_TO_20_DIGIT_SEQUENCE");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestUP_TO_20_DIGIT_SEQUENCEShouldDeserializeToString()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.UP_TO_20_DIGIT_SEQUENCE;
            string expectedValue = "UP_TO_20_DIGIT_SEQUENCE";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestVERSAY_YESNOShouldWork()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.VERSAY_YESNO;
            Assert.Equal(typeof(GrammarFileBuiltIn), test.GetType());
        }

        [Fact]
        public void TestVERSAY_YESNOShouldSerializeToEnum()
        {
            GrammarFileBuiltIn expectedValue = GrammarFileBuiltIn.VERSAY_YESNO;
            GrammarFileBuiltIn calculatedValue = (GrammarFileBuiltIn)
                Enum.Parse(typeof(GrammarFileBuiltIn), "VERSAY_YESNO");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestVERSAY_YESNOShouldDeserializeToString()
        {
            GrammarFileBuiltIn test = GrammarFileBuiltIn.VERSAY_YESNO;
            string expectedValue = "VERSAY_YESNO";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        public object getTestValue(Type type)
        {
            if (type == typeof(int))
            {
                return 1;
            }
            if (type == typeof(Nullable<int>))
            {
                return 1;
            }
            if (type == typeof(string))
            {
                return "TEST_STRING";
            }
            if (type == typeof(decimal))
            {
                return new decimal(0.1);
            }
            if (type == typeof(Nullable<decimal>))
            {
                return new decimal(0.1);
            }
            if (type == typeof(bool))
            {
                return true;
            }
            if (type == typeof(Nullable<bool>))
            {
                return true;
            }
            if (type == typeof(CallStatus))
            {
                return CallStatusValueConverter.FromString("completed");
            }
            if (type == typeof(CallDirection))
            {
                return CallDirectionValueConverter.FromString("inbound");
            }
            if (type == typeof(GetDigitsReason))
            {
                return GetDigitsReasonValueConverter.FromString("timeout");
            }
            if (type == typeof(LogLevel))
            {
                return LogLevelValueConverter.FromString("info");
            }
            if (type == typeof(CallEndedReason))
            {
                return CallEndedReasonValueConverter.FromString("busy");
            }
            if (type == typeof(SMSTenDLCBrandEntityType))
            {
                return SMSTenDLCBrandEntityTypeValueConverter.FromString("PUBLIC_PROFIT");
            }
            if (type == typeof(SMSTenDLCBrandStockExchange))
            {
                return SMSTenDLCBrandStockExchangeValueConverter.FromString("NONE");
            }
            if (type == typeof(SMSTenDLCBrandRelationship))
            {
                return SMSTenDLCBrandRelationshipValueConverter.FromString("BASIC_ACCOUNT");
            }
            if (type == typeof(SMSTenDLCBrandAltBusinessIdType))
            {
                return SMSTenDLCBrandAltBusinessIdTypeValueConverter.FromString("NONE");
            }
            if (type == typeof(SMSTenDLCBrandIdentityStatus))
            {
                return SMSTenDLCBrandIdentityStatusValueConverter.FromString("SELF_DECLARED");
            }
            if (type == typeof(PlayBeep))
            {
                return PlayBeepValueConverter.FromString("always");
            }
            if (type == typeof(UpdateCallRequestStatus))
            {
                return UpdateCallRequestStatusValueConverter.FromString("canceled");
            }
            if (type == typeof(QueueResultStatus))
            {
                return QueueResultStatusValueConverter.FromString("queueFull");
            }
            if (type == typeof(ConferenceStatus))
            {
                return ConferenceStatusValueConverter.FromString("empty");
            }
            if (type == typeof(MachineType))
            {
                return MachineTypeValueConverter.FromString("answering machine");
            }
            if (type == typeof(SMSTenDLCCampaignStatus))
            {
                return SMSTenDLCCampaignStatusValueConverter.FromString("ACTIVE");
            }
            if (type == typeof(SMSTenDLCPartnerCampaignStatus))
            {
                return SMSTenDLCPartnerCampaignStatusValueConverter.FromString("ACTIVE");
            }
            if (type == typeof(SMSTollFreeCampaignRegistrationStatus))
            {
                return SMSTollFreeCampaignRegistrationStatusValueConverter.FromString(
                    "UNREGISTERED"
                );
            }
            if (type == typeof(MessageStatus))
            {
                return MessageStatusValueConverter.FromString("new");
            }
            if (type == typeof(RecordUtteranceTermReason))
            {
                return RecordUtteranceTermReasonValueConverter.FromString("finishKey");
            }
            if (type == typeof(GrammarType))
            {
                return GrammarTypeValueConverter.FromString("URL");
            }
            if (type == typeof(CompletionResultStatus))
            {
                return CompletionResultStatusValueConverter.FromString("success");
            }
            if (type == typeof(AnsweredBy))
            {
                return AnsweredByValueConverter.FromString("human");
            }
            if (type == typeof(IfMachine))
            {
                return IfMachineValueConverter.FromString("redirect");
            }
            if (type == typeof(AccountType))
            {
                return AccountTypeValueConverter.FromString("trial");
            }
            if (type == typeof(AccountStatus))
            {
                return AccountStatusValueConverter.FromString("closed");
            }
            if (type == typeof(TranscribeTermReason))
            {
                return TranscribeTermReasonValueConverter.FromString("error");
            }
            if (type == typeof(TranscribeReason))
            {
                return TranscribeReasonValueConverter.FromString("internalError");
            }
            if (type == typeof(BargeInReason))
            {
                return BargeInReasonValueConverter.FromString("noBargeIn");
            }
            if (type == typeof(GetSpeechReason))
            {
                return GetSpeechReasonValueConverter.FromString("error");
            }
            if (type == typeof(UpdateConferenceRequestStatus))
            {
                return UpdateConferenceRequestStatusValueConverter.FromString("empty");
            }
            if (type == typeof(Capabilities))
            {
                return new Capabilities(false, false, false, false, false);
            }
            if (type == typeof(List<string>))
            {
                return new List<string>();
            }
            if (type == typeof(List<SMSTenDLCCampaign>))
            {
                return new List<SMSTenDLCCampaign>();
            }
            if (type == typeof(List<ConferenceResult>))
            {
                return new List<ConferenceResult>();
            }
            if (type == typeof(List<MessageResult>))
            {
                return new List<MessageResult>();
            }
            if (type == typeof(List<ApplicationResult>))
            {
                return new List<ApplicationResult>();
            }
            if (type == typeof(List<IncomingNumberResult>))
            {
                return new List<IncomingNumberResult>();
            }
            if (type == typeof(List<SMSTollFreeCampaign>))
            {
                return new List<SMSTollFreeCampaign>();
            }
            if (type == typeof(List<SMSTenDLCBrand>))
            {
                return new List<SMSTenDLCBrand>();
            }
            if (type == typeof(List<QueueResult>))
            {
                return new List<QueueResult>();
            }
            if (type == typeof(List<AvailableNumber>))
            {
                return new List<AvailableNumber>();
            }
            if (type == typeof(List<SMSTenDLCPartnerCampaign>))
            {
                return new List<SMSTenDLCPartnerCampaign>();
            }
            if (type == typeof(List<PerclCommand>))
            {
                return new List<PerclCommand>();
            }
            if (type == typeof(List<QueueMember>))
            {
                return new List<QueueMember>();
            }
            if (type == typeof(List<QueueResult>))
            {
                return new List<QueueResult>();
            }
            if (type == typeof(List<CallResult>))
            {
                return new List<CallResult>();
            }
            if (type == typeof(List<ConferenceParticipantResult>))
            {
                return new List<ConferenceParticipantResult>();
            }
            if (type == typeof(List<LogResult>))
            {
                return new List<LogResult>();
            }
            if (type == typeof(List<RecordingResult>))
            {
                return new List<RecordingResult>();
            }
            if (type == typeof(Capabilities))
            {
                return new Capabilities(
                    voice: false,
                    sms: false,
                    tenDLC: false,
                    tollFree: false,
                    shortCode: false
                );
            }
            if (type == typeof(TFN))
            {
                return new TFN(campaignId: "TEST_CAMPAIGN");
            }
            if (type == typeof(Dictionary<string, Object>))
            {
                return new Dictionary<string, Object>();
            }
            if (type == typeof(TranscribeUtteranceRecord))
            {
                return new TranscribeUtteranceRecord();
            }
            if (type == typeof(SMSTenDLCPartnerCampaignBrand))
            {
                return new SMSTenDLCPartnerCampaignBrand(
                    firstName: "TEST_FIRST_NAME",
                    lastName: "TEST_LAST_NAME",
                    displayName: "TEST_DISPLAY_NAME",
                    companyName: "TEST_COMPANY_NAME",
                    website: "TEST_WEBSITE",
                    evpVettingScore: 0,
                    accountId: "TEST_ACCOUNT_ID",
                    phone: "TEST_PHONE_NUMBER",
                    email: "TEST_EMAIL"
                );
            }
            if (type == typeof(DateTime))
            {
                return DateTime.Today;
            }
            if (type == typeof(Nullable<DateTime>))
            {
                return DateTime.Today;
            }
            if (type == typeof(DateOnly))
            {
                return DateOnly.FromDateTime(DateTime.Now);
            }
            if (type == typeof(Nullable<DateOnly>))
            {
                return DateOnly.FromDateTime(DateTime.Now);
            }
            if (type == typeof(Object))
            {
                return new Dictionary<string, string>();
            }
            throw new ArgumentException("Provided type has no test value", type.ToString());
        }
    }
}
