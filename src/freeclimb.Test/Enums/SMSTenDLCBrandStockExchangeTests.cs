/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Enums
{
    /// <summary>
    ///  Class for testing SMSTenDLCBrandStockExchange
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class SMSTenDLCBrandStockExchangeTests : IDisposable
    {
        private SMSTenDLCBrandStockExchange instance;

        public SMSTenDLCBrandStockExchangeTests()
        {
            instance = new SMSTenDLCBrandStockExchange();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SMSTenDLCBrandStockExchange
        /// </summary>
        [Fact]
        public void SMSTenDLCBrandStockExchangeInstanceTest()
        {
            Assert.IsType<SMSTenDLCBrandStockExchange>(instance);
        }

        [Fact]
        public void TestNONEShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.NONE;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestNONEShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.NONE;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "NONE");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestNONEShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.NONE;
            string expectedValue = "NONE";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestNASDAQShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.NASDAQ;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestNASDAQShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.NASDAQ;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "NASDAQ");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestNASDAQShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.NASDAQ;
            string expectedValue = "NASDAQ";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestNYSEShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.NYSE;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestNYSEShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.NYSE;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "NYSE");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestNYSEShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.NYSE;
            string expectedValue = "NYSE";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestAMEXShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.AMEX;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestAMEXShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.AMEX;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "AMEX");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestAMEXShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.AMEX;
            string expectedValue = "AMEX";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestAMXShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.AMX;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestAMXShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.AMX;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "AMX");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestAMXShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.AMX;
            string expectedValue = "AMX";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestASXShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.ASX;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestASXShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.ASX;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "ASX");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestASXShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.ASX;
            string expectedValue = "ASX";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestB3ShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.B3;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestB3ShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.B3;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "B3");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestB3ShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.B3;
            string expectedValue = "B3";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestBMEShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.BME;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestBMEShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.BME;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "BME");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestBMEShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.BME;
            string expectedValue = "BME";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestBSEShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.BSE;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestBSEShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.BSE;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "BSE");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestBSEShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.BSE;
            string expectedValue = "BSE";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestFRAShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.FRA;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestFRAShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.FRA;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "FRA");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestFRAShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.FRA;
            string expectedValue = "FRA";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestICEXShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.ICEX;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestICEXShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.ICEX;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "ICEX");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestICEXShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.ICEX;
            string expectedValue = "ICEX";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestJPXShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.JPX;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestJPXShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.JPX;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "JPX");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestJPXShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.JPX;
            string expectedValue = "JPX";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestJSEShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.JSE;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestJSEShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.JSE;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "JSE");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestJSEShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.JSE;
            string expectedValue = "JSE";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestKRXShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.KRX;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestKRXShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.KRX;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "KRX");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestKRXShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.KRX;
            string expectedValue = "KRX";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestLONShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.LON;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestLONShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.LON;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "LON");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestLONShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.LON;
            string expectedValue = "LON";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestNSEShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.NSE;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestNSEShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.NSE;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "NSE");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestNSEShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.NSE;
            string expectedValue = "NSE";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestOMXShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.OMX;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestOMXShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.OMX;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "OMX");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestOMXShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.OMX;
            string expectedValue = "OMX";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestSEHKShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.SEHK;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestSEHKShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.SEHK;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "SEHK");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestSEHKShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.SEHK;
            string expectedValue = "SEHK";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestSGXShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.SGX;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestSGXShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.SGX;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "SGX");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestSGXShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.SGX;
            string expectedValue = "SGX";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestSSEShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.SSE;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestSSEShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.SSE;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "SSE");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestSSEShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.SSE;
            string expectedValue = "SSE";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestSTOShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.STO;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestSTOShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.STO;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "STO");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestSTOShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.STO;
            string expectedValue = "STO";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestSWXShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.SWX;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestSWXShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.SWX;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "SWX");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestSWXShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.SWX;
            string expectedValue = "SWX";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestSZSEShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.SZSE;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestSZSEShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.SZSE;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "SZSE");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestSZSEShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.SZSE;
            string expectedValue = "SZSE";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestTSXShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.TSX;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestTSXShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.TSX;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "TSX");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestTSXShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.TSX;
            string expectedValue = "TSX";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestTWSEShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.TWSE;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestTWSEShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.TWSE;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "TWSE");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestTWSEShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.TWSE;
            string expectedValue = "TWSE";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestVSEShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.VSE;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestVSEShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.VSE;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "VSE");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestVSEShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.VSE;
            string expectedValue = "VSE";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestOTHERShouldWork()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.OTHER;
            Assert.Equal(typeof(SMSTenDLCBrandStockExchange), test.GetType());
        }

        [Fact]
        public void TestOTHERShouldSerializeToEnum()
        {
            SMSTenDLCBrandStockExchange expectedValue = SMSTenDLCBrandStockExchange.OTHER;
            SMSTenDLCBrandStockExchange calculatedValue = (SMSTenDLCBrandStockExchange)
                Enum.Parse(typeof(SMSTenDLCBrandStockExchange), "OTHER");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestOTHERShouldDeserializeToString()
        {
            SMSTenDLCBrandStockExchange test = SMSTenDLCBrandStockExchange.OTHER;
            string expectedValue = "OTHER";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        public object getTestValue(Type type)
        {
            if (type == typeof(int))
            {
                return 1;
            }
            if (type == typeof(Nullable<int>))
            {
                return 1;
            }
            if (type == typeof(string))
            {
                return "TEST_STRING";
            }
            if (type == typeof(decimal))
            {
                return new decimal(0.1);
            }
            if (type == typeof(Nullable<decimal>))
            {
                return new decimal(0.1);
            }
            if (type == typeof(bool))
            {
                return true;
            }
            if (type == typeof(Nullable<bool>))
            {
                return true;
            }
            if (type == typeof(CallStatus))
            {
                return CallStatusValueConverter.FromString("completed");
            }
            if (type == typeof(CallDirection))
            {
                return CallDirectionValueConverter.FromString("inbound");
            }
            if (type == typeof(GetDigitsReason))
            {
                return GetDigitsReasonValueConverter.FromString("timeout");
            }
            if (type == typeof(LogLevel))
            {
                return LogLevelValueConverter.FromString("info");
            }
            if (type == typeof(CallEndedReason))
            {
                return CallEndedReasonValueConverter.FromString("busy");
            }
            if (type == typeof(SMSTenDLCBrandEntityType))
            {
                return SMSTenDLCBrandEntityTypeValueConverter.FromString("PUBLIC_PROFIT");
            }
            if (type == typeof(SMSTenDLCBrandStockExchange))
            {
                return SMSTenDLCBrandStockExchangeValueConverter.FromString("NONE");
            }
            if (type == typeof(SMSTenDLCBrandRelationship))
            {
                return SMSTenDLCBrandRelationshipValueConverter.FromString("BASIC_ACCOUNT");
            }
            if (type == typeof(SMSTenDLCBrandAltBusinessIdType))
            {
                return SMSTenDLCBrandAltBusinessIdTypeValueConverter.FromString("NONE");
            }
            if (type == typeof(SMSTenDLCBrandIdentityStatus))
            {
                return SMSTenDLCBrandIdentityStatusValueConverter.FromString("SELF_DECLARED");
            }
            if (type == typeof(PlayBeep))
            {
                return PlayBeepValueConverter.FromString("always");
            }
            if (type == typeof(UpdateCallRequestStatus))
            {
                return UpdateCallRequestStatusValueConverter.FromString("canceled");
            }
            if (type == typeof(QueueResultStatus))
            {
                return QueueResultStatusValueConverter.FromString("queueFull");
            }
            if (type == typeof(ConferenceStatus))
            {
                return ConferenceStatusValueConverter.FromString("empty");
            }
            if (type == typeof(MachineType))
            {
                return MachineTypeValueConverter.FromString("answering machine");
            }
            if (type == typeof(SMSTenDLCCampaignStatus))
            {
                return SMSTenDLCCampaignStatusValueConverter.FromString("ACTIVE");
            }
            if (type == typeof(SMSTenDLCPartnerCampaignStatus))
            {
                return SMSTenDLCPartnerCampaignStatusValueConverter.FromString("ACTIVE");
            }
            if (type == typeof(SMSTollFreeCampaignRegistrationStatus))
            {
                return SMSTollFreeCampaignRegistrationStatusValueConverter.FromString(
                    "UNREGISTERED"
                );
            }
            if (type == typeof(MessageStatus))
            {
                return MessageStatusValueConverter.FromString("new");
            }
            if (type == typeof(RecordUtteranceTermReason))
            {
                return RecordUtteranceTermReasonValueConverter.FromString("finishKey");
            }
            if (type == typeof(GrammarType))
            {
                return GrammarTypeValueConverter.FromString("URL");
            }
            if (type == typeof(CompletionResultStatus))
            {
                return CompletionResultStatusValueConverter.FromString("success");
            }
            if (type == typeof(AnsweredBy))
            {
                return AnsweredByValueConverter.FromString("human");
            }
            if (type == typeof(IfMachine))
            {
                return IfMachineValueConverter.FromString("redirect");
            }
            if (type == typeof(AccountType))
            {
                return AccountTypeValueConverter.FromString("trial");
            }
            if (type == typeof(AccountStatus))
            {
                return AccountStatusValueConverter.FromString("closed");
            }
            if (type == typeof(TranscribeTermReason))
            {
                return TranscribeTermReasonValueConverter.FromString("error");
            }
            if (type == typeof(TranscribeReason))
            {
                return TranscribeReasonValueConverter.FromString("internalError");
            }
            if (type == typeof(BargeInReason))
            {
                return BargeInReasonValueConverter.FromString("noBargeIn");
            }
            if (type == typeof(GetSpeechReason))
            {
                return GetSpeechReasonValueConverter.FromString("error");
            }
            if (type == typeof(UpdateConferenceRequestStatus))
            {
                return UpdateConferenceRequestStatusValueConverter.FromString("empty");
            }
            if (type == typeof(Capabilities))
            {
                return new Capabilities(false, false, false, false, false);
            }
            if (type == typeof(List<string>))
            {
                return new List<string>();
            }
            if (type == typeof(List<SMSTenDLCCampaign>))
            {
                return new List<SMSTenDLCCampaign>();
            }
            if (type == typeof(List<ConferenceResult>))
            {
                return new List<ConferenceResult>();
            }
            if (type == typeof(List<MessageResult>))
            {
                return new List<MessageResult>();
            }
            if (type == typeof(List<ApplicationResult>))
            {
                return new List<ApplicationResult>();
            }
            if (type == typeof(List<IncomingNumberResult>))
            {
                return new List<IncomingNumberResult>();
            }
            if (type == typeof(List<SMSTollFreeCampaign>))
            {
                return new List<SMSTollFreeCampaign>();
            }
            if (type == typeof(List<SMSTenDLCBrand>))
            {
                return new List<SMSTenDLCBrand>();
            }
            if (type == typeof(List<QueueResult>))
            {
                return new List<QueueResult>();
            }
            if (type == typeof(List<AvailableNumber>))
            {
                return new List<AvailableNumber>();
            }
            if (type == typeof(List<SMSTenDLCPartnerCampaign>))
            {
                return new List<SMSTenDLCPartnerCampaign>();
            }
            if (type == typeof(List<PerclCommand>))
            {
                return new List<PerclCommand>();
            }
            if (type == typeof(List<QueueMember>))
            {
                return new List<QueueMember>();
            }
            if (type == typeof(List<QueueResult>))
            {
                return new List<QueueResult>();
            }
            if (type == typeof(List<CallResult>))
            {
                return new List<CallResult>();
            }
            if (type == typeof(List<ConferenceParticipantResult>))
            {
                return new List<ConferenceParticipantResult>();
            }
            if (type == typeof(List<LogResult>))
            {
                return new List<LogResult>();
            }
            if (type == typeof(List<RecordingResult>))
            {
                return new List<RecordingResult>();
            }
            if (type == typeof(Capabilities))
            {
                return new Capabilities(
                    voice: false,
                    sms: false,
                    tenDLC: false,
                    tollFree: false,
                    shortCode: false
                );
            }
            if (type == typeof(TFN))
            {
                return new TFN(campaignId: "TEST_CAMPAIGN");
            }
            if (type == typeof(Dictionary<string, Object>))
            {
                return new Dictionary<string, Object>();
            }
            if (type == typeof(TranscribeUtteranceRecord))
            {
                return new TranscribeUtteranceRecord();
            }
            if (type == typeof(SMSTenDLCPartnerCampaignBrand))
            {
                return new SMSTenDLCPartnerCampaignBrand(
                    firstName: "TEST_FIRST_NAME",
                    lastName: "TEST_LAST_NAME",
                    displayName: "TEST_DISPLAY_NAME",
                    companyName: "TEST_COMPANY_NAME",
                    website: "TEST_WEBSITE",
                    evpVettingScore: 0,
                    accountId: "TEST_ACCOUNT_ID",
                    phone: "TEST_PHONE_NUMBER",
                    email: "TEST_EMAIL"
                );
            }
            if (type == typeof(DateTime))
            {
                return DateTime.Today;
            }
            if (type == typeof(Nullable<DateTime>))
            {
                return DateTime.Today;
            }
            if (type == typeof(DateOnly))
            {
                return DateOnly.FromDateTime(DateTime.Now);
            }
            if (type == typeof(Nullable<DateOnly>))
            {
                return DateOnly.FromDateTime(DateTime.Now);
            }
            if (type == typeof(Object))
            {
                return new Dictionary<string, string>();
            }
            throw new ArgumentException("Provided type has no test value", type.ToString());
        }
    }
}
