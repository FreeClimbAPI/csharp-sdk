/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Enums
{
    /// <summary>
    ///  Class for testing TTSEngineName
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class TTSEngineNameTests : IDisposable
    {
        private TTSEngineName instance;

        public TTSEngineNameTests()
        {
            instance = new TTSEngineName();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TTSEngineName
        /// </summary>
        [Fact]
        public void TTSEngineNameInstanceTest()
        {
            Assert.IsType<TTSEngineName>(instance);
        }

        [Fact]
        public void TestFREECLIMB_STANDARDShouldWork()
        {
            TTSEngineName test = TTSEngineName.FREECLIMB_STANDARD;
            Assert.Equal(typeof(TTSEngineName), test.GetType());
        }

        [Fact]
        public void TestFREECLIMB_STANDARDShouldSerializeToEnum()
        {
            TTSEngineName expectedValue = TTSEngineName.FREECLIMB_STANDARD;
            TTSEngineName calculatedValue = (TTSEngineName)
                Enum.Parse(typeof(TTSEngineName), "FREECLIMB_STANDARD");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestFREECLIMB_STANDARDShouldDeserializeToString()
        {
            TTSEngineName test = TTSEngineName.FREECLIMB_STANDARD;
            string expectedValue = "FREECLIMB_STANDARD";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestFREECLIMB_NEURALShouldWork()
        {
            TTSEngineName test = TTSEngineName.FREECLIMB_NEURAL;
            Assert.Equal(typeof(TTSEngineName), test.GetType());
        }

        [Fact]
        public void TestFREECLIMB_NEURALShouldSerializeToEnum()
        {
            TTSEngineName expectedValue = TTSEngineName.FREECLIMB_NEURAL;
            TTSEngineName calculatedValue = (TTSEngineName)
                Enum.Parse(typeof(TTSEngineName), "FREECLIMB_NEURAL");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestFREECLIMB_NEURALShouldDeserializeToString()
        {
            TTSEngineName test = TTSEngineName.FREECLIMB_NEURAL;
            string expectedValue = "FREECLIMB_NEURAL";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestELEVEN_LABSShouldWork()
        {
            TTSEngineName test = TTSEngineName.ELEVEN_LABS;
            Assert.Equal(typeof(TTSEngineName), test.GetType());
        }

        [Fact]
        public void TestELEVEN_LABSShouldSerializeToEnum()
        {
            TTSEngineName expectedValue = TTSEngineName.ELEVEN_LABS;
            TTSEngineName calculatedValue = (TTSEngineName)
                Enum.Parse(typeof(TTSEngineName), "ELEVEN_LABS");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestELEVEN_LABSShouldDeserializeToString()
        {
            TTSEngineName test = TTSEngineName.ELEVEN_LABS;
            string expectedValue = "ELEVEN_LABS";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }
    }
}
