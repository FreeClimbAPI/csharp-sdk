/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */




using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using System.Text;
using freeclimb.Api;
using freeclimb.Model;
using freeclimb.Client;
using System.Reflection;
using Newtonsoft.Json;
using System.Globalization;
using freeclimb.Enums;


namespace freeclimb.Test.Enums
{
    /// <summary>
    ///  Class for testing QueueResultStatus
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class QueueResultStatusTests
    {
        private QueueResultStatus instance;

        public QueueResultStatusTests()
        {
            instance = new QueueResultStatus();
        }

        /// <summary>
        /// Test an instance of QueueResultStatus
        /// </summary>
        [Fact]
        public void QueueResultStatusInstanceTest()
        {
            Assert.IsType<QueueResultStatus>(instance);
        }


        [Fact]
        public void TestQUEUE_FULLShouldWork()
        {
            QueueResultStatus test = QueueResultStatus.QUEUE_FULL;
            Assert.Equal(typeof(QueueResultStatus), test.GetType());
        }

        [Fact]
        public void TestQUEUE_FULLShouldSerializeToEnum()
        {
            QueueResultStatus expectedValue = QueueResultStatus.QUEUE_FULL;
            QueueResultStatus calculatedValue = (QueueResultStatus)Enum.Parse(typeof(QueueResultStatus), "QUEUE_FULL");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestQUEUE_FULLShouldDeserializeToString()
        {
            QueueResultStatus test = QueueResultStatus.QUEUE_FULL;
            string expectedValue = "QUEUE_FULL";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDEQUEUEDShouldWork()
        {
            QueueResultStatus test = QueueResultStatus.DEQUEUED;
            Assert.Equal(typeof(QueueResultStatus), test.GetType());
        }

        [Fact]
        public void TestDEQUEUEDShouldSerializeToEnum()
        {
            QueueResultStatus expectedValue = QueueResultStatus.DEQUEUED;
            QueueResultStatus calculatedValue = (QueueResultStatus)Enum.Parse(typeof(QueueResultStatus), "DEQUEUED");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDEQUEUEDShouldDeserializeToString()
        {
            QueueResultStatus test = QueueResultStatus.DEQUEUED;
            string expectedValue = "DEQUEUED";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHANGUPShouldWork()
        {
            QueueResultStatus test = QueueResultStatus.HANGUP;
            Assert.Equal(typeof(QueueResultStatus), test.GetType());
        }

        [Fact]
        public void TestHANGUPShouldSerializeToEnum()
        {
            QueueResultStatus expectedValue = QueueResultStatus.HANGUP;
            QueueResultStatus calculatedValue = (QueueResultStatus)Enum.Parse(typeof(QueueResultStatus), "HANGUP");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHANGUPShouldDeserializeToString()
        {
            QueueResultStatus test = QueueResultStatus.HANGUP;
            string expectedValue = "HANGUP";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestSYSTEM_ERRORShouldWork()
        {
            QueueResultStatus test = QueueResultStatus.SYSTEM_ERROR;
            Assert.Equal(typeof(QueueResultStatus), test.GetType());
        }

        [Fact]
        public void TestSYSTEM_ERRORShouldSerializeToEnum()
        {
            QueueResultStatus expectedValue = QueueResultStatus.SYSTEM_ERROR;
            QueueResultStatus calculatedValue = (QueueResultStatus)Enum.Parse(typeof(QueueResultStatus), "SYSTEM_ERROR");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestSYSTEM_ERRORShouldDeserializeToString()
        {
            QueueResultStatus test = QueueResultStatus.SYSTEM_ERROR;
            string expectedValue = "SYSTEM_ERROR";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

    }
}
