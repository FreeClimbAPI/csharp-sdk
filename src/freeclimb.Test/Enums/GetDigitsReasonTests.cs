/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Enums
{
    /// <summary>
    ///  Class for testing GetDigitsReason
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class GetDigitsReasonTests : IDisposable
    {
        private GetDigitsReason instance;

        public GetDigitsReasonTests()
        {
            instance = new GetDigitsReason();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GetDigitsReason
        /// </summary>
        [Fact]
        public void GetDigitsReasonInstanceTest()
        {
            Assert.IsType<GetDigitsReason>(instance);
        }

        [Fact]
        public void TestFINISH_KEYShouldWork()
        {
            GetDigitsReason test = GetDigitsReason.FINISH_KEY;
            Assert.Equal(typeof(GetDigitsReason), test.GetType());
        }

        [Fact]
        public void TestFINISH_KEYShouldSerializeToEnum()
        {
            GetDigitsReason expectedValue = GetDigitsReason.FINISH_KEY;
            GetDigitsReason calculatedValue = (GetDigitsReason)
                Enum.Parse(typeof(GetDigitsReason), "FINISH_KEY");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestFINISH_KEYShouldDeserializeToString()
        {
            GetDigitsReason test = GetDigitsReason.FINISH_KEY;
            string expectedValue = "FINISH_KEY";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestTIMEOUTShouldWork()
        {
            GetDigitsReason test = GetDigitsReason.TIMEOUT;
            Assert.Equal(typeof(GetDigitsReason), test.GetType());
        }

        [Fact]
        public void TestTIMEOUTShouldSerializeToEnum()
        {
            GetDigitsReason expectedValue = GetDigitsReason.TIMEOUT;
            GetDigitsReason calculatedValue = (GetDigitsReason)
                Enum.Parse(typeof(GetDigitsReason), "TIMEOUT");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestTIMEOUTShouldDeserializeToString()
        {
            GetDigitsReason test = GetDigitsReason.TIMEOUT;
            string expectedValue = "TIMEOUT";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestMAX_DIGITSShouldWork()
        {
            GetDigitsReason test = GetDigitsReason.MAX_DIGITS;
            Assert.Equal(typeof(GetDigitsReason), test.GetType());
        }

        [Fact]
        public void TestMAX_DIGITSShouldSerializeToEnum()
        {
            GetDigitsReason expectedValue = GetDigitsReason.MAX_DIGITS;
            GetDigitsReason calculatedValue = (GetDigitsReason)
                Enum.Parse(typeof(GetDigitsReason), "MAX_DIGITS");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestMAX_DIGITSShouldDeserializeToString()
        {
            GetDigitsReason test = GetDigitsReason.MAX_DIGITS;
            string expectedValue = "MAX_DIGITS";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestTONEShouldWork()
        {
            GetDigitsReason test = GetDigitsReason.TONE;
            Assert.Equal(typeof(GetDigitsReason), test.GetType());
        }

        [Fact]
        public void TestTONEShouldSerializeToEnum()
        {
            GetDigitsReason expectedValue = GetDigitsReason.TONE;
            GetDigitsReason calculatedValue = (GetDigitsReason)
                Enum.Parse(typeof(GetDigitsReason), "TONE");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestTONEShouldDeserializeToString()
        {
            GetDigitsReason test = GetDigitsReason.TONE;
            string expectedValue = "TONE";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }
    }
}
