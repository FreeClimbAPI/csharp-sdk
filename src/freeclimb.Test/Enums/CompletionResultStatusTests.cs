/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Enums
{
    /// <summary>
    ///  Class for testing CompletionResultStatus
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class CompletionResultStatusTests : IDisposable
    {
        private CompletionResultStatus instance;

        public CompletionResultStatusTests()
        {
            instance = new CompletionResultStatus();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CompletionResultStatus
        /// </summary>
        [Fact]
        public void CompletionResultStatusInstanceTest()
        {
            Assert.IsType<CompletionResultStatus>(instance);
        }

        [Fact]
        public void TestSUCCESSShouldWork()
        {
            CompletionResultStatus test = CompletionResultStatus.SUCCESS;
            Assert.Equal(typeof(CompletionResultStatus), test.GetType());
        }

        [Fact]
        public void TestSUCCESSShouldSerializeToEnum()
        {
            CompletionResultStatus expectedValue = CompletionResultStatus.SUCCESS;
            CompletionResultStatus calculatedValue = (CompletionResultStatus)
                Enum.Parse(typeof(CompletionResultStatus), "SUCCESS");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestSUCCESSShouldDeserializeToString()
        {
            CompletionResultStatus test = CompletionResultStatus.SUCCESS;
            string expectedValue = "SUCCESS";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestNO_CONTEXTShouldWork()
        {
            CompletionResultStatus test = CompletionResultStatus.NO_CONTEXT;
            Assert.Equal(typeof(CompletionResultStatus), test.GetType());
        }

        [Fact]
        public void TestNO_CONTEXTShouldSerializeToEnum()
        {
            CompletionResultStatus expectedValue = CompletionResultStatus.NO_CONTEXT;
            CompletionResultStatus calculatedValue = (CompletionResultStatus)
                Enum.Parse(typeof(CompletionResultStatus), "NO_CONTEXT");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestNO_CONTEXTShouldDeserializeToString()
        {
            CompletionResultStatus test = CompletionResultStatus.NO_CONTEXT;
            string expectedValue = "NO_CONTEXT";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }
    }
}
