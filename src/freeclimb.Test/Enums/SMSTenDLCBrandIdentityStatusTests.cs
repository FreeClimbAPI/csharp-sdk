/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Enums
{
    /// <summary>
    ///  Class for testing SMSTenDLCBrandIdentityStatus
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class SMSTenDLCBrandIdentityStatusTests : IDisposable
    {
        private SMSTenDLCBrandIdentityStatus instance;

        public SMSTenDLCBrandIdentityStatusTests()
        {
            instance = new SMSTenDLCBrandIdentityStatus();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SMSTenDLCBrandIdentityStatus
        /// </summary>
        [Fact]
        public void SMSTenDLCBrandIdentityStatusInstanceTest()
        {
            Assert.IsType<SMSTenDLCBrandIdentityStatus>(instance);
        }

        [Fact]
        public void TestSELF_DECLAREDShouldWork()
        {
            SMSTenDLCBrandIdentityStatus test = SMSTenDLCBrandIdentityStatus.SELF_DECLARED;
            Assert.Equal(typeof(SMSTenDLCBrandIdentityStatus), test.GetType());
        }

        [Fact]
        public void TestSELF_DECLAREDShouldSerializeToEnum()
        {
            SMSTenDLCBrandIdentityStatus expectedValue = SMSTenDLCBrandIdentityStatus.SELF_DECLARED;
            SMSTenDLCBrandIdentityStatus calculatedValue = (SMSTenDLCBrandIdentityStatus)
                Enum.Parse(typeof(SMSTenDLCBrandIdentityStatus), "SELF_DECLARED");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestSELF_DECLAREDShouldDeserializeToString()
        {
            SMSTenDLCBrandIdentityStatus test = SMSTenDLCBrandIdentityStatus.SELF_DECLARED;
            string expectedValue = "SELF_DECLARED";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestUNVERIFIEDShouldWork()
        {
            SMSTenDLCBrandIdentityStatus test = SMSTenDLCBrandIdentityStatus.UNVERIFIED;
            Assert.Equal(typeof(SMSTenDLCBrandIdentityStatus), test.GetType());
        }

        [Fact]
        public void TestUNVERIFIEDShouldSerializeToEnum()
        {
            SMSTenDLCBrandIdentityStatus expectedValue = SMSTenDLCBrandIdentityStatus.UNVERIFIED;
            SMSTenDLCBrandIdentityStatus calculatedValue = (SMSTenDLCBrandIdentityStatus)
                Enum.Parse(typeof(SMSTenDLCBrandIdentityStatus), "UNVERIFIED");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestUNVERIFIEDShouldDeserializeToString()
        {
            SMSTenDLCBrandIdentityStatus test = SMSTenDLCBrandIdentityStatus.UNVERIFIED;
            string expectedValue = "UNVERIFIED";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestVERIFIEDShouldWork()
        {
            SMSTenDLCBrandIdentityStatus test = SMSTenDLCBrandIdentityStatus.VERIFIED;
            Assert.Equal(typeof(SMSTenDLCBrandIdentityStatus), test.GetType());
        }

        [Fact]
        public void TestVERIFIEDShouldSerializeToEnum()
        {
            SMSTenDLCBrandIdentityStatus expectedValue = SMSTenDLCBrandIdentityStatus.VERIFIED;
            SMSTenDLCBrandIdentityStatus calculatedValue = (SMSTenDLCBrandIdentityStatus)
                Enum.Parse(typeof(SMSTenDLCBrandIdentityStatus), "VERIFIED");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestVERIFIEDShouldDeserializeToString()
        {
            SMSTenDLCBrandIdentityStatus test = SMSTenDLCBrandIdentityStatus.VERIFIED;
            string expectedValue = "VERIFIED";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestVETTED_VERIFIEDShouldWork()
        {
            SMSTenDLCBrandIdentityStatus test = SMSTenDLCBrandIdentityStatus.VETTED_VERIFIED;
            Assert.Equal(typeof(SMSTenDLCBrandIdentityStatus), test.GetType());
        }

        [Fact]
        public void TestVETTED_VERIFIEDShouldSerializeToEnum()
        {
            SMSTenDLCBrandIdentityStatus expectedValue =
                SMSTenDLCBrandIdentityStatus.VETTED_VERIFIED;
            SMSTenDLCBrandIdentityStatus calculatedValue = (SMSTenDLCBrandIdentityStatus)
                Enum.Parse(typeof(SMSTenDLCBrandIdentityStatus), "VETTED_VERIFIED");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestVETTED_VERIFIEDShouldDeserializeToString()
        {
            SMSTenDLCBrandIdentityStatus test = SMSTenDLCBrandIdentityStatus.VETTED_VERIFIED;
            string expectedValue = "VETTED_VERIFIED";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }
    }
}
