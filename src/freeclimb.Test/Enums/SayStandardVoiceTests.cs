/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Enums
{
    /// <summary>
    ///  Class for testing SayStandardVoice
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class SayStandardVoiceTests : IDisposable
    {
        private SayStandardVoice instance;

        public SayStandardVoiceTests()
        {
            instance = new SayStandardVoice();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SayStandardVoice
        /// </summary>
        [Fact]
        public void SayStandardVoiceInstanceTest()
        {
            Assert.IsType<SayStandardVoice>(instance);
        }

        [Fact]
        public void TestHERENAShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.HERENA;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestHERENAShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.HERENA;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "HERENA");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHERENAShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.HERENA;
            string expectedValue = "HERENA";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHELLEShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.HELLE;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestHELLEShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.HELLE;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "HELLE");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHELLEShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.HELLE;
            string expectedValue = "HELLE";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHEDDAShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.HEDDA;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestHEDDAShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.HEDDA;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "HEDDA");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHEDDAShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.HEDDA;
            string expectedValue = "HEDDA";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHAYLEYShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.HAYLEY;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestHAYLEYShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.HAYLEY;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "HAYLEY");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHAYLEYShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.HAYLEY;
            string expectedValue = "HAYLEY";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHEATHERShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.HEATHER;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestHEATHERShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.HEATHER;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "HEATHER");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHEATHERShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.HEATHER;
            string expectedValue = "HEATHER";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHAZELShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.HAZEL;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestHAZELShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.HAZEL;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "HAZEL");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHAZELShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.HAZEL;
            string expectedValue = "HAZEL";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHEERAShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.HEERA;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestHEERAShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.HEERA;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "HEERA");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHEERAShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.HEERA;
            string expectedValue = "HEERA";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHELENShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.HELEN;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestHELENShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.HELEN;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "HELEN");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHELENShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.HELEN;
            string expectedValue = "HELEN";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestZIRA_PROShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.ZIRA_PRO;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestZIRA_PROShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.ZIRA_PRO;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "ZIRA_PRO");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestZIRA_PROShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.ZIRA_PRO;
            string expectedValue = "ZIRA_PRO";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHELENAShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.HELENA;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestHELENAShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.HELENA;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "HELENA");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHELENAShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.HELENA;
            string expectedValue = "HELENA";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHILDAShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.HILDA;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestHILDAShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.HILDA;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "HILDA");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHILDAShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.HILDA;
            string expectedValue = "HILDA";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHEIDIShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.HEIDI;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestHEIDIShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.HEIDI;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "HEIDI");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHEIDIShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.HEIDI;
            string expectedValue = "HEIDI";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHARMONIEShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.HARMONIE;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestHARMONIEShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.HARMONIE;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "HARMONIE");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHARMONIEShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.HARMONIE;
            string expectedValue = "HARMONIE";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHORTENSEShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.HORTENSE;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestHORTENSEShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.HORTENSE;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "HORTENSE");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHORTENSEShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.HORTENSE;
            string expectedValue = "HORTENSE";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestLUCIAShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.LUCIA;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestLUCIAShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.LUCIA;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "LUCIA");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestLUCIAShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.LUCIA;
            string expectedValue = "LUCIA";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHARKUAShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.HARKUA;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestHARKUAShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.HARKUA;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "HARKUA");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHARKUAShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.HARKUA;
            string expectedValue = "HARKUA";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHEAMIShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.HEAMI;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestHEAMIShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.HEAMI;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "HEAMI");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHEAMIShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.HEAMI;
            string expectedValue = "HEAMI";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHULDAShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.HULDA;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestHULDAShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.HULDA;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "HULDA");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHULDAShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.HULDA;
            string expectedValue = "HULDA";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHANNAShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.HANNA;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestHANNAShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.HANNA;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "HANNA");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHANNAShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.HANNA;
            string expectedValue = "HANNA";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestPAULINAShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.PAULINA;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestPAULINAShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.PAULINA;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "PAULINA");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestPAULINAShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.PAULINA;
            string expectedValue = "PAULINA";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHELOSIAShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.HELOSIA;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestHELOSIAShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.HELOSIA;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "HELOSIA");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHELOSIAShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.HELOSIA;
            string expectedValue = "HELOSIA";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHELIAShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.HELIA;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestHELIAShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.HELIA;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "HELIA");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHELIAShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.HELIA;
            string expectedValue = "HELIA";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestELENAShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.ELENA;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestELENAShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.ELENA;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "ELENA");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestELENAShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.ELENA;
            string expectedValue = "ELENA";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHEDVIGShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.HEDVIG;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestHEDVIGShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.HEDVIG;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "HEDVIG");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHEDVIGShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.HEDVIG;
            string expectedValue = "HEDVIG";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHUN_YEEShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.HUN_YEE;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestHUN_YEEShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.HUN_YEE;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "HUN_YEE");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHUN_YEEShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.HUN_YEE;
            string expectedValue = "HUN_YEE";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHAN_HANShouldWork()
        {
            SayStandardVoice test = SayStandardVoice.HAN_HAN;
            Assert.Equal(typeof(SayStandardVoice), test.GetType());
        }

        [Fact]
        public void TestHAN_HANShouldSerializeToEnum()
        {
            SayStandardVoice expectedValue = SayStandardVoice.HAN_HAN;
            SayStandardVoice calculatedValue = (SayStandardVoice)
                Enum.Parse(typeof(SayStandardVoice), "HAN_HAN");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestHAN_HANShouldDeserializeToString()
        {
            SayStandardVoice test = SayStandardVoice.HAN_HAN;
            string expectedValue = "HAN_HAN";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }
    }
}
