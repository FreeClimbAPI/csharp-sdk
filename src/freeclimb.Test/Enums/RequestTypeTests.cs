/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Enums
{
    /// <summary>
    ///  Class for testing RequestType
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class RequestTypeTests : IDisposable
    {
        private RequestType instance;

        public RequestTypeTests()
        {
            instance = new RequestType();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of RequestType
        /// </summary>
        [Fact]
        public void RequestTypeInstanceTest()
        {
            Assert.IsType<RequestType>(instance);
        }

        [Fact]
        public void TestINBOUND_CALLShouldWork()
        {
            RequestType test = RequestType.INBOUND_CALL;
            Assert.Equal(typeof(RequestType), test.GetType());
        }

        [Fact]
        public void TestINBOUND_CALLShouldSerializeToEnum()
        {
            RequestType expectedValue = RequestType.INBOUND_CALL;
            RequestType calculatedValue = (RequestType)
                Enum.Parse(typeof(RequestType), "INBOUND_CALL");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestINBOUND_CALLShouldDeserializeToString()
        {
            RequestType test = RequestType.INBOUND_CALL;
            string expectedValue = "INBOUND_CALL";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestRECORDShouldWork()
        {
            RequestType test = RequestType.RECORD;
            Assert.Equal(typeof(RequestType), test.GetType());
        }

        [Fact]
        public void TestRECORDShouldSerializeToEnum()
        {
            RequestType expectedValue = RequestType.RECORD;
            RequestType calculatedValue = (RequestType)Enum.Parse(typeof(RequestType), "RECORD");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestRECORDShouldDeserializeToString()
        {
            RequestType test = RequestType.RECORD;
            string expectedValue = "RECORD";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestGET_DIGITSShouldWork()
        {
            RequestType test = RequestType.GET_DIGITS;
            Assert.Equal(typeof(RequestType), test.GetType());
        }

        [Fact]
        public void TestGET_DIGITSShouldSerializeToEnum()
        {
            RequestType expectedValue = RequestType.GET_DIGITS;
            RequestType calculatedValue = (RequestType)
                Enum.Parse(typeof(RequestType), "GET_DIGITS");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestGET_DIGITSShouldDeserializeToString()
        {
            RequestType test = RequestType.GET_DIGITS;
            string expectedValue = "GET_DIGITS";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestGET_SPEECHShouldWork()
        {
            RequestType test = RequestType.GET_SPEECH;
            Assert.Equal(typeof(RequestType), test.GetType());
        }

        [Fact]
        public void TestGET_SPEECHShouldSerializeToEnum()
        {
            RequestType expectedValue = RequestType.GET_SPEECH;
            RequestType calculatedValue = (RequestType)
                Enum.Parse(typeof(RequestType), "GET_SPEECH");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestGET_SPEECHShouldDeserializeToString()
        {
            RequestType test = RequestType.GET_SPEECH;
            string expectedValue = "GET_SPEECH";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestREDIRECTShouldWork()
        {
            RequestType test = RequestType.REDIRECT;
            Assert.Equal(typeof(RequestType), test.GetType());
        }

        [Fact]
        public void TestREDIRECTShouldSerializeToEnum()
        {
            RequestType expectedValue = RequestType.REDIRECT;
            RequestType calculatedValue = (RequestType)Enum.Parse(typeof(RequestType), "REDIRECT");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestREDIRECTShouldDeserializeToString()
        {
            RequestType test = RequestType.REDIRECT;
            string expectedValue = "REDIRECT";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestPAUSEShouldWork()
        {
            RequestType test = RequestType.PAUSE;
            Assert.Equal(typeof(RequestType), test.GetType());
        }

        [Fact]
        public void TestPAUSEShouldSerializeToEnum()
        {
            RequestType expectedValue = RequestType.PAUSE;
            RequestType calculatedValue = (RequestType)Enum.Parse(typeof(RequestType), "PAUSE");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestPAUSEShouldDeserializeToString()
        {
            RequestType test = RequestType.PAUSE;
            string expectedValue = "PAUSE";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestOUT_DIAL_STARTShouldWork()
        {
            RequestType test = RequestType.OUT_DIAL_START;
            Assert.Equal(typeof(RequestType), test.GetType());
        }

        [Fact]
        public void TestOUT_DIAL_STARTShouldSerializeToEnum()
        {
            RequestType expectedValue = RequestType.OUT_DIAL_START;
            RequestType calculatedValue = (RequestType)
                Enum.Parse(typeof(RequestType), "OUT_DIAL_START");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestOUT_DIAL_STARTShouldDeserializeToString()
        {
            RequestType test = RequestType.OUT_DIAL_START;
            string expectedValue = "OUT_DIAL_START";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestOUT_DIAL_CONNECTShouldWork()
        {
            RequestType test = RequestType.OUT_DIAL_CONNECT;
            Assert.Equal(typeof(RequestType), test.GetType());
        }

        [Fact]
        public void TestOUT_DIAL_CONNECTShouldSerializeToEnum()
        {
            RequestType expectedValue = RequestType.OUT_DIAL_CONNECT;
            RequestType calculatedValue = (RequestType)
                Enum.Parse(typeof(RequestType), "OUT_DIAL_CONNECT");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestOUT_DIAL_CONNECTShouldDeserializeToString()
        {
            RequestType test = RequestType.OUT_DIAL_CONNECT;
            string expectedValue = "OUT_DIAL_CONNECT";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestOUT_DIAL_API_CONNECTShouldWork()
        {
            RequestType test = RequestType.OUT_DIAL_API_CONNECT;
            Assert.Equal(typeof(RequestType), test.GetType());
        }

        [Fact]
        public void TestOUT_DIAL_API_CONNECTShouldSerializeToEnum()
        {
            RequestType expectedValue = RequestType.OUT_DIAL_API_CONNECT;
            RequestType calculatedValue = (RequestType)
                Enum.Parse(typeof(RequestType), "OUT_DIAL_API_CONNECT");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestOUT_DIAL_API_CONNECTShouldDeserializeToString()
        {
            RequestType test = RequestType.OUT_DIAL_API_CONNECT;
            string expectedValue = "OUT_DIAL_API_CONNECT";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestMACHINE_DETECTEDShouldWork()
        {
            RequestType test = RequestType.MACHINE_DETECTED;
            Assert.Equal(typeof(RequestType), test.GetType());
        }

        [Fact]
        public void TestMACHINE_DETECTEDShouldSerializeToEnum()
        {
            RequestType expectedValue = RequestType.MACHINE_DETECTED;
            RequestType calculatedValue = (RequestType)
                Enum.Parse(typeof(RequestType), "MACHINE_DETECTED");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestMACHINE_DETECTEDShouldDeserializeToString()
        {
            RequestType test = RequestType.MACHINE_DETECTED;
            string expectedValue = "MACHINE_DETECTED";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDEQUEUEShouldWork()
        {
            RequestType test = RequestType.DEQUEUE;
            Assert.Equal(typeof(RequestType), test.GetType());
        }

        [Fact]
        public void TestDEQUEUEShouldSerializeToEnum()
        {
            RequestType expectedValue = RequestType.DEQUEUE;
            RequestType calculatedValue = (RequestType)Enum.Parse(typeof(RequestType), "DEQUEUE");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestDEQUEUEShouldDeserializeToString()
        {
            RequestType test = RequestType.DEQUEUE;
            string expectedValue = "DEQUEUE";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestQUEUE_WAITShouldWork()
        {
            RequestType test = RequestType.QUEUE_WAIT;
            Assert.Equal(typeof(RequestType), test.GetType());
        }

        [Fact]
        public void TestQUEUE_WAITShouldSerializeToEnum()
        {
            RequestType expectedValue = RequestType.QUEUE_WAIT;
            RequestType calculatedValue = (RequestType)
                Enum.Parse(typeof(RequestType), "QUEUE_WAIT");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestQUEUE_WAITShouldDeserializeToString()
        {
            RequestType test = RequestType.QUEUE_WAIT;
            string expectedValue = "QUEUE_WAIT";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestADD_TO_QUEUE_NOTIFICATIONShouldWork()
        {
            RequestType test = RequestType.ADD_TO_QUEUE_NOTIFICATION;
            Assert.Equal(typeof(RequestType), test.GetType());
        }

        [Fact]
        public void TestADD_TO_QUEUE_NOTIFICATIONShouldSerializeToEnum()
        {
            RequestType expectedValue = RequestType.ADD_TO_QUEUE_NOTIFICATION;
            RequestType calculatedValue = (RequestType)
                Enum.Parse(typeof(RequestType), "ADD_TO_QUEUE_NOTIFICATION");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestADD_TO_QUEUE_NOTIFICATIONShouldDeserializeToString()
        {
            RequestType test = RequestType.ADD_TO_QUEUE_NOTIFICATION;
            string expectedValue = "ADD_TO_QUEUE_NOTIFICATION";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestREMOVE_FROM_QUEUE_NOTIFICATIONShouldWork()
        {
            RequestType test = RequestType.REMOVE_FROM_QUEUE_NOTIFICATION;
            Assert.Equal(typeof(RequestType), test.GetType());
        }

        [Fact]
        public void TestREMOVE_FROM_QUEUE_NOTIFICATIONShouldSerializeToEnum()
        {
            RequestType expectedValue = RequestType.REMOVE_FROM_QUEUE_NOTIFICATION;
            RequestType calculatedValue = (RequestType)
                Enum.Parse(typeof(RequestType), "REMOVE_FROM_QUEUE_NOTIFICATION");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestREMOVE_FROM_QUEUE_NOTIFICATIONShouldDeserializeToString()
        {
            RequestType test = RequestType.REMOVE_FROM_QUEUE_NOTIFICATION;
            string expectedValue = "REMOVE_FROM_QUEUE_NOTIFICATION";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestCALL_STATUSShouldWork()
        {
            RequestType test = RequestType.CALL_STATUS;
            Assert.Equal(typeof(RequestType), test.GetType());
        }

        [Fact]
        public void TestCALL_STATUSShouldSerializeToEnum()
        {
            RequestType expectedValue = RequestType.CALL_STATUS;
            RequestType calculatedValue = (RequestType)
                Enum.Parse(typeof(RequestType), "CALL_STATUS");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestCALL_STATUSShouldDeserializeToString()
        {
            RequestType test = RequestType.CALL_STATUS;
            string expectedValue = "CALL_STATUS";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestCREATE_CONFERENCEShouldWork()
        {
            RequestType test = RequestType.CREATE_CONFERENCE;
            Assert.Equal(typeof(RequestType), test.GetType());
        }

        [Fact]
        public void TestCREATE_CONFERENCEShouldSerializeToEnum()
        {
            RequestType expectedValue = RequestType.CREATE_CONFERENCE;
            RequestType calculatedValue = (RequestType)
                Enum.Parse(typeof(RequestType), "CREATE_CONFERENCE");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestCREATE_CONFERENCEShouldDeserializeToString()
        {
            RequestType test = RequestType.CREATE_CONFERENCE;
            string expectedValue = "CREATE_CONFERENCE";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestCONFERENCE_STATUSShouldWork()
        {
            RequestType test = RequestType.CONFERENCE_STATUS;
            Assert.Equal(typeof(RequestType), test.GetType());
        }

        [Fact]
        public void TestCONFERENCE_STATUSShouldSerializeToEnum()
        {
            RequestType expectedValue = RequestType.CONFERENCE_STATUS;
            RequestType calculatedValue = (RequestType)
                Enum.Parse(typeof(RequestType), "CONFERENCE_STATUS");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestCONFERENCE_STATUSShouldDeserializeToString()
        {
            RequestType test = RequestType.CONFERENCE_STATUS;
            string expectedValue = "CONFERENCE_STATUS";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestLEAVE_CONFERENCEShouldWork()
        {
            RequestType test = RequestType.LEAVE_CONFERENCE;
            Assert.Equal(typeof(RequestType), test.GetType());
        }

        [Fact]
        public void TestLEAVE_CONFERENCEShouldSerializeToEnum()
        {
            RequestType expectedValue = RequestType.LEAVE_CONFERENCE;
            RequestType calculatedValue = (RequestType)
                Enum.Parse(typeof(RequestType), "LEAVE_CONFERENCE");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestLEAVE_CONFERENCEShouldDeserializeToString()
        {
            RequestType test = RequestType.LEAVE_CONFERENCE;
            string expectedValue = "LEAVE_CONFERENCE";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestADD_TO_CONFERENCE_NOTIFICATIONShouldWork()
        {
            RequestType test = RequestType.ADD_TO_CONFERENCE_NOTIFICATION;
            Assert.Equal(typeof(RequestType), test.GetType());
        }

        [Fact]
        public void TestADD_TO_CONFERENCE_NOTIFICATIONShouldSerializeToEnum()
        {
            RequestType expectedValue = RequestType.ADD_TO_CONFERENCE_NOTIFICATION;
            RequestType calculatedValue = (RequestType)
                Enum.Parse(typeof(RequestType), "ADD_TO_CONFERENCE_NOTIFICATION");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestADD_TO_CONFERENCE_NOTIFICATIONShouldDeserializeToString()
        {
            RequestType test = RequestType.ADD_TO_CONFERENCE_NOTIFICATION;
            string expectedValue = "ADD_TO_CONFERENCE_NOTIFICATION";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestCONFERENCE_RECORDING_STATUSShouldWork()
        {
            RequestType test = RequestType.CONFERENCE_RECORDING_STATUS;
            Assert.Equal(typeof(RequestType), test.GetType());
        }

        [Fact]
        public void TestCONFERENCE_RECORDING_STATUSShouldSerializeToEnum()
        {
            RequestType expectedValue = RequestType.CONFERENCE_RECORDING_STATUS;
            RequestType calculatedValue = (RequestType)
                Enum.Parse(typeof(RequestType), "CONFERENCE_RECORDING_STATUS");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestCONFERENCE_RECORDING_STATUSShouldDeserializeToString()
        {
            RequestType test = RequestType.CONFERENCE_RECORDING_STATUS;
            string expectedValue = "CONFERENCE_RECORDING_STATUS";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestCONFERENCE_CALL_CONTROLShouldWork()
        {
            RequestType test = RequestType.CONFERENCE_CALL_CONTROL;
            Assert.Equal(typeof(RequestType), test.GetType());
        }

        [Fact]
        public void TestCONFERENCE_CALL_CONTROLShouldSerializeToEnum()
        {
            RequestType expectedValue = RequestType.CONFERENCE_CALL_CONTROL;
            RequestType calculatedValue = (RequestType)
                Enum.Parse(typeof(RequestType), "CONFERENCE_CALL_CONTROL");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestCONFERENCE_CALL_CONTROLShouldDeserializeToString()
        {
            RequestType test = RequestType.CONFERENCE_CALL_CONTROL;
            string expectedValue = "CONFERENCE_CALL_CONTROL";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestMESSAGE_DELIVERYShouldWork()
        {
            RequestType test = RequestType.MESSAGE_DELIVERY;
            Assert.Equal(typeof(RequestType), test.GetType());
        }

        [Fact]
        public void TestMESSAGE_DELIVERYShouldSerializeToEnum()
        {
            RequestType expectedValue = RequestType.MESSAGE_DELIVERY;
            RequestType calculatedValue = (RequestType)
                Enum.Parse(typeof(RequestType), "MESSAGE_DELIVERY");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestMESSAGE_DELIVERYShouldDeserializeToString()
        {
            RequestType test = RequestType.MESSAGE_DELIVERY;
            string expectedValue = "MESSAGE_DELIVERY";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestMESSAGE_STATUSShouldWork()
        {
            RequestType test = RequestType.MESSAGE_STATUS;
            Assert.Equal(typeof(RequestType), test.GetType());
        }

        [Fact]
        public void TestMESSAGE_STATUSShouldSerializeToEnum()
        {
            RequestType expectedValue = RequestType.MESSAGE_STATUS;
            RequestType calculatedValue = (RequestType)
                Enum.Parse(typeof(RequestType), "MESSAGE_STATUS");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestMESSAGE_STATUSShouldDeserializeToString()
        {
            RequestType test = RequestType.MESSAGE_STATUS;
            string expectedValue = "MESSAGE_STATUS";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }
    }
}
