/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Enums
{
    /// <summary>
    ///  Class for testing SayStandardContentType
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class SayStandardContentTypeTests : IDisposable
    {
        private SayStandardContentType instance;

        public SayStandardContentTypeTests()
        {
            instance = new SayStandardContentType();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SayStandardContentType
        /// </summary>
        [Fact]
        public void SayStandardContentTypeInstanceTest()
        {
            Assert.IsType<SayStandardContentType>(instance);
        }

        [Fact]
        public void TestTEXT_PLAINShouldWork()
        {
            SayStandardContentType test = SayStandardContentType.TEXT_PLAIN;
            Assert.Equal(typeof(SayStandardContentType), test.GetType());
        }

        [Fact]
        public void TestTEXT_PLAINShouldSerializeToEnum()
        {
            SayStandardContentType expectedValue = SayStandardContentType.TEXT_PLAIN;
            SayStandardContentType calculatedValue = (SayStandardContentType)
                Enum.Parse(typeof(SayStandardContentType), "TEXT_PLAIN");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestTEXT_PLAINShouldDeserializeToString()
        {
            SayStandardContentType test = SayStandardContentType.TEXT_PLAIN;
            string expectedValue = "TEXT_PLAIN";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestAPPLICATION_SSML_XMLShouldWork()
        {
            SayStandardContentType test = SayStandardContentType.APPLICATION_SSML_XML;
            Assert.Equal(typeof(SayStandardContentType), test.GetType());
        }

        [Fact]
        public void TestAPPLICATION_SSML_XMLShouldSerializeToEnum()
        {
            SayStandardContentType expectedValue = SayStandardContentType.APPLICATION_SSML_XML;
            SayStandardContentType calculatedValue = (SayStandardContentType)
                Enum.Parse(typeof(SayStandardContentType), "APPLICATION_SSML_XML");
            Assert.Equal(expectedValue, calculatedValue);
        }

        [Fact]
        public void TestAPPLICATION_SSML_XMLShouldDeserializeToString()
        {
            SayStandardContentType test = SayStandardContentType.APPLICATION_SSML_XML;
            string expectedValue = "APPLICATION_SSML_XML";
            string calculatedValue = test.ToString();
            Assert.Equal(expectedValue, calculatedValue);
        }
    }
}
