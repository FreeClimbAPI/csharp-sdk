/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using freeclimb.Api;
using freeclimb.Model;
using freeclimb.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing GetSpeechAllOf
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class GetSpeechAllOfTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for GetSpeechAllOf
        //private GetSpeechAllOf instance;

        public GetSpeechAllOfTests()
        {
            // TODO uncomment below to create an instance of GetSpeechAllOf
            //instance = new GetSpeechAllOf();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GetSpeechAllOf
        /// </summary>
        [Fact]
        public void GetSpeechAllOfInstanceTest()
        {
            // TODO uncomment below to test "IsType" GetSpeechAllOf
            //Assert.IsType<GetSpeechAllOf>(instance);
        }


        /// <summary>
        /// Test the property 'ActionUrl'
        /// </summary>
        [Fact]
        public void ActionUrlTest()
        {
            // TODO unit test for the property 'ActionUrl'
        }
        /// <summary>
        /// Test the property 'GrammarType'
        /// </summary>
        [Fact]
        public void GrammarTypeTest()
        {
            // TODO unit test for the property 'GrammarType'
        }
        /// <summary>
        /// Test the property 'GrammarFile'
        /// </summary>
        [Fact]
        public void GrammarFileTest()
        {
            // TODO unit test for the property 'GrammarFile'
        }
        /// <summary>
        /// Test the property 'GrammarRule'
        /// </summary>
        [Fact]
        public void GrammarRuleTest()
        {
            // TODO unit test for the property 'GrammarRule'
        }
        /// <summary>
        /// Test the property 'PlayBeep'
        /// </summary>
        [Fact]
        public void PlayBeepTest()
        {
            // TODO unit test for the property 'PlayBeep'
        }
        /// <summary>
        /// Test the property 'Prompts'
        /// </summary>
        [Fact]
        public void PromptsTest()
        {
            // TODO unit test for the property 'Prompts'
        }
        /// <summary>
        /// Test the property 'NoInputTimeoutMs'
        /// </summary>
        [Fact]
        public void NoInputTimeoutMsTest()
        {
            // TODO unit test for the property 'NoInputTimeoutMs'
        }
        /// <summary>
        /// Test the property 'RecognitionTimeoutMs'
        /// </summary>
        [Fact]
        public void RecognitionTimeoutMsTest()
        {
            // TODO unit test for the property 'RecognitionTimeoutMs'
        }
        /// <summary>
        /// Test the property 'ConfidenceThreshold'
        /// </summary>
        [Fact]
        public void ConfidenceThresholdTest()
        {
            // TODO unit test for the property 'ConfidenceThreshold'
        }
        /// <summary>
        /// Test the property 'SensitivityLevel'
        /// </summary>
        [Fact]
        public void SensitivityLevelTest()
        {
            // TODO unit test for the property 'SensitivityLevel'
        }
        /// <summary>
        /// Test the property 'SpeechCompleteTimeoutMs'
        /// </summary>
        [Fact]
        public void SpeechCompleteTimeoutMsTest()
        {
            // TODO unit test for the property 'SpeechCompleteTimeoutMs'
        }
        /// <summary>
        /// Test the property 'SpeechIncompleteTimeoutMs'
        /// </summary>
        [Fact]
        public void SpeechIncompleteTimeoutMsTest()
        {
            // TODO unit test for the property 'SpeechIncompleteTimeoutMs'
        }
        /// <summary>
        /// Test the property 'PrivacyMode'
        /// </summary>
        [Fact]
        public void PrivacyModeTest()
        {
            // TODO unit test for the property 'PrivacyMode'
        }

    }

}
