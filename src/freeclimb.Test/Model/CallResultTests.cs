/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing CallResult
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class CallResultTests : IDisposable
    {
        private CallResult instance;

        public CallResultTests()
        {
            instance = new CallResult(
                uri: (string)TestHelpers.getTestValue(typeof(string)),
                dateCreated: (string)TestHelpers.getTestValue(typeof(string)),
                dateUpdated: (string)TestHelpers.getTestValue(typeof(string)),
                revision: (int)TestHelpers.getTestValue(typeof(int)),
                callId: (string)TestHelpers.getTestValue(typeof(string)),
                parentCallId: (string)TestHelpers.getTestValue(typeof(string)),
                accountId: (string)TestHelpers.getTestValue(typeof(string)),
                from: (string)TestHelpers.getTestValue(typeof(string)),
                to: (string)TestHelpers.getTestValue(typeof(string)),
                phoneNumberId: (string)TestHelpers.getTestValue(typeof(string)),
                callStatus: (CallStatus)TestHelpers.getTestValue(typeof(CallStatus)),
                startTime: (string)TestHelpers.getTestValue(typeof(string)),
                connectTime: (string)TestHelpers.getTestValue(typeof(string)),
                endTime: (string)TestHelpers.getTestValue(typeof(string)),
                duration: (int?)TestHelpers.getTestValue(typeof(int?)),
                connectDuration: (int?)TestHelpers.getTestValue(typeof(int?)),
                direction: (CallDirection)TestHelpers.getTestValue(typeof(CallDirection)),
                answeredBy: (AnsweredBy)TestHelpers.getTestValue(typeof(AnsweredBy)),
                subresourceUris: (Object)TestHelpers.getTestValue(typeof(Object)),
                applicationId: (string)TestHelpers.getTestValue(typeof(string))
            );
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CallResult
        /// </summary>
        [Fact]
        public void CallResultInstanceTest()
        {
            Assert.IsType<CallResult>(instance);
        }

        /// <summary>
        /// Test the property 'Uri'
        /// </summary>
        [Fact]
        public void UriTest()
        {
            instance.Uri = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.Uri);
        }

        /// <summary>
        /// Test the property 'DateCreated'
        /// </summary>
        [Fact]
        public void DateCreatedTest()
        {
            instance.DateCreated = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.DateCreated);
        }

        /// <summary>
        /// Test the property 'DateUpdated'
        /// </summary>
        [Fact]
        public void DateUpdatedTest()
        {
            instance.DateUpdated = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.DateUpdated);
        }

        /// <summary>
        /// Test the property 'Revision'
        /// </summary>
        [Fact]
        public void RevisionTest()
        {
            instance.Revision = 1;
            Assert.Equal(1, (int)instance.Revision);
        }

        /// <summary>
        /// Test the property 'CallId'
        /// </summary>
        [Fact]
        public void CallIdTest()
        {
            instance.CallId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.CallId);
        }

        /// <summary>
        /// Test the property 'ParentCallId'
        /// </summary>
        [Fact]
        public void ParentCallIdTest()
        {
            instance.ParentCallId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.ParentCallId);
        }

        /// <summary>
        /// Test the property 'AccountId'
        /// </summary>
        [Fact]
        public void AccountIdTest()
        {
            instance.AccountId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.AccountId);
        }

        /// <summary>
        /// Test the property 'From'
        /// </summary>
        [Fact]
        public void FromTest()
        {
            instance.From = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.From);
        }

        /// <summary>
        /// Test the property 'To'
        /// </summary>
        [Fact]
        public void ToTest()
        {
            instance.To = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.To);
        }

        /// <summary>
        /// Test the property 'PhoneNumberId'
        /// </summary>
        [Fact]
        public void PhoneNumberIdTest()
        {
            instance.PhoneNumberId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.PhoneNumberId);
        }

        /// <summary>
        /// Test the property 'CallStatus'
        /// </summary>
        [Fact]
        public void CallStatusTest()
        {
            instance.CallStatus = CallStatus.QUEUED;
            Assert.Equal(CallStatus.QUEUED, instance.CallStatus);
            instance.CallStatus = CallStatus.RINGING;
            Assert.Equal(CallStatus.RINGING, instance.CallStatus);
            instance.CallStatus = CallStatus.IN_PROGRESS;
            Assert.Equal(CallStatus.IN_PROGRESS, instance.CallStatus);
            instance.CallStatus = CallStatus.CANCELED;
            Assert.Equal(CallStatus.CANCELED, instance.CallStatus);
            instance.CallStatus = CallStatus.COMPLETED;
            Assert.Equal(CallStatus.COMPLETED, instance.CallStatus);
            instance.CallStatus = CallStatus.FAILED;
            Assert.Equal(CallStatus.FAILED, instance.CallStatus);
            instance.CallStatus = CallStatus.BUSY;
            Assert.Equal(CallStatus.BUSY, instance.CallStatus);
            instance.CallStatus = CallStatus.NO_ANSWER;
            Assert.Equal(CallStatus.NO_ANSWER, instance.CallStatus);
        }

        /// <summary>
        /// Test the property 'StartTime'
        /// </summary>
        [Fact]
        public void StartTimeTest()
        {
            instance.StartTime = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.StartTime);
        }

        /// <summary>
        /// Test the property 'ConnectTime'
        /// </summary>
        [Fact]
        public void ConnectTimeTest()
        {
            instance.ConnectTime = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.ConnectTime);
        }

        /// <summary>
        /// Test the property 'EndTime'
        /// </summary>
        [Fact]
        public void EndTimeTest()
        {
            instance.EndTime = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.EndTime);
        }

        /// <summary>
        /// Test the property 'Duration'
        /// </summary>
        [Fact]
        public void DurationTest()
        {
            instance.Duration = 1;
            Assert.Equal(1, (int)instance.Duration);
        }

        /// <summary>
        /// Test the property 'ConnectDuration'
        /// </summary>
        [Fact]
        public void ConnectDurationTest()
        {
            instance.ConnectDuration = 1;
            Assert.Equal(1, (int)instance.ConnectDuration);
        }

        /// <summary>
        /// Test the property 'Direction'
        /// </summary>
        [Fact]
        public void DirectionTest()
        {
            instance.Direction = CallDirection.INBOUND;
            Assert.Equal(CallDirection.INBOUND, instance.Direction);
            instance.Direction = CallDirection.OUTBOUND_API;
            Assert.Equal(CallDirection.OUTBOUND_API, instance.Direction);
            instance.Direction = CallDirection.OUTBOUND_DIAL;
            Assert.Equal(CallDirection.OUTBOUND_DIAL, instance.Direction);
        }

        /// <summary>
        /// Test the property 'AnsweredBy'
        /// </summary>
        [Fact]
        public void AnsweredByTest()
        {
            instance.AnsweredBy = AnsweredBy.HUMAN;
            Assert.Equal(AnsweredBy.HUMAN, instance.AnsweredBy);
            instance.AnsweredBy = AnsweredBy.MACHINE;
            Assert.Equal(AnsweredBy.MACHINE, instance.AnsweredBy);
        }

        /// <summary>
        /// Test the property 'SubresourceUris'
        /// </summary>
        [Fact]
        public void SubresourceUrisTest()
        {
            Object testObject = (Object)TestHelpers.getTestValue(typeof(Object));
            instance.SubresourceUris = testObject;
            Assert.Equal(testObject, instance.SubresourceUris);
        }

        /// <summary>
        /// Test the property 'ApplicationId'
        /// </summary>
        [Fact]
        public void ApplicationIdTest()
        {
            instance.ApplicationId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.ApplicationId);
        }

        /// <summary>
        /// Test serialize a CallResult to JSON string - all values are present
        /// </summary>
        [Fact]
        public void CallResultSerializeToJSONTest()
        {
            string json = instance.ToJson();
            //Console.WriteLine("++CallResult++" );
            //Console.WriteLine(json);

            //Console.WriteLine("does it contain - uri ++ " + json.Contains("uri"));
            Assert.Contains("uri", json);

            //Console.WriteLine("does it contain - dateCreated ++ " + json.Contains("dateCreated"));
            Assert.Contains("dateCreated", json);

            //Console.WriteLine("does it contain - dateUpdated ++ " + json.Contains("dateUpdated"));
            Assert.Contains("dateUpdated", json);

            //Console.WriteLine("does it contain - revision ++ " + json.Contains("revision"));
            Assert.Contains("revision", json);

            //Console.WriteLine("does it contain - callId ++ " + json.Contains("callId"));
            Assert.Contains("callId", json);

            //Console.WriteLine("does it contain - parentCallId ++ " + json.Contains("parentCallId"));
            Assert.Contains("parentCallId", json);

            //Console.WriteLine("does it contain - accountId ++ " + json.Contains("accountId"));
            Assert.Contains("accountId", json);

            //Console.WriteLine("does it contain - from ++ " + json.Contains("from"));
            Assert.Contains("from", json);

            //Console.WriteLine("does it contain - to ++ " + json.Contains("to"));
            Assert.Contains("to", json);

            //Console.WriteLine("does it contain - phoneNumberId ++ " + json.Contains("phoneNumberId"));
            Assert.Contains("phoneNumberId", json);

            //Console.WriteLine("does it contain - callStatus ++ " + json.Contains("callStatus"));
            Assert.Contains("callStatus", json);

            //Console.WriteLine("does it contain - startTime ++ " + json.Contains("startTime"));
            Assert.Contains("startTime", json);

            //Console.WriteLine("does it contain - connectTime ++ " + json.Contains("connectTime"));
            Assert.Contains("connectTime", json);

            //Console.WriteLine("does it contain - endTime ++ " + json.Contains("endTime"));
            Assert.Contains("endTime", json);

            //Console.WriteLine("does it contain - duration ++ " + json.Contains("duration"));
            Assert.Contains("duration", json);

            //Console.WriteLine("does it contain - connectDuration ++ " + json.Contains("connectDuration"));
            Assert.Contains("connectDuration", json);

            //Console.WriteLine("does it contain - direction ++ " + json.Contains("direction"));
            Assert.Contains("direction", json);

            //Console.WriteLine("does it contain - answeredBy ++ " + json.Contains("answeredBy"));
            Assert.Contains("answeredBy", json);

            //Console.WriteLine("does it contain - subresourceUris ++ " + json.Contains("subresourceUris"));
            Assert.Contains("subresourceUris", json);

            //Console.WriteLine("does it contain - applicationId ++ " + json.Contains("applicationId"));
            Assert.Contains("applicationId", json);
        }

        /// <summary>
        /// Test serialize a CallResult to JSON string - null values are stripped
        /// </summary>
        [Fact]
        public void CallResultSerializeToJSONStripNullTest()
        {
            instance.CallId = null;

            instance.ParentCallId = null;

            instance.AccountId = null;

            instance.From = null;

            instance.To = null;

            instance.PhoneNumberId = null;

            instance.CallStatus = null;

            instance.StartTime = null;

            instance.ConnectTime = null;

            instance.EndTime = null;

            instance.Duration = null;

            instance.ConnectDuration = null;

            instance.Direction = null;

            instance.AnsweredBy = null;

            instance.SubresourceUris = null;

            instance.ApplicationId = null;

            string json = instance.ToJson();
            Assert.DoesNotContain("null", json);
        }
    }
}
