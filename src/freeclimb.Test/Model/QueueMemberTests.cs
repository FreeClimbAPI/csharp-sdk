/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */




using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using freeclimb.Api;
using freeclimb.Model;
using freeclimb.Client;
using System.Reflection;
using Newtonsoft.Json;
using System.Globalization;
using freeclimb.Enums;


namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing QueueMember
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class QueueMemberTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for QueueMember
        private QueueMember instance;

        public QueueMemberTests()
        {
            instance = new QueueMember();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of QueueMember
        /// </summary>
        [Fact]
        public void QueueMemberInstanceTest()
        {
            // TODO uncomment below to test "IsType" QueueMember
            Assert.IsType<QueueMember>(instance);
        }


        /// <summary>
        /// Test the property 'Uri'
        /// </summary>
        [Fact]
        public void UriTest()
        {
            instance.Uri = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.Uri);
            
        }
        /// <summary>
        /// Test the property 'CallId'
        /// </summary>
        [Fact]
        public void CallIdTest()
        {
            instance.CallId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.CallId);
            
        }
        /// <summary>
        /// Test the property 'WaitTime'
        /// </summary>
        [Fact]
        public void WaitTimeTest()
        {
            
            instance.WaitTime = 1;
            Assert.Equal(1, (int) instance.WaitTime);
        }
        /// <summary>
        /// Test the property 'Position'
        /// </summary>
        [Fact]
        public void PositionTest()
        {
            
            instance.Position = 1;
            Assert.Equal(1, (int) instance.Position);
        }
        /// <summary>
        /// Test the property 'DateEnqueued'
        /// </summary>
        [Fact]
        public void DateEnqueuedTest()
        {
            instance.DateEnqueued = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.DateEnqueued);
            
        }
        
        
        /// <summary>
        /// Test the method 'equalsTrue'
        /// </summary>
        
        [Fact]
        public void equalsTrueTest() {
        QueueMember test1 = new QueueMember();
         test1.Uri = "TS";
         test1.CallId = "TS";
         test1.WaitTime = 1;
         test1.Position = 1;
         test1.DateEnqueued = "TS";
        QueueMember test2 = new QueueMember();
         test2.Uri = "TS";
         test2.CallId = "TS";
         test2.WaitTime = 1;
         test2.Position = 1;
         test2.DateEnqueued = "TS";

        Assert.Equal(test1,test2);
        }

        /// <summary>
        /// Test the method 'equalsFalse'
        /// </summary>
        
        [Fact]
        public void equalsFalseTest() {
        QueueMember test1 = new QueueMember();
         test1.Uri = "TS";
         test1.CallId = "TS";
         test1.WaitTime = 1;
         test1.Position = 1;
         test1.DateEnqueued = "TS";
        QueueMember test2 = new QueueMember();
         test2.Uri = "ts";
         test2.CallId = "ts";
         test2.WaitTime = 2;
         test2.Position = 2;
         test2.DateEnqueued = "ts";

        Assert.NotEqual(test1,test2);
        }

        /// <summary>
        /// Test the method 'hashCodeType'
        /// </summary>
        
        [Fact]
        public void hashCodeTypeTest() {
        QueueMember test1 = new QueueMember();
         test1.Uri = "TS";
         test1.CallId = "TS";
         test1.WaitTime = 1;
         test1.Position = 1;
         test1.DateEnqueued = "TS";

        int hashCode1 = test1.GetHashCode();
        Assert.True(hashCode1.GetType() == typeof(int));

        }

        /// <summary>
        /// Test the method 'ToStringType'
        /// </summary>
        
        [Fact]
        public void ToStringTypeTest() {
        QueueMember test1 = new QueueMember();
         test1.Uri = "TS";
         test1.CallId = "TS";
         test1.WaitTime = 1;
         test1.Position = 1;
         test1.DateEnqueued = "TS";

        string toString1 = test1.ToString();
        Assert.True(toString1.GetType() == typeof(string));

        }

        /// <summary>
        /// Test the method 'ToStringEquals'
        /// </summary>
        
        [Fact]
        public void ToStringEqualsTest() {
        QueueMember test1 = new QueueMember();
         test1.Uri = "TS";
         test1.CallId = "TS";
         test1.WaitTime = 1;
         test1.Position = 1;
         test1.DateEnqueued = "TS";

        QueueMember test2 = new QueueMember();
         test2.Uri = "TS";
         test2.CallId = "TS";
         test2.WaitTime = 1;
         test2.Position = 1;
         test2.DateEnqueued = "TS";

        string toString1 = test1.ToString();
        string toString2 = test2.ToString();
        Assert.Equal(toString1, toString2);

        }
    }
}
