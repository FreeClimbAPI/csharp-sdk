/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */




using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using freeclimb.Api;
using freeclimb.Model;
using freeclimb.Client;
using System.Reflection;
using Newtonsoft.Json;
using System.Globalization;
using freeclimb.Enums;


namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing MessageResultAllOf
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class MessageResultAllOfTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for MessageResultAllOf
        private MessageResultAllOf instance;

        public MessageResultAllOfTests()
        {
            instance = new MessageResultAllOf();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MessageResultAllOf
        /// </summary>
        [Fact]
        public void MessageResultAllOfInstanceTest()
        {
            // TODO uncomment below to test "IsType" MessageResultAllOf
            Assert.IsType<MessageResultAllOf>(instance);
        }


        /// <summary>
        /// Test the property 'AccountId'
        /// </summary>
        [Fact]
        public void AccountIdTest()
        {
            instance.AccountId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.AccountId);
            
        }
        /// <summary>
        /// Test the property 'MessageId'
        /// </summary>
        [Fact]
        public void MessageIdTest()
        {
            instance.MessageId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.MessageId);
            
        }
        /// <summary>
        /// Test the property 'Status'
        /// </summary>
        [Fact]
        public void StatusTest()
        {
            instance.Status = MessageStatus.NEW;
            Assert.Equal(instance.Status,MessageStatus.NEW);
            instance.Status = MessageStatus.QUEUED;
            Assert.Equal(instance.Status,MessageStatus.QUEUED);
            instance.Status = MessageStatus.REJECTED;
            Assert.Equal(instance.Status,MessageStatus.REJECTED);
            instance.Status = MessageStatus.SENDING;
            Assert.Equal(instance.Status,MessageStatus.SENDING);
            instance.Status = MessageStatus.SENT;
            Assert.Equal(instance.Status,MessageStatus.SENT);
            instance.Status = MessageStatus.FAILED;
            Assert.Equal(instance.Status,MessageStatus.FAILED);
            instance.Status = MessageStatus.RECEIVED;
            Assert.Equal(instance.Status,MessageStatus.RECEIVED);
            instance.Status = MessageStatus.UNDELIVERED;
            Assert.Equal(instance.Status,MessageStatus.UNDELIVERED);
            instance.Status = MessageStatus.EXPIRED;
            Assert.Equal(instance.Status,MessageStatus.EXPIRED);
            instance.Status = MessageStatus.DELETED;
            Assert.Equal(instance.Status,MessageStatus.DELETED);
            instance.Status = MessageStatus.UNKNOWN;
            Assert.Equal(instance.Status,MessageStatus.UNKNOWN);
            
        }
        /// <summary>
        /// Test the property 'From'
        /// </summary>
        [Fact]
        public void FromTest()
        {
            instance.From = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.From);
            
        }
        /// <summary>
        /// Test the property 'To'
        /// </summary>
        [Fact]
        public void ToTest()
        {
            instance.To = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.To);
            
        }
        /// <summary>
        /// Test the property 'Text'
        /// </summary>
        [Fact]
        public void TextTest()
        {
            instance.Text = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.Text);
            
        }
        /// <summary>
        /// Test the property 'Direction'
        /// </summary>
        [Fact]
        public void DirectionTest()
        {
            instance.Direction = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.Direction);
            
        }
        /// <summary>
        /// Test the property 'NotificationUrl'
        /// </summary>
        [Fact]
        public void NotificationUrlTest()
        {
            instance.NotificationUrl = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.NotificationUrl);
            
        }
    }
}
