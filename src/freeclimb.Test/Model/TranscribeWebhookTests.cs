/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing TranscribeWebhook
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class TranscribeWebhookTests : IDisposable
    {
        private TranscribeWebhook instance;

        public TranscribeWebhookTests()
        {
            instance = new TranscribeWebhook(
                requestType: (string)TestHelpers.getTestValue(typeof(string)),
                accountId: (string)TestHelpers.getTestValue(typeof(string)),
                callId: (string)TestHelpers.getTestValue(typeof(string)),
                from: (string)TestHelpers.getTestValue(typeof(string)),
                to: (string)TestHelpers.getTestValue(typeof(string)),
                recordingId: (string)TestHelpers.getTestValue(typeof(string)),
                recordingUrl: (string)TestHelpers.getTestValue(typeof(string)),
                recordingSize: (int)TestHelpers.getTestValue(typeof(int)),
                recordingFormat: (string)TestHelpers.getTestValue(typeof(string)),
                recordingDurationMs: (int)TestHelpers.getTestValue(typeof(int)),
                termReason: (TranscribeTermReason)
                    TestHelpers.getTestValue(typeof(TranscribeTermReason)),
                recordTermReason: (RecordUtteranceTermReason)
                    TestHelpers.getTestValue(typeof(RecordUtteranceTermReason)),
                digit: (string)TestHelpers.getTestValue(typeof(string)),
                privacyForLogging: (bool)TestHelpers.getTestValue(typeof(bool)),
                privacyForRecording: (bool)TestHelpers.getTestValue(typeof(bool)),
                bargeInReason: (BargeInReason)TestHelpers.getTestValue(typeof(BargeInReason)),
                bargedInPromptNo: (int)TestHelpers.getTestValue(typeof(int)),
                bargedInPromptMs: (int)TestHelpers.getTestValue(typeof(int)),
                bargedInPromptLoopNo: (int)TestHelpers.getTestValue(typeof(int)),
                bargeInTimeMs: (int)TestHelpers.getTestValue(typeof(int)),
                transcript: (string)TestHelpers.getTestValue(typeof(string)),
                transcribeReason: (TranscribeReason)
                    TestHelpers.getTestValue(typeof(TranscribeReason)),
                transcriptionDurationMs: (int)TestHelpers.getTestValue(typeof(int))
            );
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TranscribeWebhook
        /// </summary>
        [Fact]
        public void TranscribeWebhookInstanceTest()
        {
            Assert.IsType<TranscribeWebhook>(instance);
        }

        /// <summary>
        /// Test the property 'RequestType'
        /// </summary>
        [Fact]
        public void RequestTypeTest() { }

        /// <summary>
        /// Test the property 'AccountId'
        /// </summary>
        [Fact]
        public void AccountIdTest()
        {
            instance.AccountId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.AccountId);
        }

        /// <summary>
        /// Test the property 'CallId'
        /// </summary>
        [Fact]
        public void CallIdTest()
        {
            instance.CallId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.CallId);
        }

        /// <summary>
        /// Test the property 'From'
        /// </summary>
        [Fact]
        public void FromTest()
        {
            instance.From = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.From);
        }

        /// <summary>
        /// Test the property 'To'
        /// </summary>
        [Fact]
        public void ToTest()
        {
            instance.To = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.To);
        }

        /// <summary>
        /// Test the property 'RecordingId'
        /// </summary>
        [Fact]
        public void RecordingIdTest()
        {
            instance.RecordingId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.RecordingId);
        }

        /// <summary>
        /// Test the property 'RecordingUrl'
        /// </summary>
        [Fact]
        public void RecordingUrlTest()
        {
            instance.RecordingUrl = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.RecordingUrl);
        }

        /// <summary>
        /// Test the property 'RecordingSize'
        /// </summary>
        [Fact]
        public void RecordingSizeTest()
        {
            instance.RecordingSize = 1;
            Assert.Equal(1, (int)instance.RecordingSize);
        }

        /// <summary>
        /// Test the property 'RecordingFormat'
        /// </summary>
        [Fact]
        public void RecordingFormatTest()
        {
            instance.RecordingFormat = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.RecordingFormat);
        }

        /// <summary>
        /// Test the property 'RecordingDurationMs'
        /// </summary>
        [Fact]
        public void RecordingDurationMsTest()
        {
            instance.RecordingDurationMs = 1;
            Assert.Equal(1, (int)instance.RecordingDurationMs);
        }

        /// <summary>
        /// Test the property 'TermReason'
        /// </summary>
        [Fact]
        public void TermReasonTest()
        {
            instance.TermReason = TranscribeTermReason.ERROR;
            Assert.Equal(TranscribeTermReason.ERROR, instance.TermReason);
            instance.TermReason = TranscribeTermReason.COMPLETED;
            Assert.Equal(TranscribeTermReason.COMPLETED, instance.TermReason);
        }

        /// <summary>
        /// Test the property 'RecordTermReason'
        /// </summary>
        [Fact]
        public void RecordTermReasonTest()
        {
            instance.RecordTermReason = RecordUtteranceTermReason.FINISH_KEY;
            Assert.Equal(RecordUtteranceTermReason.FINISH_KEY, instance.RecordTermReason);
            instance.RecordTermReason = RecordUtteranceTermReason.TIMEOUT;
            Assert.Equal(RecordUtteranceTermReason.TIMEOUT, instance.RecordTermReason);
            instance.RecordTermReason = RecordUtteranceTermReason.HANGUP;
            Assert.Equal(RecordUtteranceTermReason.HANGUP, instance.RecordTermReason);
            instance.RecordTermReason = RecordUtteranceTermReason.MAX_LENGTH;
            Assert.Equal(RecordUtteranceTermReason.MAX_LENGTH, instance.RecordTermReason);
        }

        /// <summary>
        /// Test the property 'Digit'
        /// </summary>
        [Fact]
        public void DigitTest()
        {
            instance.Digit = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.Digit);
        }

        /// <summary>
        /// Test the property 'PrivacyForLogging'
        /// </summary>
        [Fact]
        public void PrivacyForLoggingTest()
        {
            instance.PrivacyForLogging = false;
            Assert.False(instance.PrivacyForLogging);
        }

        /// <summary>
        /// Test the property 'PrivacyForRecording'
        /// </summary>
        [Fact]
        public void PrivacyForRecordingTest()
        {
            instance.PrivacyForRecording = false;
            Assert.False(instance.PrivacyForRecording);
        }

        /// <summary>
        /// Test the property 'BargeInReason'
        /// </summary>
        [Fact]
        public void BargeInReasonTest()
        {
            instance.BargeInReason = BargeInReason.NO_BARGE_IN;
            Assert.Equal(BargeInReason.NO_BARGE_IN, instance.BargeInReason);
            instance.BargeInReason = BargeInReason.BARGE_IN_BY_DTMF;
            Assert.Equal(BargeInReason.BARGE_IN_BY_DTMF, instance.BargeInReason);
            instance.BargeInReason = BargeInReason.BARGE_IN_BY_ENERGY;
            Assert.Equal(BargeInReason.BARGE_IN_BY_ENERGY, instance.BargeInReason);
        }

        /// <summary>
        /// Test the property 'BargedInPromptNo'
        /// </summary>
        [Fact]
        public void BargedInPromptNoTest()
        {
            instance.BargedInPromptNo = 1;
            Assert.Equal(1, (int)instance.BargedInPromptNo);
        }

        /// <summary>
        /// Test the property 'BargedInPromptMs'
        /// </summary>
        [Fact]
        public void BargedInPromptMsTest()
        {
            instance.BargedInPromptMs = 1;
            Assert.Equal(1, (int)instance.BargedInPromptMs);
        }

        /// <summary>
        /// Test the property 'BargedInPromptLoopNo'
        /// </summary>
        [Fact]
        public void BargedInPromptLoopNoTest()
        {
            instance.BargedInPromptLoopNo = 1;
            Assert.Equal(1, (int)instance.BargedInPromptLoopNo);
        }

        /// <summary>
        /// Test the property 'BargeInTimeMs'
        /// </summary>
        [Fact]
        public void BargeInTimeMsTest()
        {
            instance.BargeInTimeMs = 1;
            Assert.Equal(1, (int)instance.BargeInTimeMs);
        }

        /// <summary>
        /// Test the property 'Transcript'
        /// </summary>
        [Fact]
        public void TranscriptTest()
        {
            instance.Transcript = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.Transcript);
        }

        /// <summary>
        /// Test the property 'TranscribeReason'
        /// </summary>
        [Fact]
        public void TranscribeReasonTest()
        {
            instance.TranscribeReason = TranscribeReason.INTERNAL_ERROR;
            Assert.Equal(TranscribeReason.INTERNAL_ERROR, instance.TranscribeReason);
            instance.TranscribeReason = TranscribeReason.HANGUP;
            Assert.Equal(TranscribeReason.HANGUP, instance.TranscribeReason);
            instance.TranscribeReason = TranscribeReason.MAX_LENGTH;
            Assert.Equal(TranscribeReason.MAX_LENGTH, instance.TranscribeReason);
            instance.TranscribeReason = TranscribeReason.DIGIT;
            Assert.Equal(TranscribeReason.DIGIT, instance.TranscribeReason);
            instance.TranscribeReason = TranscribeReason.NO_INPUT;
            Assert.Equal(TranscribeReason.NO_INPUT, instance.TranscribeReason);
        }

        /// <summary>
        /// Test the property 'TranscriptionDurationMs'
        /// </summary>
        [Fact]
        public void TranscriptionDurationMsTest()
        {
            instance.TranscriptionDurationMs = 1;
            Assert.Equal(1, (int)instance.TranscriptionDurationMs);
        }

        [Fact]
        public void TestDeserializeJsonToTranscribeWebhook()
        {
            string payload = @"{ ""requestType"": ""transcribe"" }";
            TranscribeWebhook deserialized = TranscribeWebhook.Deserialize(payload);
            Assert.IsType<TranscribeWebhook>(deserialized);
            Assert.Equal("transcribe", deserialized.RequestType);
        }

        /// <summary>
        /// Test serialize a TranscribeWebhook to JSON string - all values are present
        /// </summary>
        [Fact]
        public void TranscribeWebhookSerializeToJSONTest()
        {
            string json = instance.ToJson();

            Assert.Contains("requestType", json);

            Assert.Contains("accountId", json);

            Assert.Contains("callId", json);

            Assert.Contains("from", json);

            Assert.Contains("to", json);

            Assert.Contains("recordingId", json);

            Assert.Contains("recordingUrl", json);

            Assert.Contains("recordingSize", json);

            Assert.Contains("recordingFormat", json);

            Assert.Contains("recordingDurationMs", json);

            Assert.Contains("termReason", json);

            Assert.Contains("recordTermReason", json);

            Assert.Contains("digit", json);

            Assert.Contains("privacyForLogging", json);

            Assert.Contains("privacyForRecording", json);

            Assert.Contains("bargeInReason", json);

            Assert.Contains("bargedInPromptNo", json);

            Assert.Contains("bargedInPromptMs", json);

            Assert.Contains("bargedInPromptLoopNo", json);

            Assert.Contains("bargeInTimeMs", json);

            Assert.Contains("transcript", json);

            Assert.Contains("transcribeReason", json);

            Assert.Contains("transcriptionDurationMs", json);
        }

        /// <summary>
        /// Test serialize a TranscribeWebhook to JSON string - null values are stripped
        /// </summary>
        [Fact]
        public void TranscribeWebhookSerializeToJSONStripNullTest()
        {
            instance.RecordingId = null;

            instance.RecordingUrl = null;

            instance.RecordingFormat = null;

            instance.Digit = null;

            instance.Transcript = null;

            string json = instance.ToJson();
            Assert.DoesNotContain("null", json);
        }
    }
}
