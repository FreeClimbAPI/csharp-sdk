/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */




using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using freeclimb.Api;
using freeclimb.Model;
using freeclimb.Client;
using System.Reflection;
using Newtonsoft.Json;
using System.Globalization;
using freeclimb.Enums;


namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing SendDigits
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class SendDigitsTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for SendDigits
        private SendDigits instance;

        public SendDigitsTests()
        {
            instance = new SendDigits("TEST_STRING", 1, false, "TEST_STRING");
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SendDigits
        /// </summary>
        [Fact]
        public void SendDigitsInstanceTest()
        {
            // TODO uncomment below to test "IsType" SendDigits
            Assert.IsType<SendDigits>(instance);
        }


        /// <summary>
        /// Test the property 'Digits'
        /// </summary>
        [Fact]
        public void DigitsTest()
        {
            instance.Digits = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.Digits);
            
        }
        /// <summary>
        /// Test the property 'PauseMs'
        /// </summary>
        [Fact]
        public void PauseMsTest()
        {
            
            instance.PauseMs = 1;
            Assert.Equal(1, (int) instance.PauseMs);
        }
        /// <summary>
        /// Test the property 'PrivacyMode'
        /// </summary>
        [Fact]
        public void PrivacyModeTest()
        {
            instance.PrivacyMode = false;
            Assert.Equal(false, instance.PrivacyMode);       
            
        }
        
        
        /// <summary>
        /// Test the method 'equalsTrue'
        /// </summary>
        
        [Fact]
        public void equalsTrueTest() {
        SendDigits test1 = new SendDigits("TEST_STRING", 1, false, "TEST_STRING");
         test1.Digits = "TS";
         test1.PauseMs = 1;
         test1.PrivacyMode = true;
        SendDigits test2 = new SendDigits("TEST_STRING", 1, false, "TEST_STRING");
         test2.Digits = "TS";
         test2.PauseMs = 1;
         test2.PrivacyMode = true;

        Assert.Equal(test1,test2);
        }

        /// <summary>
        /// Test the method 'equalsFalse'
        /// </summary>
        
        [Fact]
        public void equalsFalseTest() {
        SendDigits test1 = new SendDigits("TEST_STRING", 1, false, "TEST_STRING");
         test1.Digits = "TS";
         test1.PauseMs = 1;
         test1.PrivacyMode = true;
        SendDigits test2 = new SendDigits("TEST_STRING", 1, false, "TEST_STRING");
         test2.Digits = "ts";
         test2.PauseMs = 2;
         test2.PrivacyMode = false;

        Assert.NotEqual(test1,test2);
        }

        /// <summary>
        /// Test the method 'hashCodeType'
        /// </summary>
        
        [Fact]
        public void hashCodeTypeTest() {
        SendDigits test1 = new SendDigits("TEST_STRING", 1, false, "TEST_STRING");
         test1.Digits = "TS";
         test1.PauseMs = 1;
         test1.PrivacyMode = true;

        int hashCode1 = test1.GetHashCode();
        Assert.True(hashCode1.GetType() == typeof(int));

        }

        /// <summary>
        /// Test the method 'ToStringType'
        /// </summary>
        
        [Fact]
        public void ToStringTypeTest() {
        SendDigits test1 = new SendDigits("TEST_STRING", 1, false, "TEST_STRING");
         test1.Digits = "TS";
         test1.PauseMs = 1;
         test1.PrivacyMode = true;

        string toString1 = test1.ToString();
        Assert.True(toString1.GetType() == typeof(string));

        }

        /// <summary>
        /// Test the method 'ToStringEquals'
        /// </summary>
        
        [Fact]
        public void ToStringEqualsTest() {
        SendDigits test1 = new SendDigits("TEST_STRING", 1, false, "TEST_STRING");
         test1.Digits = "TS";
         test1.PauseMs = 1;
         test1.PrivacyMode = true;

        SendDigits test2 = new SendDigits("TEST_STRING", 1, false, "TEST_STRING");
         test2.Digits = "TS";
         test2.PauseMs = 1;
         test2.PrivacyMode = true;

        string toString1 = test1.ToString();
        string toString2 = test2.ToString();
        Assert.Equal(toString1, toString2);

        }
    }
}
