/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */




using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using System.Text;
using freeclimb.Api;
using freeclimb.Model;
using freeclimb.Client;
using System.Reflection;
using Newtonsoft.Json;
using System.Globalization;
using freeclimb.Enums;


namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing PerclCommand
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class PerclCommandTests
    {
        private PerclCommand instance;

        public PerclCommandTests()
        {
            instance = new PerclCommand("TEST_STRING");
        }

        /// <summary>
        /// Test an instance of PerclCommand
        /// </summary>
        [Fact]
        public void PerclCommandInstanceTest()
        {
            Assert.IsType<PerclCommand>(instance);
        }

        /// <summary>
        /// Test deserialize a TranscribeUtterance from type PerclCommand
        /// </summary>
        [Fact]
        public void TranscribeUtteranceDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new TranscribeUtterance().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Reject from type PerclCommand
        /// </summary>
        [Fact]
        public void RejectDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new Reject().ToJson()));
        }
        /// <summary>
        /// Test deserialize a RemoveFromConference from type PerclCommand
        /// </summary>
        [Fact]
        public void RemoveFromConferenceDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new RemoveFromConference().ToJson()));
        }
        /// <summary>
        /// Test deserialize a TerminateConference from type PerclCommand
        /// </summary>
        [Fact]
        public void TerminateConferenceDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new TerminateConference().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Park from type PerclCommand
        /// </summary>
        [Fact]
        public void ParkDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new Park().ToJson()));
        }
        /// <summary>
        /// Test deserialize a SendDigits from type PerclCommand
        /// </summary>
        [Fact]
        public void SendDigitsDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new SendDigits().ToJson()));
        }
        /// <summary>
        /// Test deserialize a AddToConference from type PerclCommand
        /// </summary>
        [Fact]
        public void AddToConferenceDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new AddToConference().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Sms from type PerclCommand
        /// </summary>
        [Fact]
        public void SmsDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new Sms().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Pause from type PerclCommand
        /// </summary>
        [Fact]
        public void PauseDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new Pause().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Redirect from type PerclCommand
        /// </summary>
        [Fact]
        public void RedirectDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new Redirect().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Unpark from type PerclCommand
        /// </summary>
        [Fact]
        public void UnparkDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new Unpark().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Play from type PerclCommand
        /// </summary>
        [Fact]
        public void PlayDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new Play().ToJson()));
        }
        /// <summary>
        /// Test deserialize a SetTalk from type PerclCommand
        /// </summary>
        [Fact]
        public void SetTalkDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new SetTalk().ToJson()));
        }
        /// <summary>
        /// Test deserialize a OutDial from type PerclCommand
        /// </summary>
        [Fact]
        public void OutDialDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new OutDial().ToJson()));
        }
        /// <summary>
        /// Test deserialize a GetSpeech from type PerclCommand
        /// </summary>
        [Fact]
        public void GetSpeechDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new GetSpeech().ToJson()));
        }
        /// <summary>
        /// Test deserialize a GetDigits from type PerclCommand
        /// </summary>
        [Fact]
        public void GetDigitsDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new GetDigits().ToJson()));
        }
        /// <summary>
        /// Test deserialize a CreateConference from type PerclCommand
        /// </summary>
        [Fact]
        public void CreateConferenceDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new CreateConference().ToJson()));
        }
        /// <summary>
        /// Test deserialize a StartRecordCall from type PerclCommand
        /// </summary>
        [Fact]
        public void StartRecordCallDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new StartRecordCall().ToJson()));
        }
        /// <summary>
        /// Test deserialize a SetListen from type PerclCommand
        /// </summary>
        [Fact]
        public void SetListenDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new SetListen().ToJson()));
        }
        /// <summary>
        /// Test deserialize a PlayEarlyMedia from type PerclCommand
        /// </summary>
        [Fact]
        public void PlayEarlyMediaDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new PlayEarlyMedia().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Hangup from type PerclCommand
        /// </summary>
        [Fact]
        public void HangupDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new Hangup().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Say from type PerclCommand
        /// </summary>
        [Fact]
        public void SayDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new Say().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Enqueue from type PerclCommand
        /// </summary>
        [Fact]
        public void EnqueueDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new Enqueue().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Dequeue from type PerclCommand
        /// </summary>
        [Fact]
        public void DequeueDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new Dequeue().ToJson()));
        }
        /// <summary>
        /// Test deserialize a RecordUtterance from type PerclCommand
        /// </summary>
        [Fact]
        public void RecordUtteranceDeserializeFromPerclCommandTest()
        {
            Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new RecordUtterance().ToJson()));
        }

        /// <summary>
        /// Test the property 'Command'
        /// </summary>
        [Fact]
        public void CommandTest()
        {
            
        }
        
        
        /// <summary>
        /// Test the method 'equalsTrue'
        /// </summary>
        
        [Fact]
        public void equalsTrueTest() {
        PerclCommand test1 = new PerclCommand("TEST_STRING");
         test1.Command = "TS";

        PerclCommand test2 = new PerclCommand("TEST_STRING");
         test2.Command = "TS";

        Assert.Equal(test1,test2);
        }

        /// <summary>
        /// Test the method 'equalsFalse'
        /// </summary>
        
        [Fact]
        public void equalsFalseTest() {
        PerclCommand test1 = new PerclCommand("TEST_STRING");
         test1.Command = "TS";

        PerclCommand test2 = new PerclCommand("TEST_STRING");
         test2.Command = "ts";

        Assert.NotEqual(test1,test2);
        }

        /// <summary>
        /// Test the method 'hashCodeType'
        /// </summary>
        
        [Fact]
        public void hashCodeTypeTest() {
        PerclCommand test1 = new PerclCommand("TEST_STRING");
         test1.Command = "TS";

        int hashCode1 = test1.GetHashCode();
        Assert.True(hashCode1.GetType() == typeof(int));

        }

        /// <summary>
        /// Test the method 'ToStringType'
        /// </summary>
        
        [Fact]
        public void ToStringTypeTest() {
        PerclCommand test1 = new PerclCommand("TEST_STRING");
         test1.Command = "TS";

        string toString1 = test1.ToString();
        Assert.True(toString1.GetType() == typeof(string));

        }

        /// <summary>
        /// Test the method 'ToStringEquals'
        /// </summary>
        
        [Fact]
        public void ToStringEqualsTest() {
        PerclCommand test1 = new PerclCommand("TEST_STRING");
         test1.Command = "TS";

        PerclCommand test2 = new PerclCommand("TEST_STRING");
         test2.Command = "TS";

        string toString1 = test1.ToString();
        string toString2 = test2.ToString();
        Assert.Equal(toString1, toString2);

        }

        /// <summary>
        /// Test the method 'equals'
        /// </summary>
        
        [Fact]
        public void equalsTest() {
        PerclCommand test1 = new PerclCommand("TEST_STRING");
         test1.Command = "TS";

        PerclCommand test2 = new PerclCommand("TEST_STRING");
         test2.Command = "TS";

        Assert.True(test1.Equals(test2));
        }

        /// <summary>
        /// Test the method 'ToJson'
        /// </summary>
        
        [Fact]
        public void ToJsonTest() {
        PerclCommand test1 = new PerclCommand("TEST_STRING");
         test1.Command = "TS";
         string jsonStr = JsonConvert.SerializeObject(test1, Newtonsoft.Json.Formatting.Indented);

        PerclCommand test2 = new PerclCommand("TEST_STRING");
         test2.Command = "TS";

        Assert.True(jsonStr.Equals(test2.ToJson()));
        }
    }
}
