/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using freeclimb.Api;
using freeclimb.Model;
using freeclimb.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing PerclCommand
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class PerclCommandTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for PerclCommand
        //private PerclCommand instance;

        public PerclCommandTests()
        {
            // TODO uncomment below to create an instance of PerclCommand
            //instance = new PerclCommand();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PerclCommand
        /// </summary>
        [Fact]
        public void PerclCommandInstanceTest()
        {
            // TODO uncomment below to test "IsType" PerclCommand
            //Assert.IsType<PerclCommand>(instance);
        }

        /// <summary>
        /// Test deserialize a Reject from type PerclCommand
        /// </summary>
        [Fact]
        public void RejectDeserializeFromPerclCommandTest()
        {
            // TODO uncomment below to test deserialize a Reject from type PerclCommand
            //Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new Reject().ToJson()));
        }
        /// <summary>
        /// Test deserialize a RemoveFromConference from type PerclCommand
        /// </summary>
        [Fact]
        public void RemoveFromConferenceDeserializeFromPerclCommandTest()
        {
            // TODO uncomment below to test deserialize a RemoveFromConference from type PerclCommand
            //Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new RemoveFromConference().ToJson()));
        }
        /// <summary>
        /// Test deserialize a TerminateConference from type PerclCommand
        /// </summary>
        [Fact]
        public void TerminateConferenceDeserializeFromPerclCommandTest()
        {
            // TODO uncomment below to test deserialize a TerminateConference from type PerclCommand
            //Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new TerminateConference().ToJson()));
        }
        /// <summary>
        /// Test deserialize a SendDigits from type PerclCommand
        /// </summary>
        [Fact]
        public void SendDigitsDeserializeFromPerclCommandTest()
        {
            // TODO uncomment below to test deserialize a SendDigits from type PerclCommand
            //Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new SendDigits().ToJson()));
        }
        /// <summary>
        /// Test deserialize a AddToConference from type PerclCommand
        /// </summary>
        [Fact]
        public void AddToConferenceDeserializeFromPerclCommandTest()
        {
            // TODO uncomment below to test deserialize a AddToConference from type PerclCommand
            //Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new AddToConference().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Sms from type PerclCommand
        /// </summary>
        [Fact]
        public void SmsDeserializeFromPerclCommandTest()
        {
            // TODO uncomment below to test deserialize a Sms from type PerclCommand
            //Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new Sms().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Pause from type PerclCommand
        /// </summary>
        [Fact]
        public void PauseDeserializeFromPerclCommandTest()
        {
            // TODO uncomment below to test deserialize a Pause from type PerclCommand
            //Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new Pause().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Redirect from type PerclCommand
        /// </summary>
        [Fact]
        public void RedirectDeserializeFromPerclCommandTest()
        {
            // TODO uncomment below to test deserialize a Redirect from type PerclCommand
            //Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new Redirect().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Play from type PerclCommand
        /// </summary>
        [Fact]
        public void PlayDeserializeFromPerclCommandTest()
        {
            // TODO uncomment below to test deserialize a Play from type PerclCommand
            //Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new Play().ToJson()));
        }
        /// <summary>
        /// Test deserialize a SetTalk from type PerclCommand
        /// </summary>
        [Fact]
        public void SetTalkDeserializeFromPerclCommandTest()
        {
            // TODO uncomment below to test deserialize a SetTalk from type PerclCommand
            //Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new SetTalk().ToJson()));
        }
        /// <summary>
        /// Test deserialize a OutDial from type PerclCommand
        /// </summary>
        [Fact]
        public void OutDialDeserializeFromPerclCommandTest()
        {
            // TODO uncomment below to test deserialize a OutDial from type PerclCommand
            //Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new OutDial().ToJson()));
        }
        /// <summary>
        /// Test deserialize a GetSpeech from type PerclCommand
        /// </summary>
        [Fact]
        public void GetSpeechDeserializeFromPerclCommandTest()
        {
            // TODO uncomment below to test deserialize a GetSpeech from type PerclCommand
            //Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new GetSpeech().ToJson()));
        }
        /// <summary>
        /// Test deserialize a GetDigits from type PerclCommand
        /// </summary>
        [Fact]
        public void GetDigitsDeserializeFromPerclCommandTest()
        {
            // TODO uncomment below to test deserialize a GetDigits from type PerclCommand
            //Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new GetDigits().ToJson()));
        }
        /// <summary>
        /// Test deserialize a CreateConference from type PerclCommand
        /// </summary>
        [Fact]
        public void CreateConferenceDeserializeFromPerclCommandTest()
        {
            // TODO uncomment below to test deserialize a CreateConference from type PerclCommand
            //Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new CreateConference().ToJson()));
        }
        /// <summary>
        /// Test deserialize a StartRecordCall from type PerclCommand
        /// </summary>
        [Fact]
        public void StartRecordCallDeserializeFromPerclCommandTest()
        {
            // TODO uncomment below to test deserialize a StartRecordCall from type PerclCommand
            //Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new StartRecordCall().ToJson()));
        }
        /// <summary>
        /// Test deserialize a SetListen from type PerclCommand
        /// </summary>
        [Fact]
        public void SetListenDeserializeFromPerclCommandTest()
        {
            // TODO uncomment below to test deserialize a SetListen from type PerclCommand
            //Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new SetListen().ToJson()));
        }
        /// <summary>
        /// Test deserialize a PlayEarlyMedia from type PerclCommand
        /// </summary>
        [Fact]
        public void PlayEarlyMediaDeserializeFromPerclCommandTest()
        {
            // TODO uncomment below to test deserialize a PlayEarlyMedia from type PerclCommand
            //Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new PlayEarlyMedia().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Hangup from type PerclCommand
        /// </summary>
        [Fact]
        public void HangupDeserializeFromPerclCommandTest()
        {
            // TODO uncomment below to test deserialize a Hangup from type PerclCommand
            //Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new Hangup().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Say from type PerclCommand
        /// </summary>
        [Fact]
        public void SayDeserializeFromPerclCommandTest()
        {
            // TODO uncomment below to test deserialize a Say from type PerclCommand
            //Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new Say().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Enqueue from type PerclCommand
        /// </summary>
        [Fact]
        public void EnqueueDeserializeFromPerclCommandTest()
        {
            // TODO uncomment below to test deserialize a Enqueue from type PerclCommand
            //Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new Enqueue().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Dequeue from type PerclCommand
        /// </summary>
        [Fact]
        public void DequeueDeserializeFromPerclCommandTest()
        {
            // TODO uncomment below to test deserialize a Dequeue from type PerclCommand
            //Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new Dequeue().ToJson()));
        }
        /// <summary>
        /// Test deserialize a RecordUtterance from type PerclCommand
        /// </summary>
        [Fact]
        public void RecordUtteranceDeserializeFromPerclCommandTest()
        {
            // TODO uncomment below to test deserialize a RecordUtterance from type PerclCommand
            //Assert.IsType<PerclCommand>(JsonConvert.DeserializeObject<PerclCommand>(new RecordUtterance().ToJson()));
        }

        /// <summary>
        /// Test the property 'Command'
        /// </summary>
        [Fact]
        public void CommandTest()
        {
            // TODO unit test for the property 'Command'
        }

    }

}
