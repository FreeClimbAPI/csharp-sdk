/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */




using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using freeclimb.Api;
using freeclimb.Model;
using freeclimb.Client;
using System.Reflection;
using Newtonsoft.Json;
using System.Globalization;
using freeclimb.Enums;


namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing SMSTenDLCPartnerCampaignBrand
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class SMSTenDLCPartnerCampaignBrandTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for SMSTenDLCPartnerCampaignBrand
        private SMSTenDLCPartnerCampaignBrand instance;

        public SMSTenDLCPartnerCampaignBrandTests()
        {
            string jsonData = @"
            {
                ""accountId"":""TEST_STRING"",
                ""entityType"":""PRIVATE_PROFIT"",
                ""cspId"": ""TEST_STRING"",
                ""brandId"": ""TEST_STRING"",
                ""universalEin"": ""TEST_STRING"",
                ""brandRelationship"":""BASIC_ACCOUNT"",
                ""identityStatus"":""SELF_DECLARED"",
                ""displayName"":""TEST_STRING"",
                ""phone"":""TEST_STRING"",
                ""country"":""TEST_STRING"",
                ""email"":""TEST_STRING"",
                ""vertical"":""TEST_STRING"",
                ""mock"":""false"",
            }
            ";
            instance = JsonConvert.DeserializeObject<SMSTenDLCPartnerCampaignBrand>(jsonData);
        }
        

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SMSTenDLCPartnerCampaignBrand
        /// </summary>
        [Fact]
        public void SMSTenDLCPartnerCampaignBrandInstanceTest()
        {
            // TODO uncomment below to test "IsType" SMSTenDLCPartnerCampaignBrand
            Assert.IsType<SMSTenDLCPartnerCampaignBrand>(instance);
        }


        /// <summary>
        /// Test the property 'AccountId'
        /// </summary>
        [Fact]
        public void AccountIdTest()
        {
            instance.AccountId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.AccountId);
            
        }
        /// <summary>
        /// Test the property 'BrandId'
        /// </summary>
        [Fact]
        public void BrandIdTest()
        {

            Assert.Equal("TEST_STRING", instance.BrandId);
            
        }
        /// <summary>
        /// Test the property 'FirstName'
        /// </summary>
        [Fact]
        public void FirstNameTest()
        {
            instance.FirstName = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.FirstName);
            
        }
        /// <summary>
        /// Test the property 'LastName'
        /// </summary>
        [Fact]
        public void LastNameTest()
        {
            instance.LastName = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.LastName);
            
        }
        /// <summary>
        /// Test the property 'DisplayName'
        /// </summary>
        [Fact]
        public void DisplayNameTest()
        {
            instance.DisplayName = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.DisplayName);
            
        }
        /// <summary>
        /// Test the property 'CompanyName'
        /// </summary>
        [Fact]
        public void CompanyNameTest()
        {
            instance.CompanyName = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.CompanyName);
            
        }
        /// <summary>
        /// Test the property 'Phone'
        /// </summary>
        [Fact]
        public void PhoneTest()
        {
            instance.Phone = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.Phone);
            
        }
        /// <summary>
        /// Test the property 'Email'
        /// </summary>
        [Fact]
        public void EmailTest()
        {
            instance.Email = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.Email);
            
        }
        /// <summary>
        /// Test the property 'Website'
        /// </summary>
        [Fact]
        public void WebsiteTest()
        {
            instance.Website = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.Website);
            
        }
        /// <summary>
        /// Test the property 'OptionalAttributes'
        /// </summary>
        [Fact]
        public void OptionalAttributesTest()
        {
            
            Dictionary<string, Object> testDictionary = new Dictionary<string, object>();
            instance.OptionalAttributes = testDictionary;
            Assert.Equal(testDictionary, instance.OptionalAttributes); 
        }
        /// <summary>
        /// Test the property 'EvpVettingScore'
        /// </summary>
        [Fact]
        public void EvpVettingScoreTest()
        {
            
            instance.EvpVettingScore = 1;
            Assert.Equal(1, (int) instance.EvpVettingScore);
        }
    }
}
