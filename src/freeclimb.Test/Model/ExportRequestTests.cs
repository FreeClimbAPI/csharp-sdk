/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing ExportRequest
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class ExportRequestTests : IDisposable
    {
        private ExportRequest instance;

        public ExportRequestTests()
        {
            instance = new ExportRequest(
                resourceType: (ExportResourceType)
                    TestHelpers.getTestValue(typeof(ExportResourceType)),
                format: (List<string>)TestHelpers.getTestValue(typeof(List<string>)),
                output: (ExportRequestOutput)TestHelpers.getTestValue(typeof(ExportRequestOutput)),
                query: (Object)TestHelpers.getTestValue(typeof(Object))
            );
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ExportRequest
        /// </summary>
        [Fact]
        public void ExportRequestInstanceTest()
        {
            Assert.IsType<ExportRequest>(instance);
        }

        /// <summary>
        /// Test the property 'ResourceType'
        /// </summary>
        [Fact]
        public void ResourceTypeTest()
        {
            instance.ResourceType = ExportResourceType.MESSAGES;
            Assert.Equal(ExportResourceType.MESSAGES, instance.ResourceType);
            instance.ResourceType = ExportResourceType.CALLS;
            Assert.Equal(ExportResourceType.CALLS, instance.ResourceType);
        }

        /// <summary>
        /// Test the property 'Format'
        /// </summary>
        [Fact]
        public void FormatTest()
        {
            List<string> testList = new List<string>();
            instance.Format = testList;
            Assert.Equal(instance.Format, testList);
        }

        /// <summary>
        /// Test the property 'Output'
        /// </summary>
        [Fact]
        public void OutputTest()
        {
            ExportRequestOutput testObject = (ExportRequestOutput)
                TestHelpers.getTestValue(typeof(ExportRequestOutput));
            instance.Output = testObject;
            Assert.Equal(testObject, instance.Output);
        }

        /// <summary>
        /// Test the property 'Query'
        /// </summary>
        [Fact]
        public void QueryTest()
        {
            Object testObject = (Object)TestHelpers.getTestValue(typeof(Object));
            instance.Query = testObject;
            Assert.Equal(testObject, instance.Query);
        }

        /// <summary>
        /// Test serialize a ExportRequest to JSON string - all values are present
        /// </summary>
        [Fact]
        public void ExportRequestSerializeToJSONTest()
        {
            string json = instance.ToJson();

            Assert.Contains("resourceType", json);

            Assert.Contains("format", json);

            Assert.Contains("output", json);

            Assert.Contains("query", json);
        }

        /// <summary>
        /// Test serialize a ExportRequest to JSON string - null values are stripped
        /// </summary>
        [Fact]
        public void ExportRequestSerializeToJSONStripNullTest()
        {
            string json = instance.ToJson();
            Assert.DoesNotContain("null", json);
        }
    }
}
