/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing BlobResult
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class BlobResultTests : IDisposable
    {
        private BlobResult instance;

        public BlobResultTests()
        {
            instance = new BlobResult(
                blobId: (string)TestHelpers.getTestValue(typeof(string)),
                accountId: (string)TestHelpers.getTestValue(typeof(string)),
                alias: (string)TestHelpers.getTestValue(typeof(string)),
                revision: (int)TestHelpers.getTestValue(typeof(int)),
                dateCreated: (DateTime)TestHelpers.getTestValue(typeof(DateTime)),
                dateUpdated: (DateTime)TestHelpers.getTestValue(typeof(DateTime)),
                expiresAt: (DateTime)TestHelpers.getTestValue(typeof(DateTime)),
                blob: (Object)TestHelpers.getTestValue(typeof(Object))
            );
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BlobResult
        /// </summary>
        [Fact]
        public void BlobResultInstanceTest()
        {
            Assert.IsType<BlobResult>(instance);
        }

        /// <summary>
        /// Test the property 'BlobId'
        /// </summary>
        [Fact]
        public void BlobIdTest()
        {
            instance.BlobId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.BlobId);
        }

        /// <summary>
        /// Test the property 'AccountId'
        /// </summary>
        [Fact]
        public void AccountIdTest()
        {
            instance.AccountId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.AccountId);
        }

        /// <summary>
        /// Test the property 'Alias'
        /// </summary>
        [Fact]
        public void AliasTest()
        {
            instance.Alias = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.Alias);
        }

        /// <summary>
        /// Test the property 'Revision'
        /// </summary>
        [Fact]
        public void RevisionTest()
        {
            instance.Revision = 1;
            Assert.Equal(1, (int)instance.Revision);
        }

        /// <summary>
        /// Test the property 'DateCreated'
        /// </summary>
        [Fact]
        public void DateCreatedTest()
        {
            instance.DateCreated = DateTime.Parse("2022-07-05T15:17:05+00:00");
            Assert.Equal(DateTime.Parse("2022-07-05T15:17:05+00:00"), instance.DateCreated);
        }

        /// <summary>
        /// Test the property 'DateUpdated'
        /// </summary>
        [Fact]
        public void DateUpdatedTest()
        {
            instance.DateUpdated = DateTime.Parse("2022-07-05T15:17:05+00:00");
            Assert.Equal(DateTime.Parse("2022-07-05T15:17:05+00:00"), instance.DateUpdated);
        }

        /// <summary>
        /// Test the property 'ExpiresAt'
        /// </summary>
        [Fact]
        public void ExpiresAtTest()
        {
            instance.ExpiresAt = DateTime.Parse("2022-07-05T15:17:05+00:00");
            Assert.Equal(DateTime.Parse("2022-07-05T15:17:05+00:00"), instance.ExpiresAt);
        }

        /// <summary>
        /// Test the property 'Blob'
        /// </summary>
        [Fact]
        public void BlobTest()
        {
            Object testObject = (Object)TestHelpers.getTestValue(typeof(Object));
            instance.Blob = testObject;
            Assert.Equal(testObject, instance.Blob);
        }

        /// <summary>
        /// Test serialize a BlobResult to JSON string - all values are present
        /// </summary>
        [Fact]
        public void BlobResultSerializeToJSONTest()
        {
            string json = instance.ToJson();

            Assert.Contains("blobId", json);

            Assert.Contains("accountId", json);

            Assert.Contains("alias", json);

            Assert.Contains("revision", json);

            Assert.Contains("dateCreated", json);

            Assert.Contains("dateUpdated", json);

            Assert.Contains("expiresAt", json);

            Assert.Contains("blob", json);
        }

        /// <summary>
        /// Test serialize a BlobResult to JSON string - null values are stripped
        /// </summary>
        [Fact]
        public void BlobResultSerializeToJSONStripNullTest()
        {
            string json = instance.ToJson();
            Assert.DoesNotContain("null", json);
        }
    }
}
