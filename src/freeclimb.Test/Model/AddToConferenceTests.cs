/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing AddToConference
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class AddToConferenceTests : IDisposable
    {
        private AddToConference instance;

        public AddToConferenceTests()
        {
            instance = new AddToConference(
                allowCallControl: (bool)TestHelpers.getTestValue(typeof(bool)),
                callControlSequence: (string)TestHelpers.getTestValue(typeof(string)),
                callControlUrl: (string)TestHelpers.getTestValue(typeof(string)),
                conferenceId: (string)TestHelpers.getTestValue(typeof(string)),
                leaveConferenceUrl: (string)TestHelpers.getTestValue(typeof(string)),
                listen: (bool)TestHelpers.getTestValue(typeof(bool)),
                notificationUrl: (string)TestHelpers.getTestValue(typeof(string)),
                startConfOnEnter: (bool)TestHelpers.getTestValue(typeof(bool)),
                talk: (bool)TestHelpers.getTestValue(typeof(bool)),
                dtmfPassThrough: (bool)TestHelpers.getTestValue(typeof(bool))
            );
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AddToConference
        /// </summary>
        [Fact]
        public void AddToConferenceInstanceTest()
        {
            Assert.IsType<AddToConference>(instance);
        }

        /// <summary>
        /// Test the property 'AllowCallControl'
        /// </summary>
        [Fact]
        public void AllowCallControlTest()
        {
            instance.AllowCallControl = false;
            Assert.False(instance.AllowCallControl);
        }

        /// <summary>
        /// Test the property 'CallControlSequence'
        /// </summary>
        [Fact]
        public void CallControlSequenceTest()
        {
            instance.CallControlSequence = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.CallControlSequence);
        }

        /// <summary>
        /// Test the property 'CallControlUrl'
        /// </summary>
        [Fact]
        public void CallControlUrlTest()
        {
            instance.CallControlUrl = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.CallControlUrl);
        }

        /// <summary>
        /// Test the property 'ConferenceId'
        /// </summary>
        [Fact]
        public void ConferenceIdTest()
        {
            instance.ConferenceId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.ConferenceId);
        }

        /// <summary>
        /// Test the property 'LeaveConferenceUrl'
        /// </summary>
        [Fact]
        public void LeaveConferenceUrlTest()
        {
            instance.LeaveConferenceUrl = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.LeaveConferenceUrl);
        }

        /// <summary>
        /// Test the property 'Listen'
        /// </summary>
        [Fact]
        public void ListenTest()
        {
            instance.Listen = false;
            Assert.False(instance.Listen);
        }

        /// <summary>
        /// Test the property 'NotificationUrl'
        /// </summary>
        [Fact]
        public void NotificationUrlTest()
        {
            instance.NotificationUrl = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.NotificationUrl);
        }

        /// <summary>
        /// Test the property 'StartConfOnEnter'
        /// </summary>
        [Fact]
        public void StartConfOnEnterTest()
        {
            instance.StartConfOnEnter = false;
            Assert.False(instance.StartConfOnEnter);
        }

        /// <summary>
        /// Test the property 'Talk'
        /// </summary>
        [Fact]
        public void TalkTest()
        {
            instance.Talk = false;
            Assert.False(instance.Talk);
        }

        /// <summary>
        /// Test the property 'DtmfPassThrough'
        /// </summary>
        [Fact]
        public void DtmfPassThroughTest()
        {
            instance.DtmfPassThrough = false;
            Assert.False(instance.DtmfPassThrough);
        }

        /// <summary>
        /// Test serialize a AddToConference to JSON string - all values are present
        /// </summary>
        [Fact]
        public void AddToConferenceSerializeToJSONTest()
        {
            string json = instance.ToJson();
            //Console.WriteLine("++AddToConference++" );
            //Console.WriteLine(json);

            //Console.WriteLine("does it contain - allowCallControl ++ " + json.Contains("allowCallControl"));
            Assert.Contains("allowCallControl", json);

            //Console.WriteLine("does it contain - callControlSequence ++ " + json.Contains("callControlSequence"));
            Assert.Contains("callControlSequence", json);

            //Console.WriteLine("does it contain - callControlUrl ++ " + json.Contains("callControlUrl"));
            Assert.Contains("callControlUrl", json);

            //Console.WriteLine("does it contain - conferenceId ++ " + json.Contains("conferenceId"));
            Assert.Contains("conferenceId", json);

            //Console.WriteLine("does it contain - leaveConferenceUrl ++ " + json.Contains("leaveConferenceUrl"));
            Assert.Contains("leaveConferenceUrl", json);

            //Console.WriteLine("does it contain - listen ++ " + json.Contains("listen"));
            Assert.Contains("listen", json);

            //Console.WriteLine("does it contain - notificationUrl ++ " + json.Contains("notificationUrl"));
            Assert.Contains("notificationUrl", json);

            //Console.WriteLine("does it contain - startConfOnEnter ++ " + json.Contains("startConfOnEnter"));
            Assert.Contains("startConfOnEnter", json);

            //Console.WriteLine("does it contain - talk ++ " + json.Contains("talk"));
            Assert.Contains("talk", json);

            //Console.WriteLine("does it contain - dtmfPassThrough ++ " + json.Contains("dtmfPassThrough"));
            Assert.Contains("dtmfPassThrough", json);
        }

        /// <summary>
        /// Test serialize a AddToConference to JSON string - null values are stripped
        /// </summary>
        [Fact]
        public void AddToConferenceSerializeToJSONStripNullTest()
        {
            string json = instance.ToJson();
            Assert.DoesNotContain("null", json);
        }
    }
}
