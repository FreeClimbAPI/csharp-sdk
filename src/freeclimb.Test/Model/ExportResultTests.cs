/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing ExportResult
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class ExportResultTests : IDisposable
    {
        private ExportResult instance;

        public ExportResultTests()
        {
            instance = new ExportResult(
                accountId: (string)TestHelpers.getTestValue(typeof(string)),
                uri: (string)TestHelpers.getTestValue(typeof(string)),
                dateCreated: (string)TestHelpers.getTestValue(typeof(string)),
                dateUpdated: (string)TestHelpers.getTestValue(typeof(string)),
                revision: (int)TestHelpers.getTestValue(typeof(int)),
                exportId: (string)TestHelpers.getTestValue(typeof(string)),
                status: (ExportStatus)TestHelpers.getTestValue(typeof(ExportStatus)),
                size: (int)TestHelpers.getTestValue(typeof(int)),
                resourceType: (ExportResourceType)
                    TestHelpers.getTestValue(typeof(ExportResourceType)),
                query: (Object)TestHelpers.getTestValue(typeof(Object)),
                format: (List<string>)TestHelpers.getTestValue(typeof(List<string>)),
                output: (ExportResultOutput)TestHelpers.getTestValue(typeof(ExportResultOutput))
            );
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ExportResult
        /// </summary>
        [Fact]
        public void ExportResultInstanceTest()
        {
            Assert.IsType<ExportResult>(instance);
        }

        /// <summary>
        /// Test the property 'AccountId'
        /// </summary>
        [Fact]
        public void AccountIdTest()
        {
            instance.AccountId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.AccountId);
        }

        /// <summary>
        /// Test the property 'Uri'
        /// </summary>
        [Fact]
        public void UriTest()
        {
            instance.Uri = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.Uri);
        }

        /// <summary>
        /// Test the property 'DateCreated'
        /// </summary>
        [Fact]
        public void DateCreatedTest()
        {
            instance.DateCreated = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.DateCreated);
        }

        /// <summary>
        /// Test the property 'DateUpdated'
        /// </summary>
        [Fact]
        public void DateUpdatedTest()
        {
            instance.DateUpdated = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.DateUpdated);
        }

        /// <summary>
        /// Test the property 'Revision'
        /// </summary>
        [Fact]
        public void RevisionTest()
        {
            instance.Revision = 1;
            Assert.Equal(1, (int)instance.Revision);
        }

        /// <summary>
        /// Test the property 'ExportId'
        /// </summary>
        [Fact]
        public void ExportIdTest()
        {
            instance.ExportId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.ExportId);
        }

        /// <summary>
        /// Test the property 'Status'
        /// </summary>
        [Fact]
        public void StatusTest()
        {
            instance.Status = ExportStatus.INTAKING;
            Assert.Equal(ExportStatus.INTAKING, instance.Status);
            instance.Status = ExportStatus.QUEUED;
            Assert.Equal(ExportStatus.QUEUED, instance.Status);
            instance.Status = ExportStatus.IN_PROGRESS;
            Assert.Equal(ExportStatus.IN_PROGRESS, instance.Status);
            instance.Status = ExportStatus.COMPLETED;
            Assert.Equal(ExportStatus.COMPLETED, instance.Status);
            instance.Status = ExportStatus.FAILED;
            Assert.Equal(ExportStatus.FAILED, instance.Status);
            instance.Status = ExportStatus.DELETED;
            Assert.Equal(ExportStatus.DELETED, instance.Status);
        }

        /// <summary>
        /// Test the property 'Size'
        /// </summary>
        [Fact]
        public void SizeTest()
        {
            instance.Size = 1;
            Assert.Equal(1, (int)instance.Size);
        }

        /// <summary>
        /// Test the property 'ResourceType'
        /// </summary>
        [Fact]
        public void ResourceTypeTest()
        {
            instance.ResourceType = ExportResourceType.MESSAGES;
            Assert.Equal(ExportResourceType.MESSAGES, instance.ResourceType);
            instance.ResourceType = ExportResourceType.CALLS;
            Assert.Equal(ExportResourceType.CALLS, instance.ResourceType);
        }

        /// <summary>
        /// Test the property 'Query'
        /// </summary>
        [Fact]
        public void QueryTest()
        {
            Object testObject = (Object)TestHelpers.getTestValue(typeof(Object));
            instance.Query = testObject;
            Assert.Equal(testObject, instance.Query);
        }

        /// <summary>
        /// Test the property 'Format'
        /// </summary>
        [Fact]
        public void FormatTest()
        {
            List<string> testList = new List<string>();
            instance.Format = testList;
            Assert.Equal(instance.Format, testList);
        }

        /// <summary>
        /// Test the property 'Output'
        /// </summary>
        [Fact]
        public void OutputTest()
        {
            ExportResultOutput testObject = (ExportResultOutput)
                TestHelpers.getTestValue(typeof(ExportResultOutput));
            instance.Output = testObject;
            Assert.Equal(testObject, instance.Output);
        }

        /// <summary>
        /// Test serialize a ExportResult to JSON string - all values are present
        /// </summary>
        [Fact]
        public void ExportResultSerializeToJSONTest()
        {
            string json = instance.ToJson();

            Assert.Contains("accountId", json);

            Assert.Contains("uri", json);

            Assert.Contains("dateCreated", json);

            Assert.Contains("dateUpdated", json);

            Assert.Contains("revision", json);

            Assert.Contains("exportId", json);

            Assert.Contains("status", json);

            Assert.Contains("size", json);

            Assert.Contains("resourceType", json);

            Assert.Contains("query", json);

            Assert.Contains("format", json);

            Assert.Contains("output", json);
        }

        /// <summary>
        /// Test serialize a ExportResult to JSON string - null values are stripped
        /// </summary>
        [Fact]
        public void ExportResultSerializeToJSONStripNullTest()
        {
            string json = instance.ToJson();
            Assert.DoesNotContain("null", json);
        }
    }
}
