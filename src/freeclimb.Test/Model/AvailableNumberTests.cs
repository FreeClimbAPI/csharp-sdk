/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing AvailableNumber
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class AvailableNumberTests : IDisposable
    {
        private AvailableNumber instance;

        public AvailableNumberTests()
        {
            instance = new AvailableNumber(
                capabilities: (Capabilities)TestHelpers.getTestValue(typeof(Capabilities)),
                campaignId: (string)TestHelpers.getTestValue(typeof(string)),
                phoneNumber: (string)TestHelpers.getTestValue(typeof(string)),
                voiceEnabled: (bool?)TestHelpers.getTestValue(typeof(bool?)),
                smsEnabled: (bool?)TestHelpers.getTestValue(typeof(bool?)),
                region: (string)TestHelpers.getTestValue(typeof(string)),
                country: (string)TestHelpers.getTestValue(typeof(string))
            );
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AvailableNumber
        /// </summary>
        [Fact]
        public void AvailableNumberInstanceTest()
        {
            Assert.IsType<AvailableNumber>(instance);
        }

        /// <summary>
        /// Test the property 'Capabilities'
        /// </summary>
        [Fact]
        public void CapabilitiesTest()
        {
            Capabilities testObject = (Capabilities)TestHelpers.getTestValue(typeof(Capabilities));
            instance.Capabilities = testObject;
            Assert.Equal(testObject, instance.Capabilities);
        }

        /// <summary>
        /// Test the property 'CampaignId'
        /// </summary>
        [Fact]
        public void CampaignIdTest()
        {
            instance.CampaignId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.CampaignId);
        }

        /// <summary>
        /// Test the property 'PhoneNumber'
        /// </summary>
        [Fact]
        public void PhoneNumberTest()
        {
            instance.PhoneNumber = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.PhoneNumber);
        }

        /// <summary>
        /// Test the property 'VoiceEnabled'
        /// </summary>
        [Fact]
        public void VoiceEnabledTest()
        {
            instance.VoiceEnabled = false;
            Assert.False(instance.VoiceEnabled);
        }

        /// <summary>
        /// Test the property 'SmsEnabled'
        /// </summary>
        [Fact]
        public void SmsEnabledTest()
        {
            instance.SmsEnabled = false;
            Assert.False(instance.SmsEnabled);
        }

        /// <summary>
        /// Test the property 'Region'
        /// </summary>
        [Fact]
        public void RegionTest()
        {
            instance.Region = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.Region);
        }

        /// <summary>
        /// Test the property 'Country'
        /// </summary>
        [Fact]
        public void CountryTest()
        {
            instance.Country = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.Country);
        }

        /// <summary>
        /// Test serialize a AvailableNumber to JSON string - all values are present
        /// </summary>
        [Fact]
        public void AvailableNumberSerializeToJSONTest()
        {
            string json = instance.ToJson();
            //Console.WriteLine("++AvailableNumber++" );
            //Console.WriteLine(json);

            //Console.WriteLine("does it contain - capabilities ++ " + json.Contains("capabilities"));
            Assert.Contains("capabilities", json);

            //Console.WriteLine("does it contain - campaignId ++ " + json.Contains("campaignId"));
            Assert.Contains("campaignId", json);

            //Console.WriteLine("does it contain - phoneNumber ++ " + json.Contains("phoneNumber"));
            Assert.Contains("phoneNumber", json);

            //Console.WriteLine("does it contain - voiceEnabled ++ " + json.Contains("voiceEnabled"));
            Assert.Contains("voiceEnabled", json);

            //Console.WriteLine("does it contain - smsEnabled ++ " + json.Contains("smsEnabled"));
            Assert.Contains("smsEnabled", json);

            //Console.WriteLine("does it contain - region ++ " + json.Contains("region"));
            Assert.Contains("region", json);

            //Console.WriteLine("does it contain - country ++ " + json.Contains("country"));
            Assert.Contains("country", json);
        }

        /// <summary>
        /// Test serialize a AvailableNumber to JSON string - null values are stripped
        /// </summary>
        [Fact]
        public void AvailableNumberSerializeToJSONStripNullTest()
        {
            instance.CampaignId = null;

            instance.PhoneNumber = null;

            instance.VoiceEnabled = null;

            instance.SmsEnabled = null;

            instance.Region = null;

            instance.Country = null;

            string json = instance.ToJson();
            Assert.DoesNotContain("null", json);
        }
    }
}
