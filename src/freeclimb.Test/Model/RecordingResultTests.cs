/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing RecordingResult
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class RecordingResultTests : IDisposable
    {
        private RecordingResult instance;

        public RecordingResultTests()
        {
            instance = new RecordingResult(
                uri: (string)TestHelpers.getTestValue(typeof(string)),
                dateCreated: (string)TestHelpers.getTestValue(typeof(string)),
                dateUpdated: (string)TestHelpers.getTestValue(typeof(string)),
                revision: (int)TestHelpers.getTestValue(typeof(int)),
                recordingId: (string)TestHelpers.getTestValue(typeof(string)),
                accountId: (string)TestHelpers.getTestValue(typeof(string)),
                callId: (string)TestHelpers.getTestValue(typeof(string)),
                durationSec: (int?)TestHelpers.getTestValue(typeof(int?)),
                conferenceId: (string)TestHelpers.getTestValue(typeof(string))
            );
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of RecordingResult
        /// </summary>
        [Fact]
        public void RecordingResultInstanceTest()
        {
            Assert.IsType<RecordingResult>(instance);
        }

        /// <summary>
        /// Test the property 'Uri'
        /// </summary>
        [Fact]
        public void UriTest()
        {
            instance.Uri = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.Uri);
        }

        /// <summary>
        /// Test the property 'DateCreated'
        /// </summary>
        [Fact]
        public void DateCreatedTest()
        {
            instance.DateCreated = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.DateCreated);
        }

        /// <summary>
        /// Test the property 'DateUpdated'
        /// </summary>
        [Fact]
        public void DateUpdatedTest()
        {
            instance.DateUpdated = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.DateUpdated);
        }

        /// <summary>
        /// Test the property 'Revision'
        /// </summary>
        [Fact]
        public void RevisionTest()
        {
            instance.Revision = 1;
            Assert.Equal(1, (int)instance.Revision);
        }

        /// <summary>
        /// Test the property 'RecordingId'
        /// </summary>
        [Fact]
        public void RecordingIdTest()
        {
            instance.RecordingId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.RecordingId);
        }

        /// <summary>
        /// Test the property 'AccountId'
        /// </summary>
        [Fact]
        public void AccountIdTest()
        {
            instance.AccountId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.AccountId);
        }

        /// <summary>
        /// Test the property 'CallId'
        /// </summary>
        [Fact]
        public void CallIdTest()
        {
            instance.CallId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.CallId);
        }

        /// <summary>
        /// Test the property 'DurationSec'
        /// </summary>
        [Fact]
        public void DurationSecTest()
        {
            instance.DurationSec = 1;
            Assert.Equal(1, (int)instance.DurationSec);
        }

        /// <summary>
        /// Test the property 'ConferenceId'
        /// </summary>
        [Fact]
        public void ConferenceIdTest()
        {
            instance.ConferenceId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.ConferenceId);
        }

        /// <summary>
        /// Test serialize a RecordingResult to JSON string - all values are present
        /// </summary>
        [Fact]
        public void RecordingResultSerializeToJSONTest()
        {
            string json = instance.ToJson();
            //Console.WriteLine("++RecordingResult++" );
            //Console.WriteLine(json);

            //Console.WriteLine("does it contain - uri ++ " + json.Contains("uri"));
            Assert.Contains("uri", json);

            //Console.WriteLine("does it contain - dateCreated ++ " + json.Contains("dateCreated"));
            Assert.Contains("dateCreated", json);

            //Console.WriteLine("does it contain - dateUpdated ++ " + json.Contains("dateUpdated"));
            Assert.Contains("dateUpdated", json);

            //Console.WriteLine("does it contain - revision ++ " + json.Contains("revision"));
            Assert.Contains("revision", json);

            //Console.WriteLine("does it contain - recordingId ++ " + json.Contains("recordingId"));
            Assert.Contains("recordingId", json);

            //Console.WriteLine("does it contain - accountId ++ " + json.Contains("accountId"));
            Assert.Contains("accountId", json);

            //Console.WriteLine("does it contain - callId ++ " + json.Contains("callId"));
            Assert.Contains("callId", json);

            //Console.WriteLine("does it contain - durationSec ++ " + json.Contains("durationSec"));
            Assert.Contains("durationSec", json);

            //Console.WriteLine("does it contain - conferenceId ++ " + json.Contains("conferenceId"));
            Assert.Contains("conferenceId", json);
        }

        /// <summary>
        /// Test serialize a RecordingResult to JSON string - null values are stripped
        /// </summary>
        [Fact]
        public void RecordingResultSerializeToJSONStripNullTest()
        {
            instance.RecordingId = null;

            instance.AccountId = null;

            instance.CallId = null;

            instance.DurationSec = null;

            instance.ConferenceId = null;

            string json = instance.ToJson();
            Assert.DoesNotContain("null", json);
        }
    }
}
