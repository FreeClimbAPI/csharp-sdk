/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */




using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using System.Text;
using freeclimb.Api;
using freeclimb.Model;
using freeclimb.Client;
using System.Reflection;
using Newtonsoft.Json;
using System.Globalization;
using freeclimb.Enums;


namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing Capabilities
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class CapabilitiesTests
    {
        private Capabilities instance;

        public CapabilitiesTests()
        {
            
            instance = new Capabilities(false, false, false, false, false);
            
        }

        /// <summary>
        /// Test an instance of Capabilities
        /// </summary>
        [Fact]
        public void CapabilitiesInstanceTest()
        {
            Assert.IsType<Capabilities>(instance);
        }


        /// <summary>
        /// Test the property 'Voice'
        /// </summary>
        [Fact]
        public void VoiceTest()
        {
            instance.Voice = false;
            Assert.Equal(false, instance.Voice);       
            
        }
        /// <summary>
        /// Test the property 'Sms'
        /// </summary>
        [Fact]
        public void SmsTest()
        {
            instance.Sms = false;
            Assert.Equal(false, instance.Sms);       
            
        }
        /// <summary>
        /// Test the property 'TollFree'
        /// </summary>
        [Fact]
        public void TollFreeTest()
        {
            instance.TollFree = false;
            Assert.Equal(false, instance.TollFree);       
            
        }
        /// <summary>
        /// Test the property 'TenDLC'
        /// </summary>
        [Fact]
        public void TenDLCTest()
        {
            instance.TenDLC = false;
            Assert.Equal(false, instance.TenDLC);       
            
        }
        /// <summary>
        /// Test the property 'ShortCode'
        /// </summary>
        [Fact]
        public void ShortCodeTest()
        {
            instance.ShortCode = false;
            Assert.Equal(false, instance.ShortCode);       
            
        }
        
        
        /// <summary>
        /// Test the method 'equalsTrue'
        /// </summary>
        
        [Fact]
        public void equalsTrueTest() {
        Capabilities test1 = new Capabilities(false, false, false, false, false);
         test1.Voice = true;
         test1.Sms = true;
         test1.TollFree = true;
         test1.TenDLC = true;
         test1.ShortCode = true;

        Capabilities test2 = new Capabilities(false, false, false, false, false);
         test2.Voice = true;
         test2.Sms = true;
         test2.TollFree = true;
         test2.TenDLC = true;
         test2.ShortCode = true;

        Assert.Equal(test1,test2);
        }

        /// <summary>
        /// Test the method 'equalsFalse'
        /// </summary>
        
        [Fact]
        public void equalsFalseTest() {
        Capabilities test1 = new Capabilities(false, false, false, false, false);
         test1.Voice = true;
         test1.Sms = true;
         test1.TollFree = true;
         test1.TenDLC = true;
         test1.ShortCode = true;

        Capabilities test2 = new Capabilities(false, false, false, false, false);
         test2.Voice = false;
         test2.Sms = false;
         test2.TollFree = false;
         test2.TenDLC = false;
         test2.ShortCode = false;

        Assert.NotEqual(test1,test2);
        }

        /// <summary>
        /// Test the method 'hashCodeType'
        /// </summary>
        
        [Fact]
        public void hashCodeTypeTest() {
        Capabilities test1 = new Capabilities(false, false, false, false, false);
         test1.Voice = true;
         test1.Sms = true;
         test1.TollFree = true;
         test1.TenDLC = true;
         test1.ShortCode = true;

        int hashCode1 = test1.GetHashCode();
        Assert.True(hashCode1.GetType() == typeof(int));

        }

        /// <summary>
        /// Test the method 'ToStringType'
        /// </summary>
        
        [Fact]
        public void ToStringTypeTest() {
        Capabilities test1 = new Capabilities(false, false, false, false, false);
         test1.Voice = true;
         test1.Sms = true;
         test1.TollFree = true;
         test1.TenDLC = true;
         test1.ShortCode = true;

        string toString1 = test1.ToString();
        Assert.True(toString1.GetType() == typeof(string));

        }

        /// <summary>
        /// Test the method 'ToStringEquals'
        /// </summary>
        
        [Fact]
        public void ToStringEqualsTest() {
        Capabilities test1 = new Capabilities(false, false, false, false, false);
         test1.Voice = true;
         test1.Sms = true;
         test1.TollFree = true;
         test1.TenDLC = true;
         test1.ShortCode = true;

        Capabilities test2 = new Capabilities(false, false, false, false, false);
         test2.Voice = true;
         test2.Sms = true;
         test2.TollFree = true;
         test2.TenDLC = true;
         test2.ShortCode = true;

        string toString1 = test1.ToString();
        string toString2 = test2.ToString();
        Assert.Equal(toString1, toString2);

        }

        /// <summary>
        /// Test the method 'equals'
        /// </summary>
        
        [Fact]
        public void equalsTest() {
        Capabilities test1 = new Capabilities(false, false, false, false, false);
         test1.Voice = true;
         test1.Sms = true;
         test1.TollFree = true;
         test1.TenDLC = true;
         test1.ShortCode = true;

        Capabilities test2 = new Capabilities(false, false, false, false, false);
         test2.Voice = true;
         test2.Sms = true;
         test2.TollFree = true;
         test2.TenDLC = true;
         test2.ShortCode = true;

        Assert.True(test1.Equals(test2));
        }

        /// <summary>
        /// Test the method 'ToJson'
        /// </summary>
        
        [Fact]
        public void ToJsonTest() {
        Capabilities test1 = new Capabilities(false, false, false, false, false);
         test1.Voice = true;
         test1.Sms = true;
         test1.TollFree = true;
         test1.TenDLC = true;
         test1.ShortCode = true;
        JsonSerializer jsonSerializer = JsonSerializer.Create();
        jsonSerializer.NullValueHandling = NullValueHandling.Ignore;
        StringBuilder strb = new StringBuilder();
        jsonSerializer.Serialize(new StringWriter(strb), test1);

        Capabilities test2 = new Capabilities(false, false, false, false, false);
         test2.Voice = true;
         test2.Sms = true;
         test2.TollFree = true;
         test2.TenDLC = true;
         test2.ShortCode = true;

        Assert.True(strb.Equals(JsonConvert.SerializeObject(test2)));
        }
    }
}
