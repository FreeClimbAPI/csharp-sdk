/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */




using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using freeclimb.Api;
using freeclimb.Model;
using freeclimb.Client;
using System.Reflection;
using Newtonsoft.Json;


namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing MessageResult
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class MessageResultTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for MessageResult
        private MessageResult instance;

        public MessageResultTests()
        {
            instance = new MessageResult();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MessageResult
        /// </summary>
        [Fact]
        public void MessageResultInstanceTest()
        {
            // TODO uncomment below to test "IsType" MessageResult
            Assert.IsType<MessageResult>(instance);
        }


        /// <summary>
        /// Test the property 'Uri'
        /// </summary>
        [Fact]
        public void UriTest()
        {
            instance.Uri = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.Uri);
            
        }
        /// <summary>
        /// Test the property 'DateCreated'
        /// </summary>
        [Fact]
        public void DateCreatedTest()
        {
            instance.DateCreated = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.DateCreated);
            
        }
        /// <summary>
        /// Test the property 'DateUpdated'
        /// </summary>
        [Fact]
        public void DateUpdatedTest()
        {
            instance.DateUpdated = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.DateUpdated);
            
        }
        /// <summary>
        /// Test the property 'Revision'
        /// </summary>
        [Fact]
        public void RevisionTest()
        {
            
            instance.Revision = 1;
            Assert.Equal(1, (int) instance.Revision);
        }
        /// <summary>
        /// Test the property 'AccountId'
        /// </summary>
        [Fact]
        public void AccountIdTest()
        {
            instance.AccountId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.AccountId);
            
        }
        /// <summary>
        /// Test the property 'MessageId'
        /// </summary>
        [Fact]
        public void MessageIdTest()
        {
            instance.MessageId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.MessageId);
            
        }
        /// <summary>
        /// Test the property 'Status'
        /// </summary>
        [Fact]
        public void StatusTest()
        {
            //model.setStatus(MessageStatus.NEW);
            //Assert.assertEquals(model.getStatus(),MessageStatus.NEW);
            //model.setStatus(MessageStatus.QUEUED);
            //Assert.assertEquals(model.getStatus(),MessageStatus.QUEUED);
            //model.setStatus(MessageStatus.REJECTED);
            //Assert.assertEquals(model.getStatus(),MessageStatus.REJECTED);
            //model.setStatus(MessageStatus.SENDING);
            //Assert.assertEquals(model.getStatus(),MessageStatus.SENDING);
            //model.setStatus(MessageStatus.SENT);
            //Assert.assertEquals(model.getStatus(),MessageStatus.SENT);
            //model.setStatus(MessageStatus.FAILED);
            //Assert.assertEquals(model.getStatus(),MessageStatus.FAILED);
            //model.setStatus(MessageStatus.RECEIVED);
            //Assert.assertEquals(model.getStatus(),MessageStatus.RECEIVED);
            //model.setStatus(MessageStatus.UNDELIVERED);
            //Assert.assertEquals(model.getStatus(),MessageStatus.UNDELIVERED);
            //model.setStatus(MessageStatus.EXPIRED);
            //Assert.assertEquals(model.getStatus(),MessageStatus.EXPIRED);
            //model.setStatus(MessageStatus.DELETED);
            //Assert.assertEquals(model.getStatus(),MessageStatus.DELETED);
            //model.setStatus(MessageStatus.UNKNOWN);
            //Assert.assertEquals(model.getStatus(),MessageStatus.UNKNOWN);
            
            //model.setStatus(MessageResult.MessageStatus.NEW);
            //Assert.assertEquals(model.getStatus(),MessageResult.MessageStatus.NEW);
            
            //model.setStatus(MessageResult.MessageStatus.QUEUED);
            //Assert.assertEquals(model.getStatus(),MessageResult.MessageStatus.QUEUED);
            
            //model.setStatus(MessageResult.MessageStatus.REJECTED);
            //Assert.assertEquals(model.getStatus(),MessageResult.MessageStatus.REJECTED);
            
            //model.setStatus(MessageResult.MessageStatus.SENDING);
            //Assert.assertEquals(model.getStatus(),MessageResult.MessageStatus.SENDING);
            
            //model.setStatus(MessageResult.MessageStatus.SENT);
            //Assert.assertEquals(model.getStatus(),MessageResult.MessageStatus.SENT);
            
            //model.setStatus(MessageResult.MessageStatus.FAILED);
            //Assert.assertEquals(model.getStatus(),MessageResult.MessageStatus.FAILED);
            
            //model.setStatus(MessageResult.MessageStatus.RECEIVED);
            //Assert.assertEquals(model.getStatus(),MessageResult.MessageStatus.RECEIVED);
            
            //model.setStatus(MessageResult.MessageStatus.UNDELIVERED);
            //Assert.assertEquals(model.getStatus(),MessageResult.MessageStatus.UNDELIVERED);
            
            //model.setStatus(MessageResult.MessageStatus.EXPIRED);
            //Assert.assertEquals(model.getStatus(),MessageResult.MessageStatus.EXPIRED);
            
            //model.setStatus(MessageResult.MessageStatus.DELETED);
            //Assert.assertEquals(model.getStatus(),MessageResult.MessageStatus.DELETED);
            
            //model.setStatus(MessageResult.MessageStatus.UNKNOWN);
            //Assert.assertEquals(model.getStatus(),MessageResult.MessageStatus.UNKNOWN);
            
        }
        /// <summary>
        /// Test the property 'From'
        /// </summary>
        [Fact]
        public void FromTest()
        {
            instance.From = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.From);
            
        }
        /// <summary>
        /// Test the property 'To'
        /// </summary>
        [Fact]
        public void ToTest()
        {
            instance.To = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.To);
            
        }
        /// <summary>
        /// Test the property 'Text'
        /// </summary>
        [Fact]
        public void TextTest()
        {
            instance.Text = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.Text);
            
        }
        /// <summary>
        /// Test the property 'Direction'
        /// </summary>
        [Fact]
        public void DirectionTest()
        {
            instance.Direction = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.Direction);
            
        }
        /// <summary>
        /// Test the property 'NotificationUrl'
        /// </summary>
        [Fact]
        public void NotificationUrlTest()
        {
            instance.NotificationUrl = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.NotificationUrl);
            
        }
    }
}
