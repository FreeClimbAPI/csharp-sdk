/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */




using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using freeclimb.Api;
using freeclimb.Model;
using freeclimb.Client;
using System.Reflection;
using Newtonsoft.Json;
using System.Globalization;
using freeclimb.Enums;


namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing LogResult
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class LogResultTests
    {
        private LogResult instance;

        public LogResultTests()
        {
            instance = new LogResult();
        }

        /// <summary>
        /// Test an instance of LogResult
        /// </summary>
        [Fact]
        public void LogResultInstanceTest()
        {
            Assert.IsType<LogResult>(instance);
        }


        /// <summary>
        /// Test the property 'Timestamp'
        /// </summary>
        [Fact]
        public void TimestampTest()
        {
            
            instance.Timestamp = 1;
            Assert.Equal(1, (int) instance.Timestamp);
        }
        /// <summary>
        /// Test the property 'Level'
        /// </summary>
        [Fact]
        public void LevelTest()
        {
            instance.Level = LogLevel.INFO;
            Assert.Equal(instance.Level,LogLevel.INFO);
            instance.Level = LogLevel.WARNING;
            Assert.Equal(instance.Level,LogLevel.WARNING);
            instance.Level = LogLevel.ERROR;
            Assert.Equal(instance.Level,LogLevel.ERROR);
            
        }
        /// <summary>
        /// Test the property 'RequestId'
        /// </summary>
        [Fact]
        public void RequestIdTest()
        {
            instance.RequestId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.RequestId);
            
        }
        /// <summary>
        /// Test the property 'AccountId'
        /// </summary>
        [Fact]
        public void AccountIdTest()
        {
            instance.AccountId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.AccountId);
            
        }
        /// <summary>
        /// Test the property 'CallId'
        /// </summary>
        [Fact]
        public void CallIdTest()
        {
            instance.CallId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.CallId);
            
        }
        /// <summary>
        /// Test the property 'Message'
        /// </summary>
        [Fact]
        public void MessageTest()
        {
            instance.Message = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.Message);
            
        }
        /// <summary>
        /// Test the property 'Metadata'
        /// </summary>
        [Fact]
        public void MetadataTest()
        {
            object testObject = new object();
            instance.Metadata = testObject;
            Assert.Equal(testObject, instance.Metadata);
            
        }
        
        
        /// <summary>
        /// Test the method 'equalsTrue'
        /// </summary>
        
        [Fact]
        public void equalsTrueTest() {
        LogResult test1 = new LogResult();
         test1.Timestamp = 1;
         test1.Level = LogLevel.INFO;
         test1.Level = LogLevel.INFO;
         test1.Level = LogLevel.INFO;
         test1.RequestId = "TS";
         test1.AccountId = "TS";
         test1.CallId = "TS";
         test1.Message = "TS";
         object testObject = new object();
         test1.Metadata = testObject;

        LogResult test2 = new LogResult();
         test2.Timestamp = 1;
         test2.Level = LogLevel.INFO;
         test2.Level = LogLevel.INFO;
         test2.Level = LogLevel.INFO;
         test2.RequestId = "TS";
         test2.AccountId = "TS";
         test2.CallId = "TS";
         test2.Message = "TS";
         object testObject2 = testObject;
         test2.Metadata = testObject2;

        Assert.Equal(test1,test2);
        }

        /// <summary>
        /// Test the method 'equalsFalse'
        /// </summary>
        
        [Fact]
        public void equalsFalseTest() {
        LogResult test1 = new LogResult();
         test1.Timestamp = 1;
         test1.Level = LogLevel.INFO;
         test1.Level = LogLevel.INFO;
         test1.Level = LogLevel.INFO;
         test1.RequestId = "TS";
         test1.AccountId = "TS";
         test1.CallId = "TS";
         test1.Message = "TS";
         object testObject = new object();
         test1.Metadata = testObject;

        LogResult test2 = new LogResult();
         test2.Timestamp = 2;
         test2.Level = LogLevel.WARNING;
         test2.Level = LogLevel.WARNING;
         test2.Level = LogLevel.WARNING;
         test2.RequestId = "ts";
         test2.AccountId = "ts";
         test2.CallId = "ts";
         test2.Message = "ts";
         object testObject2 = new object();
         test2.Metadata = testObject2;

        Assert.NotEqual(test1,test2);
        }

        /// <summary>
        /// Test the method 'hashCodeType'
        /// </summary>
        
        [Fact]
        public void hashCodeTypeTest() {
        LogResult test1 = new LogResult();
         test1.Timestamp = 1;
         test1.Level = LogLevel.INFO;
         test1.Level = LogLevel.INFO;
         test1.Level = LogLevel.INFO;
         test1.RequestId = "TS";
         test1.AccountId = "TS";
         test1.CallId = "TS";
         test1.Message = "TS";
         object testObject = new object();
         test1.Metadata = testObject;

        int hashCode1 = test1.GetHashCode();
        Assert.True(hashCode1.GetType() == typeof(int));

        }

        /// <summary>
        /// Test the method 'ToStringType'
        /// </summary>
        
        [Fact]
        public void ToStringTypeTest() {
        LogResult test1 = new LogResult();
         test1.Timestamp = 1;
         test1.Level = LogLevel.INFO;
         test1.Level = LogLevel.INFO;
         test1.Level = LogLevel.INFO;
         test1.RequestId = "TS";
         test1.AccountId = "TS";
         test1.CallId = "TS";
         test1.Message = "TS";
         object testObject = new object();
         test1.Metadata = testObject;

        string toString1 = test1.ToString();
        Assert.True(toString1.GetType() == typeof(string));

        }

        /// <summary>
        /// Test the method 'ToStringEquals'
        /// </summary>
        
        [Fact]
        public void ToStringEqualsTest() {
        LogResult test1 = new LogResult();
         test1.Timestamp = 1;
         test1.Level = LogLevel.INFO;
         test1.Level = LogLevel.INFO;
         test1.Level = LogLevel.INFO;
         test1.RequestId = "TS";
         test1.AccountId = "TS";
         test1.CallId = "TS";
         test1.Message = "TS";
         object testObject = new object();
         test1.Metadata = testObject;

        LogResult test2 = new LogResult();
         test2.Timestamp = 1;
         test2.Level = LogLevel.INFO;
         test2.Level = LogLevel.INFO;
         test2.Level = LogLevel.INFO;
         test2.RequestId = "TS";
         test2.AccountId = "TS";
         test2.CallId = "TS";
         test2.Message = "TS";
         object testObject2 = new object();
         test2.Metadata = testObject2;

        string toString1 = test1.ToString();
        string toString2 = test2.ToString();
        Assert.Equal(toString1, toString2);

        }

        /// <summary>
        /// Test the method 'equals'
        /// </summary>
        
        [Fact]
        public void equalsTest() {
        LogResult test1 = new LogResult();
         test1.Timestamp = 1;
         test1.Level = LogLevel.INFO;
         test1.Level = LogLevel.INFO;
         test1.Level = LogLevel.INFO;
         test1.RequestId = "TS";
         test1.AccountId = "TS";
         test1.CallId = "TS";
         test1.Message = "TS";
         object testObject = new object();
         test1.Metadata = testObject;

        LogResult test2 = new LogResult();
         test2.Timestamp = 1;
         test2.Level = LogLevel.INFO;
         test2.Level = LogLevel.INFO;
         test2.Level = LogLevel.INFO;
         test2.RequestId = "TS";
         test2.AccountId = "TS";
         test2.CallId = "TS";
         test2.Message = "TS";
         object testObject2 = testObject;
         test2.Metadata = testObject2;

        Assert.True(test1.Equals(test2));
        }

        /// <summary>
        /// Test the method 'ToJson'
        /// </summary>
        
        [Fact]
        public void ToJsonTest() {
        LogResult test1 = new LogResult();
         test1.Timestamp = 1;
         test1.Level = LogLevel.INFO;
         test1.Level = LogLevel.INFO;
         test1.Level = LogLevel.INFO;
         test1.RequestId = "TS";
         test1.AccountId = "TS";
         test1.CallId = "TS";
         test1.Message = "TS";
         object testObject = new object();
         test1.Metadata = testObject;
         string jsonStr = JsonConvert.SerializeObject(test1, Newtonsoft.Json.Formatting.Indented);

        LogResult test2 = new LogResult();
         test2.Timestamp = 1;
         test2.Level = LogLevel.INFO;
         test2.Level = LogLevel.INFO;
         test2.Level = LogLevel.INFO;
         test2.RequestId = "TS";
         test2.AccountId = "TS";
         test2.CallId = "TS";
         test2.Message = "TS";
         object testObject2 = testObject;
         test2.Metadata = testObject2;

        Assert.True(jsonStr.Equals(test2.ToJson()));
        }
    }
}
