/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */




using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using System.Text;
using freeclimb.Api;
using freeclimb.Model;
using freeclimb.Client;
using System.Reflection;
using Newtonsoft.Json;
using System.Globalization;
using freeclimb.Enums;


namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing CreateConferenceRequest
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class CreateConferenceRequestTests
    {
        private CreateConferenceRequest instance;

        public CreateConferenceRequestTests()
        {
            instance = new CreateConferenceRequest();
        }

        /// <summary>
        /// Test an instance of CreateConferenceRequest
        /// </summary>
        [Fact]
        public void CreateConferenceRequestInstanceTest()
        {
            Assert.IsType<CreateConferenceRequest>(instance);
        }


        /// <summary>
        /// Test the property 'Alias'
        /// </summary>
        [Fact]
        public void AliasTest()
        {
            instance.Alias = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.Alias);
            
        }
        /// <summary>
        /// Test the property 'PlayBeep'
        /// </summary>
        [Fact]
        public void PlayBeepTest()
        {
            instance.PlayBeep = PlayBeep.ALWAYS;
            Assert.Equal(instance.PlayBeep,PlayBeep.ALWAYS);
            instance.PlayBeep = PlayBeep.NEVER;
            Assert.Equal(instance.PlayBeep,PlayBeep.NEVER);
            instance.PlayBeep = PlayBeep.ENTRY_ONLY;
            Assert.Equal(instance.PlayBeep,PlayBeep.ENTRY_ONLY);
            instance.PlayBeep = PlayBeep.EXIT_ONLY;
            Assert.Equal(instance.PlayBeep,PlayBeep.EXIT_ONLY);
            
        }
        /// <summary>
        /// Test the property 'Record'
        /// </summary>
        [Fact]
        public void RecordTest()
        {
            instance.Record = false;
            Assert.Equal(false, instance.Record);       
            
        }
        /// <summary>
        /// Test the property 'WaitUrl'
        /// </summary>
        [Fact]
        public void WaitUrlTest()
        {
            instance.WaitUrl = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.WaitUrl);
            
        }
        /// <summary>
        /// Test the property 'StatusCallbackUrl'
        /// </summary>
        [Fact]
        public void StatusCallbackUrlTest()
        {
            instance.StatusCallbackUrl = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.StatusCallbackUrl);
            
        }
        
        
        /// <summary>
        /// Test the method 'equalsTrue'
        /// </summary>
        
        [Fact]
        public void equalsTrueTest() {
        CreateConferenceRequest test1 = new CreateConferenceRequest();
         test1.Alias = "TS";
         test1.PlayBeep = PlayBeep.ALWAYS;
         test1.Record = true;
         test1.WaitUrl = "TS";
         test1.StatusCallbackUrl = "TS";

        CreateConferenceRequest test2 = new CreateConferenceRequest();
         test2.Alias = "TS";
         test2.PlayBeep = PlayBeep.ALWAYS;
         test2.Record = true;
         test2.WaitUrl = "TS";
         test2.StatusCallbackUrl = "TS";

        Assert.Equal(test1,test2);
        }

        /// <summary>
        /// Test the method 'equalsFalse'
        /// </summary>
        
        [Fact]
        public void equalsFalseTest() {
        CreateConferenceRequest test1 = new CreateConferenceRequest();
         test1.Alias = "TS";
         test1.PlayBeep = PlayBeep.ALWAYS;
         test1.Record = true;
         test1.WaitUrl = "TS";
         test1.StatusCallbackUrl = "TS";

        CreateConferenceRequest test2 = new CreateConferenceRequest();
         test2.Alias = "ts";
         test2.PlayBeep = PlayBeep.NEVER;
         test2.Record = false;
         test2.WaitUrl = "ts";
         test2.StatusCallbackUrl = "ts";

        Assert.NotEqual(test1,test2);
        }

        /// <summary>
        /// Test the method 'hashCodeType'
        /// </summary>
        
        [Fact]
        public void hashCodeTypeTest() {
        CreateConferenceRequest test1 = new CreateConferenceRequest();
         test1.Alias = "TS";
         test1.PlayBeep = PlayBeep.ALWAYS;
         test1.Record = true;
         test1.WaitUrl = "TS";
         test1.StatusCallbackUrl = "TS";

        int hashCode1 = test1.GetHashCode();
        Assert.True(hashCode1.GetType() == typeof(int));

        }

        /// <summary>
        /// Test the method 'ToStringType'
        /// </summary>
        
        [Fact]
        public void ToStringTypeTest() {
        CreateConferenceRequest test1 = new CreateConferenceRequest();
         test1.Alias = "TS";
         test1.PlayBeep = PlayBeep.ALWAYS;
         test1.Record = true;
         test1.WaitUrl = "TS";
         test1.StatusCallbackUrl = "TS";

        string toString1 = test1.ToString();
        Assert.True(toString1.GetType() == typeof(string));

        }

        /// <summary>
        /// Test the method 'ToStringEquals'
        /// </summary>
        
        [Fact]
        public void ToStringEqualsTest() {
        CreateConferenceRequest test1 = new CreateConferenceRequest();
         test1.Alias = "TS";
         test1.PlayBeep = PlayBeep.ALWAYS;
         test1.Record = true;
         test1.WaitUrl = "TS";
         test1.StatusCallbackUrl = "TS";

        CreateConferenceRequest test2 = new CreateConferenceRequest();
         test2.Alias = "TS";
         test2.PlayBeep = PlayBeep.ALWAYS;
         test2.Record = true;
         test2.WaitUrl = "TS";
         test2.StatusCallbackUrl = "TS";

        string toString1 = test1.ToString();
        string toString2 = test2.ToString();
        Assert.Equal(toString1, toString2);

        }

        /// <summary>
        /// Test the method 'equals'
        /// </summary>
        
        [Fact]
        public void equalsTest() {
        CreateConferenceRequest test1 = new CreateConferenceRequest();
         test1.Alias = "TS";
         test1.PlayBeep = PlayBeep.ALWAYS;
         test1.Record = true;
         test1.WaitUrl = "TS";
         test1.StatusCallbackUrl = "TS";

        CreateConferenceRequest test2 = new CreateConferenceRequest();
         test2.Alias = "TS";
         test2.PlayBeep = PlayBeep.ALWAYS;
         test2.Record = true;
         test2.WaitUrl = "TS";
         test2.StatusCallbackUrl = "TS";

        Assert.True(test1.Equals(test2));
        }

        /// <summary>
        /// Test the method 'ToJson'
        /// </summary>
        
        [Fact]
        public void ToJsonTest() {
        CreateConferenceRequest test1 = new CreateConferenceRequest();
         test1.Alias = "TS";
         test1.PlayBeep = PlayBeep.ALWAYS;
         test1.Record = true;
         test1.WaitUrl = "TS";
         test1.StatusCallbackUrl = "TS";
         string jsonStr = JsonConvert.SerializeObject(test1, Newtonsoft.Json.Formatting.Indented);

        CreateConferenceRequest test2 = new CreateConferenceRequest();
         test2.Alias = "TS";
         test2.PlayBeep = PlayBeep.ALWAYS;
         test2.Record = true;
         test2.WaitUrl = "TS";
         test2.StatusCallbackUrl = "TS";

        Assert.True(jsonStr.Equals(test2.ToJson()));
        }
    }
}
