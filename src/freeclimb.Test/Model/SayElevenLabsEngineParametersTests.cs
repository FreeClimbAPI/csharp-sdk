/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing SayElevenLabsEngineParameters
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class SayElevenLabsEngineParametersTests : IDisposable
    {
        private SayElevenLabsEngineParameters instance;

        public SayElevenLabsEngineParametersTests()
        {
            instance = new SayElevenLabsEngineParameters(
                modelId: (string)TestHelpers.getTestValue(typeof(string)),
                voiceId: (string)TestHelpers.getTestValue(typeof(string)),
                languageCode: (string)TestHelpers.getTestValue(typeof(string)),
                voiceSettings: (SayElevenLabsEngineParametersVoiceSettings)
                    TestHelpers.getTestValue(typeof(SayElevenLabsEngineParametersVoiceSettings)),
                pronunciationDictionary: (List<SayElevenLabsEngineParametersPronunciationDictionaryInner>)
                    TestHelpers.getTestValue(
                        typeof(List<SayElevenLabsEngineParametersPronunciationDictionaryInner>)
                    ),
                seed: (int)TestHelpers.getTestValue(typeof(int)),
                previousText: (string)TestHelpers.getTestValue(typeof(string)),
                nextText: (string)TestHelpers.getTestValue(typeof(string)),
                previousRequestIds: (List<string>)TestHelpers.getTestValue(typeof(List<string>)),
                nextRequestIds: (List<string>)TestHelpers.getTestValue(typeof(List<string>)),
                applyLanguageTextNormalization: (bool)TestHelpers.getTestValue(typeof(bool))
            );
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SayElevenLabsEngineParameters
        /// </summary>
        [Fact]
        public void SayElevenLabsEngineParametersInstanceTest()
        {
            Assert.IsType<SayElevenLabsEngineParameters>(instance);
        }

        /// <summary>
        /// Test the property 'ModelId'
        /// </summary>
        [Fact]
        public void ModelIdTest()
        {
            instance.ModelId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.ModelId);
        }

        /// <summary>
        /// Test the property 'VoiceId'
        /// </summary>
        [Fact]
        public void VoiceIdTest()
        {
            instance.VoiceId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.VoiceId);
        }

        /// <summary>
        /// Test the property 'LanguageCode'
        /// </summary>
        [Fact]
        public void LanguageCodeTest()
        {
            instance.LanguageCode = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.LanguageCode);
        }

        /// <summary>
        /// Test the property 'VoiceSettings'
        /// </summary>
        [Fact]
        public void VoiceSettingsTest()
        {
            SayElevenLabsEngineParametersVoiceSettings testObject =
                (SayElevenLabsEngineParametersVoiceSettings)
                    TestHelpers.getTestValue(typeof(SayElevenLabsEngineParametersVoiceSettings));
            instance.VoiceSettings = testObject;
            Assert.Equal(testObject, instance.VoiceSettings);
        }

        /// <summary>
        /// Test the property 'PronunciationDictionary'
        /// </summary>
        [Fact]
        public void PronunciationDictionaryTest()
        {
            List<SayElevenLabsEngineParametersPronunciationDictionaryInner> testList =
                new List<SayElevenLabsEngineParametersPronunciationDictionaryInner>();
            instance.PronunciationDictionary = testList;
            Assert.Equal(instance.PronunciationDictionary, testList);
        }

        /// <summary>
        /// Test the property 'Seed'
        /// </summary>
        [Fact]
        public void SeedTest()
        {
            instance.Seed = 1;
            Assert.Equal(1, (int)instance.Seed);
        }

        /// <summary>
        /// Test the property 'PreviousText'
        /// </summary>
        [Fact]
        public void PreviousTextTest()
        {
            instance.PreviousText = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.PreviousText);
        }

        /// <summary>
        /// Test the property 'NextText'
        /// </summary>
        [Fact]
        public void NextTextTest()
        {
            instance.NextText = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.NextText);
        }

        /// <summary>
        /// Test the property 'PreviousRequestIds'
        /// </summary>
        [Fact]
        public void PreviousRequestIdsTest()
        {
            List<string> testList = new List<string>();
            instance.PreviousRequestIds = testList;
            Assert.Equal(instance.PreviousRequestIds, testList);
        }

        /// <summary>
        /// Test the property 'NextRequestIds'
        /// </summary>
        [Fact]
        public void NextRequestIdsTest()
        {
            List<string> testList = new List<string>();
            instance.NextRequestIds = testList;
            Assert.Equal(instance.NextRequestIds, testList);
        }

        /// <summary>
        /// Test the property 'ApplyLanguageTextNormalization'
        /// </summary>
        [Fact]
        public void ApplyLanguageTextNormalizationTest()
        {
            instance.ApplyLanguageTextNormalization = false;
            Assert.False(instance.ApplyLanguageTextNormalization);
        }

        /// <summary>
        /// Test serialize a SayElevenLabsEngineParameters to JSON string - all values are present
        /// </summary>
        [Fact]
        public void SayElevenLabsEngineParametersSerializeToJSONTest()
        {
            string json = instance.ToJson();

            Assert.Contains("model_id", json);

            Assert.Contains("voice_id", json);

            Assert.Contains("language_code", json);

            Assert.Contains("voice_settings", json);

            Assert.Contains("pronunciation_dictionary", json);

            Assert.Contains("seed", json);

            Assert.Contains("previous_text", json);

            Assert.Contains("next_text", json);

            Assert.Contains("previous_request_ids", json);

            Assert.Contains("next_request_ids", json);

            Assert.Contains("apply_language_text_normalization", json);
        }

        /// <summary>
        /// Test serialize a SayElevenLabsEngineParameters to JSON string - null values are stripped
        /// </summary>
        [Fact]
        public void SayElevenLabsEngineParametersSerializeToJSONStripNullTest()
        {
            string json = instance.ToJson();
            Assert.DoesNotContain("null", json);
        }
    }
}
