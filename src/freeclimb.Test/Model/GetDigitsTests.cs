/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing GetDigits
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class GetDigitsTests : IDisposable
    {
        private GetDigits instance;

        public GetDigitsTests()
        {
            instance = new GetDigits(
                actionUrl: (string)TestHelpers.getTestValue(typeof(string)),
                digitTimeoutMs: (int)TestHelpers.getTestValue(typeof(int)),
                finishOnKey: (string)TestHelpers.getTestValue(typeof(string)),
                flushBuffer: (bool)TestHelpers.getTestValue(typeof(bool)),
                initialTimeoutMs: (int)TestHelpers.getTestValue(typeof(int)),
                maxDigits: (int)TestHelpers.getTestValue(typeof(int)),
                minDigits: (int)TestHelpers.getTestValue(typeof(int)),
                prompts: (List<PerclCommand>)TestHelpers.getTestValue(typeof(List<PerclCommand>)),
                privacyMode: (bool)TestHelpers.getTestValue(typeof(bool))
            );
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GetDigits
        /// </summary>
        [Fact]
        public void GetDigitsInstanceTest()
        {
            Assert.IsType<GetDigits>(instance);
        }

        /// <summary>
        /// Test the property 'ActionUrl'
        /// </summary>
        [Fact]
        public void ActionUrlTest()
        {
            instance.ActionUrl = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.ActionUrl);
        }

        /// <summary>
        /// Test the property 'DigitTimeoutMs'
        /// </summary>
        [Fact]
        public void DigitTimeoutMsTest()
        {
            instance.DigitTimeoutMs = 1;
            Assert.Equal(1, (int)instance.DigitTimeoutMs);
        }

        /// <summary>
        /// Test the property 'FinishOnKey'
        /// </summary>
        [Fact]
        public void FinishOnKeyTest()
        {
            instance.FinishOnKey = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.FinishOnKey);
        }

        /// <summary>
        /// Test the property 'FlushBuffer'
        /// </summary>
        [Fact]
        public void FlushBufferTest()
        {
            instance.FlushBuffer = false;
            Assert.False(instance.FlushBuffer);
        }

        /// <summary>
        /// Test the property 'InitialTimeoutMs'
        /// </summary>
        [Fact]
        public void InitialTimeoutMsTest()
        {
            instance.InitialTimeoutMs = 1;
            Assert.Equal(1, (int)instance.InitialTimeoutMs);
        }

        /// <summary>
        /// Test the property 'MaxDigits'
        /// </summary>
        [Fact]
        public void MaxDigitsTest()
        {
            instance.MaxDigits = 1;
            Assert.Equal(1, (int)instance.MaxDigits);
        }

        /// <summary>
        /// Test the property 'MinDigits'
        /// </summary>
        [Fact]
        public void MinDigitsTest()
        {
            instance.MinDigits = 1;
            Assert.Equal(1, (int)instance.MinDigits);
        }

        /// <summary>
        /// Test the property 'Prompts'
        /// </summary>
        [Fact]
        public void PromptsTest()
        {
            List<PerclCommand> testList = new List<PerclCommand>();
            instance.Prompts = testList;
            Assert.Equal(instance.Prompts, testList);
        }

        /// <summary>
        /// Test the property 'PrivacyMode'
        /// </summary>
        [Fact]
        public void PrivacyModeTest()
        {
            instance.PrivacyMode = false;
            Assert.False(instance.PrivacyMode);
        }
    }
}
