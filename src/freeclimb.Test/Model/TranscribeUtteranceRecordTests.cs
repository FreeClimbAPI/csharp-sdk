/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */




using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using System.Text;
using freeclimb.Api;
using freeclimb.Model;
using freeclimb.Client;
using System.Reflection;
using Newtonsoft.Json;
using System.Globalization;
using freeclimb.Enums;


namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing TranscribeUtteranceRecord
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class TranscribeUtteranceRecordTests
    {
        private TranscribeUtteranceRecord instance;

        public TranscribeUtteranceRecordTests()
        {
            instance = new TranscribeUtteranceRecord();
        }

        /// <summary>
        /// Test an instance of TranscribeUtteranceRecord
        /// </summary>
        [Fact]
        public void TranscribeUtteranceRecordInstanceTest()
        {
            Assert.IsType<TranscribeUtteranceRecord>(instance);
        }


        /// <summary>
        /// Test the property 'SaveRecording'
        /// </summary>
        [Fact]
        public void SaveRecordingTest()
        {
            instance.SaveRecording = false;
            Assert.Equal(false, instance.SaveRecording);       
            
        }
        /// <summary>
        /// Test the property 'MaxLengthSec'
        /// </summary>
        [Fact]
        public void MaxLengthSecTest()
        {
            
            instance.MaxLengthSec = 1;
            Assert.Equal(1, (int) instance.MaxLengthSec);
        }
        /// <summary>
        /// Test the property 'RcrdTerminationSilenceTimeMs'
        /// </summary>
        [Fact]
        public void RcrdTerminationSilenceTimeMsTest()
        {
            
            instance.RcrdTerminationSilenceTimeMs = 1;
            Assert.Equal(1, (int) instance.RcrdTerminationSilenceTimeMs);
        }
        
        
        /// <summary>
        /// Test the method 'equalsTrue'
        /// </summary>
        
        [Fact]
        public void equalsTrueTest() {
        TranscribeUtteranceRecord test1 = new TranscribeUtteranceRecord();
         test1.SaveRecording = true;
         test1.MaxLengthSec = 1;
         test1.RcrdTerminationSilenceTimeMs = 1;

        TranscribeUtteranceRecord test2 = new TranscribeUtteranceRecord();
         test2.SaveRecording = true;
         test2.MaxLengthSec = 1;
         test2.RcrdTerminationSilenceTimeMs = 1;

        Assert.Equal(test1,test2);
        }

        /// <summary>
        /// Test the method 'equalsFalse'
        /// </summary>
        
        [Fact]
        public void equalsFalseTest() {
        TranscribeUtteranceRecord test1 = new TranscribeUtteranceRecord();
         test1.SaveRecording = true;
         test1.MaxLengthSec = 1;
         test1.RcrdTerminationSilenceTimeMs = 1;

        TranscribeUtteranceRecord test2 = new TranscribeUtteranceRecord();
         test2.SaveRecording = false;
         test2.MaxLengthSec = 2;
         test2.RcrdTerminationSilenceTimeMs = 2;

        Assert.NotEqual(test1,test2);
        }

        /// <summary>
        /// Test the method 'hashCodeType'
        /// </summary>
        
        [Fact]
        public void hashCodeTypeTest() {
        TranscribeUtteranceRecord test1 = new TranscribeUtteranceRecord();
         test1.SaveRecording = true;
         test1.MaxLengthSec = 1;
         test1.RcrdTerminationSilenceTimeMs = 1;

        int hashCode1 = test1.GetHashCode();
        Assert.True(hashCode1.GetType() == typeof(int));

        }

        /// <summary>
        /// Test the method 'ToStringType'
        /// </summary>
        
        [Fact]
        public void ToStringTypeTest() {
        TranscribeUtteranceRecord test1 = new TranscribeUtteranceRecord();
         test1.SaveRecording = true;
         test1.MaxLengthSec = 1;
         test1.RcrdTerminationSilenceTimeMs = 1;

        string toString1 = test1.ToString();
        Assert.True(toString1.GetType() == typeof(string));

        }

        /// <summary>
        /// Test the method 'ToStringEquals'
        /// </summary>
        
        [Fact]
        public void ToStringEqualsTest() {
        TranscribeUtteranceRecord test1 = new TranscribeUtteranceRecord();
         test1.SaveRecording = true;
         test1.MaxLengthSec = 1;
         test1.RcrdTerminationSilenceTimeMs = 1;

        TranscribeUtteranceRecord test2 = new TranscribeUtteranceRecord();
         test2.SaveRecording = true;
         test2.MaxLengthSec = 1;
         test2.RcrdTerminationSilenceTimeMs = 1;

        string toString1 = test1.ToString();
        string toString2 = test2.ToString();
        Assert.Equal(toString1, toString2);

        }

        /// <summary>
        /// Test the method 'equals'
        /// </summary>
        
        [Fact]
        public void equalsTest() {
        TranscribeUtteranceRecord test1 = new TranscribeUtteranceRecord();
         test1.SaveRecording = true;
         test1.MaxLengthSec = 1;
         test1.RcrdTerminationSilenceTimeMs = 1;

        TranscribeUtteranceRecord test2 = new TranscribeUtteranceRecord();
         test2.SaveRecording = true;
         test2.MaxLengthSec = 1;
         test2.RcrdTerminationSilenceTimeMs = 1;

        Assert.True(test1.Equals(test2));
        }

        /// <summary>
        /// Test the method 'ToJson'
        /// </summary>
        
        [Fact]
        public void ToJsonTest() {
        TranscribeUtteranceRecord test1 = new TranscribeUtteranceRecord();
         test1.SaveRecording = true;
         test1.MaxLengthSec = 1;
         test1.RcrdTerminationSilenceTimeMs = 1;
         string jsonStr = JsonConvert.SerializeObject(test1, Newtonsoft.Json.Formatting.Indented);

        TranscribeUtteranceRecord test2 = new TranscribeUtteranceRecord();
         test2.SaveRecording = true;
         test2.MaxLengthSec = 1;
         test2.RcrdTerminationSilenceTimeMs = 1;

        Assert.True(jsonStr.Equals(test2.ToJson()));
        }
    }
}
