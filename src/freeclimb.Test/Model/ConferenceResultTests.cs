/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing ConferenceResult
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class ConferenceResultTests : IDisposable
    {
        private ConferenceResult instance;

        public ConferenceResultTests()
        {
            instance = new ConferenceResult(
                uri: (string)TestHelpers.getTestValue(typeof(string)),
                dateCreated: (string)TestHelpers.getTestValue(typeof(string)),
                dateUpdated: (string)TestHelpers.getTestValue(typeof(string)),
                revision: (int)TestHelpers.getTestValue(typeof(int)),
                conferenceId: (string)TestHelpers.getTestValue(typeof(string)),
                accountId: (string)TestHelpers.getTestValue(typeof(string)),
                alias: (string)TestHelpers.getTestValue(typeof(string)),
                playBeep: (PlayBeep)TestHelpers.getTestValue(typeof(PlayBeep)),
                record: (bool?)TestHelpers.getTestValue(typeof(bool?)),
                status: (ConferenceStatus)TestHelpers.getTestValue(typeof(ConferenceStatus)),
                waitUrl: (string)TestHelpers.getTestValue(typeof(string)),
                actionUrl: (string)TestHelpers.getTestValue(typeof(string)),
                statusCallbackUrl: (string)TestHelpers.getTestValue(typeof(string)),
                subresourceUris: (Object)TestHelpers.getTestValue(typeof(Object))
            );
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ConferenceResult
        /// </summary>
        [Fact]
        public void ConferenceResultInstanceTest()
        {
            Assert.IsType<ConferenceResult>(instance);
        }

        /// <summary>
        /// Test the property 'Uri'
        /// </summary>
        [Fact]
        public void UriTest()
        {
            instance.Uri = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.Uri);
        }

        /// <summary>
        /// Test the property 'DateCreated'
        /// </summary>
        [Fact]
        public void DateCreatedTest()
        {
            instance.DateCreated = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.DateCreated);
        }

        /// <summary>
        /// Test the property 'DateUpdated'
        /// </summary>
        [Fact]
        public void DateUpdatedTest()
        {
            instance.DateUpdated = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.DateUpdated);
        }

        /// <summary>
        /// Test the property 'Revision'
        /// </summary>
        [Fact]
        public void RevisionTest()
        {
            instance.Revision = 1;
            Assert.Equal(1, (int)instance.Revision);
        }

        /// <summary>
        /// Test the property 'ConferenceId'
        /// </summary>
        [Fact]
        public void ConferenceIdTest()
        {
            instance.ConferenceId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.ConferenceId);
        }

        /// <summary>
        /// Test the property 'AccountId'
        /// </summary>
        [Fact]
        public void AccountIdTest()
        {
            instance.AccountId = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.AccountId);
        }

        /// <summary>
        /// Test the property 'Alias'
        /// </summary>
        [Fact]
        public void AliasTest()
        {
            instance.Alias = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.Alias);
        }

        /// <summary>
        /// Test the property 'PlayBeep'
        /// </summary>
        [Fact]
        public void PlayBeepTest()
        {
            instance.PlayBeep = PlayBeep.ALWAYS;
            Assert.Equal(PlayBeep.ALWAYS, instance.PlayBeep);
            instance.PlayBeep = PlayBeep.NEVER;
            Assert.Equal(PlayBeep.NEVER, instance.PlayBeep);
            instance.PlayBeep = PlayBeep.ENTRY_ONLY;
            Assert.Equal(PlayBeep.ENTRY_ONLY, instance.PlayBeep);
            instance.PlayBeep = PlayBeep.EXIT_ONLY;
            Assert.Equal(PlayBeep.EXIT_ONLY, instance.PlayBeep);
        }

        /// <summary>
        /// Test the property 'Record'
        /// </summary>
        [Fact]
        public void RecordTest()
        {
            instance.Record = false;
            Assert.False(instance.Record);
        }

        /// <summary>
        /// Test the property 'Status'
        /// </summary>
        [Fact]
        public void StatusTest()
        {
            instance.Status = ConferenceStatus.EMPTY;
            Assert.Equal(ConferenceStatus.EMPTY, instance.Status);
            instance.Status = ConferenceStatus.POPULATED;
            Assert.Equal(ConferenceStatus.POPULATED, instance.Status);
            instance.Status = ConferenceStatus.IN_PROGRESS;
            Assert.Equal(ConferenceStatus.IN_PROGRESS, instance.Status);
            instance.Status = ConferenceStatus.TERMINATED;
            Assert.Equal(ConferenceStatus.TERMINATED, instance.Status);
        }

        /// <summary>
        /// Test the property 'WaitUrl'
        /// </summary>
        [Fact]
        public void WaitUrlTest()
        {
            instance.WaitUrl = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.WaitUrl);
        }

        /// <summary>
        /// Test the property 'ActionUrl'
        /// </summary>
        [Fact]
        public void ActionUrlTest()
        {
            instance.ActionUrl = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.ActionUrl);
        }

        /// <summary>
        /// Test the property 'StatusCallbackUrl'
        /// </summary>
        [Fact]
        public void StatusCallbackUrlTest()
        {
            instance.StatusCallbackUrl = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.StatusCallbackUrl);
        }

        /// <summary>
        /// Test the property 'SubresourceUris'
        /// </summary>
        [Fact]
        public void SubresourceUrisTest()
        {
            Object testObject = (Object)TestHelpers.getTestValue(typeof(Object));
            instance.SubresourceUris = testObject;
            Assert.Equal(testObject, instance.SubresourceUris);
        }
    }
}
