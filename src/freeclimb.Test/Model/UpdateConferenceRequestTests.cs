/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing UpdateConferenceRequest
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class UpdateConferenceRequestTests : IDisposable
    {
        private UpdateConferenceRequest instance;

        public UpdateConferenceRequestTests()
        {
            instance = new UpdateConferenceRequest(
                alias: (string)TestHelpers.getTestValue(typeof(string)),
                playBeep: (PlayBeep)TestHelpers.getTestValue(typeof(PlayBeep)),
                status: (UpdateConferenceRequestStatus)
                    TestHelpers.getTestValue(typeof(UpdateConferenceRequestStatus))
            );
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UpdateConferenceRequest
        /// </summary>
        [Fact]
        public void UpdateConferenceRequestInstanceTest()
        {
            Assert.IsType<UpdateConferenceRequest>(instance);
        }

        /// <summary>
        /// Test the property 'Alias'
        /// </summary>
        [Fact]
        public void AliasTest()
        {
            instance.Alias = "TEST_STRING";
            Assert.Equal("TEST_STRING", instance.Alias);
        }

        /// <summary>
        /// Test the property 'PlayBeep'
        /// </summary>
        [Fact]
        public void PlayBeepTest()
        {
            instance.PlayBeep = PlayBeep.ALWAYS;
            Assert.Equal(PlayBeep.ALWAYS, instance.PlayBeep);
            instance.PlayBeep = PlayBeep.NEVER;
            Assert.Equal(PlayBeep.NEVER, instance.PlayBeep);
            instance.PlayBeep = PlayBeep.ENTRY_ONLY;
            Assert.Equal(PlayBeep.ENTRY_ONLY, instance.PlayBeep);
            instance.PlayBeep = PlayBeep.EXIT_ONLY;
            Assert.Equal(PlayBeep.EXIT_ONLY, instance.PlayBeep);
        }

        /// <summary>
        /// Test the property 'Status'
        /// </summary>
        [Fact]
        public void StatusTest()
        {
            instance.Status = UpdateConferenceRequestStatus.EMPTY;
            Assert.Equal(UpdateConferenceRequestStatus.EMPTY, instance.Status);
            instance.Status = UpdateConferenceRequestStatus.TERMINATED;
            Assert.Equal(UpdateConferenceRequestStatus.TERMINATED, instance.Status);
        }

        /// <summary>
        /// Test serialize a UpdateConferenceRequest to JSON string - all values are present
        /// </summary>
        [Fact]
        public void UpdateConferenceRequestSerializeToJSONTest()
        {
            string json = instance.ToJson();
            //Console.WriteLine("++UpdateConferenceRequest++" );
            //Console.WriteLine(json);

            //Console.WriteLine("does it contain - alias ++ " + json.Contains("alias"));
            Assert.Contains("alias", json);

            //Console.WriteLine("does it contain - playBeep ++ " + json.Contains("playBeep"));
            Assert.Contains("playBeep", json);

            //Console.WriteLine("does it contain - status ++ " + json.Contains("status"));
            Assert.Contains("status", json);
        }

        /// <summary>
        /// Test serialize a UpdateConferenceRequest to JSON string - null values are stripped
        /// </summary>
        [Fact]
        public void UpdateConferenceRequestSerializeToJSONStripNullTest()
        {
            instance.PlayBeep = null;

            string json = instance.ToJson();
            Assert.DoesNotContain("null", json);
        }
    }
}
