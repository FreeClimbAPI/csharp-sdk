/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;
using freeclimb.Test;
using Newtonsoft.Json;
using Xunit;

namespace freeclimb.Test.Model
{
    /// <summary>
    ///  Class for testing Webhook
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>

    public class WebhookTests : IDisposable
    {
        private Webhook instance;

        public WebhookTests()
        {
            instance = new Webhook(requestType: (string)TestHelpers.getTestValue(typeof(string)));
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Webhook
        /// </summary>
        [Fact]
        public void WebhookInstanceTest()
        {
            Assert.IsType<Webhook>(instance);
        }

        /// <summary>
        /// Test deserialize a AddToConferenceNotificationWebhook from type Webhook
        /// </summary>
        [Fact]
        public void AddToConferenceNotificationWebhookDeserializeFromWebhookTest()
        {
            Assert.IsType<Webhook>(
                JsonConvert.DeserializeObject<Webhook>(
                    new AddToConferenceNotificationWebhook().ToJson()
                )
            );
        }

        /// <summary>
        /// Test deserialize a AddToQueueNotificationWebhook from type Webhook
        /// </summary>
        [Fact]
        public void AddToQueueNotificationWebhookDeserializeFromWebhookTest()
        {
            Assert.IsType<Webhook>(
                JsonConvert.DeserializeObject<Webhook>(new AddToQueueNotificationWebhook().ToJson())
            );
        }

        /// <summary>
        /// Test deserialize a CallControlWebhook from type Webhook
        /// </summary>
        [Fact]
        public void CallControlWebhookDeserializeFromWebhookTest()
        {
            Assert.IsType<Webhook>(
                JsonConvert.DeserializeObject<Webhook>(new CallControlWebhook().ToJson())
            );
        }

        /// <summary>
        /// Test deserialize a CallStatusWebhook from type Webhook
        /// </summary>
        [Fact]
        public void CallStatusWebhookDeserializeFromWebhookTest()
        {
            Assert.IsType<Webhook>(
                JsonConvert.DeserializeObject<Webhook>(new CallStatusWebhook().ToJson())
            );
        }

        /// <summary>
        /// Test deserialize a ConferenceRecordingStatusWebhook from type Webhook
        /// </summary>
        [Fact]
        public void ConferenceRecordingStatusWebhookDeserializeFromWebhookTest()
        {
            Assert.IsType<Webhook>(
                JsonConvert.DeserializeObject<Webhook>(
                    new ConferenceRecordingStatusWebhook().ToJson()
                )
            );
        }

        /// <summary>
        /// Test deserialize a ConferenceStatusWebhook from type Webhook
        /// </summary>
        [Fact]
        public void ConferenceStatusWebhookDeserializeFromWebhookTest()
        {
            Assert.IsType<Webhook>(
                JsonConvert.DeserializeObject<Webhook>(new ConferenceStatusWebhook().ToJson())
            );
        }

        /// <summary>
        /// Test deserialize a CreateConferenceWebhook from type Webhook
        /// </summary>
        [Fact]
        public void CreateConferenceWebhookDeserializeFromWebhookTest()
        {
            Assert.IsType<Webhook>(
                JsonConvert.DeserializeObject<Webhook>(new CreateConferenceWebhook().ToJson())
            );
        }

        /// <summary>
        /// Test deserialize a DequeueWebhook from type Webhook
        /// </summary>
        [Fact]
        public void DequeueWebhookDeserializeFromWebhookTest()
        {
            Assert.IsType<Webhook>(
                JsonConvert.DeserializeObject<Webhook>(new DequeueWebhook().ToJson())
            );
        }

        /// <summary>
        /// Test deserialize a GetDigitsWebhook from type Webhook
        /// </summary>
        [Fact]
        public void GetDigitsWebhookDeserializeFromWebhookTest()
        {
            Assert.IsType<Webhook>(
                JsonConvert.DeserializeObject<Webhook>(new GetDigitsWebhook().ToJson())
            );
        }

        /// <summary>
        /// Test deserialize a GetSpeechWebhook from type Webhook
        /// </summary>
        [Fact]
        public void GetSpeechWebhookDeserializeFromWebhookTest()
        {
            Assert.IsType<Webhook>(
                JsonConvert.DeserializeObject<Webhook>(new GetSpeechWebhook().ToJson())
            );
        }

        /// <summary>
        /// Test deserialize a InboundCallWebhook from type Webhook
        /// </summary>
        [Fact]
        public void InboundCallWebhookDeserializeFromWebhookTest()
        {
            Assert.IsType<Webhook>(
                JsonConvert.DeserializeObject<Webhook>(new InboundCallWebhook().ToJson())
            );
        }

        /// <summary>
        /// Test deserialize a LeaveConferenceWebhook from type Webhook
        /// </summary>
        [Fact]
        public void LeaveConferenceWebhookDeserializeFromWebhookTest()
        {
            Assert.IsType<Webhook>(
                JsonConvert.DeserializeObject<Webhook>(new LeaveConferenceWebhook().ToJson())
            );
        }

        /// <summary>
        /// Test deserialize a MachineDetectedWebhook from type Webhook
        /// </summary>
        [Fact]
        public void MachineDetectedWebhookDeserializeFromWebhookTest()
        {
            Assert.IsType<Webhook>(
                JsonConvert.DeserializeObject<Webhook>(new MachineDetectedWebhook().ToJson())
            );
        }

        /// <summary>
        /// Test deserialize a MessageDeliveryWebhook from type Webhook
        /// </summary>
        [Fact]
        public void MessageDeliveryWebhookDeserializeFromWebhookTest()
        {
            Assert.IsType<Webhook>(
                JsonConvert.DeserializeObject<Webhook>(new MessageDeliveryWebhook().ToJson())
            );
        }

        /// <summary>
        /// Test deserialize a MessageStatusWebhook from type Webhook
        /// </summary>
        [Fact]
        public void MessageStatusWebhookDeserializeFromWebhookTest()
        {
            Assert.IsType<Webhook>(
                JsonConvert.DeserializeObject<Webhook>(new MessageStatusWebhook().ToJson())
            );
        }

        /// <summary>
        /// Test deserialize a OutDialApiConnectWebhook from type Webhook
        /// </summary>
        [Fact]
        public void OutDialApiConnectWebhookDeserializeFromWebhookTest()
        {
            Assert.IsType<Webhook>(
                JsonConvert.DeserializeObject<Webhook>(new OutDialApiConnectWebhook().ToJson())
            );
        }

        /// <summary>
        /// Test deserialize a OutDialConnectWebhook from type Webhook
        /// </summary>
        [Fact]
        public void OutDialConnectWebhookDeserializeFromWebhookTest()
        {
            Assert.IsType<Webhook>(
                JsonConvert.DeserializeObject<Webhook>(new OutDialConnectWebhook().ToJson())
            );
        }

        /// <summary>
        /// Test deserialize a OutDialStartWebhook from type Webhook
        /// </summary>
        [Fact]
        public void OutDialStartWebhookDeserializeFromWebhookTest()
        {
            Assert.IsType<Webhook>(
                JsonConvert.DeserializeObject<Webhook>(new OutDialStartWebhook().ToJson())
            );
        }

        /// <summary>
        /// Test deserialize a QueueWaitWebhook from type Webhook
        /// </summary>
        [Fact]
        public void QueueWaitWebhookDeserializeFromWebhookTest()
        {
            Assert.IsType<Webhook>(
                JsonConvert.DeserializeObject<Webhook>(new QueueWaitWebhook().ToJson())
            );
        }

        /// <summary>
        /// Test deserialize a RecordWebhook from type Webhook
        /// </summary>
        [Fact]
        public void RecordWebhookDeserializeFromWebhookTest()
        {
            Assert.IsType<Webhook>(
                JsonConvert.DeserializeObject<Webhook>(new RecordWebhook().ToJson())
            );
        }

        /// <summary>
        /// Test deserialize a RedirectWebhook from type Webhook
        /// </summary>
        [Fact]
        public void RedirectWebhookDeserializeFromWebhookTest()
        {
            Assert.IsType<Webhook>(
                JsonConvert.DeserializeObject<Webhook>(new RedirectWebhook().ToJson())
            );
        }

        /// <summary>
        /// Test deserialize a RemoveFromQueueNotificationWebhook from type Webhook
        /// </summary>
        [Fact]
        public void RemoveFromQueueNotificationWebhookDeserializeFromWebhookTest()
        {
            Assert.IsType<Webhook>(
                JsonConvert.DeserializeObject<Webhook>(
                    new RemoveFromQueueNotificationWebhook().ToJson()
                )
            );
        }

        /// <summary>
        /// Test deserialize a TranscribeWebhook from type Webhook
        /// </summary>
        [Fact]
        public void TranscribeWebhookDeserializeFromWebhookTest()
        {
            Assert.IsType<Webhook>(
                JsonConvert.DeserializeObject<Webhook>(new TranscribeWebhook().ToJson())
            );
        }

        /// <summary>
        /// Test the property 'RequestType'
        /// </summary>
        [Fact]
        public void RequestTypeTest() { }
    }
}
