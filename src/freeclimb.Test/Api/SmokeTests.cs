/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Moq;
using Moq.Protected;
using Xunit;

using freeclimb.Client;
using freeclimb.Api;
// uncomment below to import models
using freeclimb.Model;
using freeclimb.Enums;

namespace freeclimb.Test.Api
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SmokeTests : IDisposable
    {
        private DefaultApi instance;
        private Configuration config;

        public SmokeTests()
        {
            config = new Configuration();
            config.BasePath = "https://dev.freeclimb.com/apiserver";
            config.Username = "TEST-API-USERNAME";
            //TEST-API-KEY replace password with this
            config.Password = "TEST-API-KEY";
            instance = new DefaultApi(config);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<DefaultApi>(instance);
        }
        [Fact]
        public void getAccountInfo()
        {
            var response = instance.GetAnAccount();
            Assert.IsAssignableFrom<AccountResult>(response);
            Assert.IsAssignableFrom<AccountStatus>(response.Status);
            Assert.IsAssignableFrom<AccountType>(response.Type);
        }

    }
}
