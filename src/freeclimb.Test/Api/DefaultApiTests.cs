/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Moq;
using Moq.Protected;
using Xunit;

using freeclimb.Client;
using freeclimb.Api;
// uncomment below to import models
using freeclimb.Model;

namespace freeclimb.Test.Api
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DefaultApiTests : IDisposable
    {
        private Mock<IDefaultApi> instance;
        private Configuration config;

        public DefaultApiTests()
        {
            config = new Configuration();
            config.BasePath = "https://www.freeclimb.com/apiserver";
            config.Username = "TEST-ACCOUNT-ID";
            config.Password = "TEST-API-KEY";
            instance = new Mock<IDefaultApi>();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<Mock<IDefaultApi>>(instance);
        }
        
        /// <summary>
        /// Test BuyAPhoneNumber
        /// </summary>
        [Fact]

        public void BuyAPhoneNumberTest()
        {
            string accountId = accountIdTestValue();
            BuyIncomingNumberRequest buyIncomingNumberRequest = buyIncomingNumberRequestTestValue();
            instance.Setup(m => m.BuyAPhoneNumber(accountId, buyIncomingNumberRequest)).Returns(incomingNumberResultTestValue());
            var response = instance.Object.BuyAPhoneNumber(accountId, buyIncomingNumberRequest);
            //Assert.IsType<IncomingNumberResult>(response);
            Assert.IsAssignableFrom<IncomingNumberResult>(response);
        }
        
        /// <summary>
        /// Test CreateAConference
        /// </summary>
        [Fact]

        public void CreateAConferenceTest()
        {
            string accountId = accountIdTestValue();
            CreateConferenceRequest createConferenceRequest = createConferenceRequestTestValue();
            instance.Setup(m => m.CreateAConference(accountId, createConferenceRequest)).Returns(conferenceResultTestValue());
            var response = instance.Object.CreateAConference(accountId, createConferenceRequest);
            //Assert.IsType<ConferenceResult>(response);
            Assert.IsAssignableFrom<ConferenceResult>(response);
        }
        
        /// <summary>
        /// Test CreateAQueue
        /// </summary>
        [Fact]

        public void CreateAQueueTest()
        {
            string accountId = accountIdTestValue();
            QueueRequest queueRequest = queueRequestTestValue();
            instance.Setup(m => m.CreateAQueue(accountId, queueRequest)).Returns(queueResultTestValue());
            var response = instance.Object.CreateAQueue(accountId, queueRequest);
            //Assert.IsType<QueueResult>(response);
            Assert.IsAssignableFrom<QueueResult>(response);
        }
        
        /// <summary>
        /// Test CreateAnApplication
        /// </summary>
        [Fact]

        public void CreateAnApplicationTest()
        {
            string accountId = accountIdTestValue();
            ApplicationRequest applicationRequest = applicationRequestTestValue();
            instance.Setup(m => m.CreateAnApplication(accountId, applicationRequest)).Returns(applicationResultTestValue());
            var response = instance.Object.CreateAnApplication(accountId, applicationRequest);
            //Assert.IsType<ApplicationResult>(response);
            Assert.IsAssignableFrom<ApplicationResult>(response);
        }
        
        /// <summary>
        /// Test DeleteARecording
        /// </summary>
        [Fact]

        public void DeleteARecordingTest()
        {
            string accountId = accountIdTestValue();
            string recordingId = recordingIdTestValue();
            instance.Setup(m => m.DeleteARecording(accountId, recordingId));
            instance.Object.DeleteARecording(accountId, recordingId);
        }
        
        /// <summary>
        /// Test DeleteAnApplication
        /// </summary>
        [Fact]

        public void DeleteAnApplicationTest()
        {
            string accountId = accountIdTestValue();
            string applicationId = applicationIdTestValue();
            instance.Setup(m => m.DeleteAnApplication(accountId, applicationId));
            instance.Object.DeleteAnApplication(accountId, applicationId);
        }
        
        /// <summary>
        /// Test DeleteAnIncomingNumber
        /// </summary>
        [Fact]

        public void DeleteAnIncomingNumberTest()
        {
            string accountId = accountIdTestValue();
            string phoneNumberId = phoneNumberIdTestValue();
            instance.Setup(m => m.DeleteAnIncomingNumber(accountId, phoneNumberId));
            instance.Object.DeleteAnIncomingNumber(accountId, phoneNumberId);
        }
        
        /// <summary>
        /// Test DequeueAMember
        /// </summary>
        [Fact]

        public void DequeueAMemberTest()
        {
            string accountId = accountIdTestValue();
            string queueId = queueIdTestValue();
            string callId = callIdTestValue();
            instance.Setup(m => m.DequeueAMember(accountId, queueId, callId)).Returns(queueMemberTestValue());
            var response = instance.Object.DequeueAMember(accountId, queueId, callId);
            //Assert.IsType<QueueMember>(response);
            Assert.IsAssignableFrom<QueueMember>(response);
        }
        
        /// <summary>
        /// Test DequeueHeadMember
        /// </summary>
        [Fact]

        public void DequeueHeadMemberTest()
        {
            string accountId = accountIdTestValue();
            string queueId = queueIdTestValue();
            instance.Setup(m => m.DequeueHeadMember(accountId, queueId)).Returns(queueMemberTestValue());
            var response = instance.Object.DequeueHeadMember(accountId, queueId);
            //Assert.IsType<QueueMember>(response);
            Assert.IsAssignableFrom<QueueMember>(response);
        }
        
        /// <summary>
        /// Test DownloadARecordingFile
        /// </summary>
        [Fact]

        public void DownloadARecordingFileTest()
        {
            string accountId = accountIdTestValue();
            string recordingId = recordingIdTestValue();
            instance.Setup(m => m.DownloadARecordingFile(accountId, recordingId)).Returns(systemIOStreamTestValue());
            var response = instance.Object.DownloadARecordingFile(accountId, recordingId);
            //Assert.IsType<System.IO.Stream>(response);
            Assert.IsAssignableFrom<System.IO.Stream>(response);
        }
        
        /// <summary>
        /// Test FilterLogs
        /// </summary>
        [Fact]

        public void FilterLogsTest()
        {
            string accountId = accountIdTestValue();
            FilterLogsRequest filterLogsRequest = filterLogsRequestTestValue();
            instance.Setup(m => m.FilterLogs(accountId, filterLogsRequest)).Returns(logListTestValue());
            var response = instance.Object.FilterLogs(accountId, filterLogsRequest);
            //Assert.IsType<LogList>(response);
            Assert.IsAssignableFrom<LogList>(response);
        }
        
        /// <summary>
        /// Test GetACall
        /// </summary>
        [Fact]

        public void GetACallTest()
        {
            string accountId = accountIdTestValue();
            string callId = callIdTestValue();
            instance.Setup(m => m.GetACall(accountId, callId)).Returns(callResultTestValue());
            var response = instance.Object.GetACall(accountId, callId);
            //Assert.IsType<CallResult>(response);
            Assert.IsAssignableFrom<CallResult>(response);
        }
        
        /// <summary>
        /// Test GetAConference
        /// </summary>
        [Fact]

        public void GetAConferenceTest()
        {
            string accountId = accountIdTestValue();
            string conferenceId = conferenceIdTestValue();
            instance.Setup(m => m.GetAConference(accountId, conferenceId)).Returns(conferenceResultTestValue());
            var response = instance.Object.GetAConference(accountId, conferenceId);
            //Assert.IsType<ConferenceResult>(response);
            Assert.IsAssignableFrom<ConferenceResult>(response);
        }
        
        /// <summary>
        /// Test GetAMember
        /// </summary>
        [Fact]

        public void GetAMemberTest()
        {
            string accountId = accountIdTestValue();
            string queueId = queueIdTestValue();
            string callId = callIdTestValue();
            instance.Setup(m => m.GetAMember(accountId, queueId, callId)).Returns(queueMemberTestValue());
            var response = instance.Object.GetAMember(accountId, queueId, callId);
            //Assert.IsType<QueueMember>(response);
            Assert.IsAssignableFrom<QueueMember>(response);
        }
        
        /// <summary>
        /// Test GetAParticipant
        /// </summary>
        [Fact]

        public void GetAParticipantTest()
        {
            string accountId = accountIdTestValue();
            string conferenceId = conferenceIdTestValue();
            string callId = callIdTestValue();
            instance.Setup(m => m.GetAParticipant(accountId, conferenceId, callId)).Returns(conferenceParticipantResultTestValue());
            var response = instance.Object.GetAParticipant(accountId, conferenceId, callId);
            //Assert.IsType<ConferenceParticipantResult>(response);
            Assert.IsAssignableFrom<ConferenceParticipantResult>(response);
        }
        
        /// <summary>
        /// Test GetAQueue
        /// </summary>
        [Fact]

        public void GetAQueueTest()
        {
            string accountId = accountIdTestValue();
            string queueId = queueIdTestValue();
            instance.Setup(m => m.GetAQueue(accountId, queueId)).Returns(queueResultTestValue());
            var response = instance.Object.GetAQueue(accountId, queueId);
            //Assert.IsType<QueueResult>(response);
            Assert.IsAssignableFrom<QueueResult>(response);
        }
        
        /// <summary>
        /// Test GetARecording
        /// </summary>
        [Fact]

        public void GetARecordingTest()
        {
            string accountId = accountIdTestValue();
            string recordingId = recordingIdTestValue();
            instance.Setup(m => m.GetARecording(accountId, recordingId)).Returns(recordingResultTestValue());
            var response = instance.Object.GetARecording(accountId, recordingId);
            //Assert.IsType<RecordingResult>(response);
            Assert.IsAssignableFrom<RecordingResult>(response);
        }
        
        /// <summary>
        /// Test GetAnAccount
        /// </summary>
        [Fact]

        public void GetAnAccountTest()
        {
            string accountId = accountIdTestValue();
            instance.Setup(m => m.GetAnAccount(accountId)).Returns(accountResultTestValue());
            var response = instance.Object.GetAnAccount(accountId);
            //Assert.IsType<AccountResult>(response);
            Assert.IsAssignableFrom<AccountResult>(response);
        }
        
        /// <summary>
        /// Test GetAnApplication
        /// </summary>
        [Fact]

        public void GetAnApplicationTest()
        {
            string accountId = accountIdTestValue();
            string applicationId = applicationIdTestValue();
            instance.Setup(m => m.GetAnApplication(accountId, applicationId)).Returns(applicationResultTestValue());
            var response = instance.Object.GetAnApplication(accountId, applicationId);
            //Assert.IsType<ApplicationResult>(response);
            Assert.IsAssignableFrom<ApplicationResult>(response);
        }
        
        /// <summary>
        /// Test GetAnIncomingNumber
        /// </summary>
        [Fact]

        public void GetAnIncomingNumberTest()
        {
            string accountId = accountIdTestValue();
            string phoneNumberId = phoneNumberIdTestValue();
            instance.Setup(m => m.GetAnIncomingNumber(accountId, phoneNumberId)).Returns(incomingNumberResultTestValue());
            var response = instance.Object.GetAnIncomingNumber(accountId, phoneNumberId);
            //Assert.IsType<IncomingNumberResult>(response);
            Assert.IsAssignableFrom<IncomingNumberResult>(response);
        }
        
        /// <summary>
        /// Test GetAnSmsMessage
        /// </summary>
        [Fact]

        public void GetAnSmsMessageTest()
        {
            string accountId = accountIdTestValue();
            string messageId = messageIdTestValue();
            instance.Setup(m => m.GetAnSmsMessage(accountId, messageId)).Returns(messageResultTestValue());
            var response = instance.Object.GetAnSmsMessage(accountId, messageId);
            //Assert.IsType<MessageResult>(response);
            Assert.IsAssignableFrom<MessageResult>(response);
        }
        
        /// <summary>
        /// Test GetHeadMember
        /// </summary>
        [Fact]

        public void GetHeadMemberTest()
        {
            string accountId = accountIdTestValue();
            string queueId = queueIdTestValue();
            instance.Setup(m => m.GetHeadMember(accountId, queueId)).Returns(queueMemberTestValue());
            var response = instance.Object.GetHeadMember(accountId, queueId);
            //Assert.IsType<QueueMember>(response);
            Assert.IsAssignableFrom<QueueMember>(response);
        }
        
        /// <summary>
        /// Test ListActiveQueues
        /// </summary>
        [Fact]

        public void ListActiveQueuesTest()
        {
            string accountId = accountIdTestValue();
            string alias = aliasTestValue();
            instance.Setup(m => m.ListActiveQueues(accountId, alias)).Returns(queueListTestValue());
            var response = instance.Object.ListActiveQueues(accountId, alias);
            //Assert.IsType<QueueList>(response);
            Assert.IsAssignableFrom<QueueList>(response);
        }
        
        /// <summary>
        /// Test ListAllAccountLogs
        /// </summary>
        [Fact]

        public void ListAllAccountLogsTest()
        {
            string accountId = accountIdTestValue();
            instance.Setup(m => m.ListAllAccountLogs(accountId)).Returns(logListTestValue());
            var response = instance.Object.ListAllAccountLogs(accountId);
            //Assert.IsType<LogList>(response);
            Assert.IsAssignableFrom<LogList>(response);
        }
        
        /// <summary>
        /// Test ListApplications
        /// </summary>
        [Fact]

        public void ListApplicationsTest()
        {
            string accountId = accountIdTestValue();
            string alias = aliasTestValue();
            instance.Setup(m => m.ListApplications(accountId, alias)).Returns(applicationListTestValue());
            var response = instance.Object.ListApplications(accountId, alias);
            //Assert.IsType<ApplicationList>(response);
            Assert.IsAssignableFrom<ApplicationList>(response);
        }
        
        /// <summary>
        /// Test ListAvailableNumbers
        /// </summary>
        [Fact]

        public void ListAvailableNumbersTest()
        {
            string phoneNumber = phoneNumberTestValue();
            string region = regionTestValue();
            string country = countryTestValue();
            bool? voiceEnabled = voiceEnabledTestValue();
            bool? smsEnabled = smsEnabledTestValue();
            bool? capabilitiesVoice = capabilitiesVoiceTestValue();
            bool? capabilitiesSms = capabilitiesSmsTestValue();
            bool? capabilitiesTollFree = capabilitiesTollFreeTestValue();
            bool? capabilitiesTenDLC = capabilitiesTenDLCTestValue();
            bool? capabilitiesShortCode = capabilitiesShortCodeTestValue();
            instance.Setup(m => m.ListAvailableNumbers(phoneNumber, region, country, voiceEnabled, smsEnabled, capabilitiesVoice, capabilitiesSms, capabilitiesTollFree, capabilitiesTenDLC, capabilitiesShortCode)).Returns(availableNumberListTestValue());
            var response = instance.Object.ListAvailableNumbers(phoneNumber, region, country, voiceEnabled, smsEnabled, capabilitiesVoice, capabilitiesSms, capabilitiesTollFree, capabilitiesTenDLC, capabilitiesShortCode);
            //Assert.IsType<AvailableNumberList>(response);
            Assert.IsAssignableFrom<AvailableNumberList>(response);
        }
        
        /// <summary>
        /// Test ListCallLogs
        /// </summary>
        [Fact]

        public void ListCallLogsTest()
        {
            string accountId = accountIdTestValue();
            string callId = callIdTestValue();
            instance.Setup(m => m.ListCallLogs(accountId, callId)).Returns(logListTestValue());
            var response = instance.Object.ListCallLogs(accountId, callId);
            //Assert.IsType<LogList>(response);
            Assert.IsAssignableFrom<LogList>(response);
        }
        
        /// <summary>
        /// Test ListCallRecordings
        /// </summary>
        [Fact]

        public void ListCallRecordingsTest()
        {
            string accountId = accountIdTestValue();
            string callId = callIdTestValue();
            string dateCreated = dateCreatedTestValue();
            instance.Setup(m => m.ListCallRecordings(accountId, callId, dateCreated)).Returns(recordingListTestValue());
            var response = instance.Object.ListCallRecordings(accountId, callId, dateCreated);
            //Assert.IsType<RecordingList>(response);
            Assert.IsAssignableFrom<RecordingList>(response);
        }
        
        /// <summary>
        /// Test ListCalls
        /// </summary>
        [Fact]

        public void ListCallsTest()
        {
            string accountId = accountIdTestValue();
            bool? active = activeTestValue();
            string to = toTestValue();
            string from = fromTestValue();
            string status = statusTestValue();
            string startTime = startTimeTestValue();
            string endTime = endTimeTestValue();
            string parentCallId = parentCallIdTestValue();
            instance.Setup(m => m.ListCalls(accountId, active, to, from, status, startTime, endTime, parentCallId)).Returns(callListTestValue());
            var response = instance.Object.ListCalls(accountId, active, to, from, status, startTime, endTime, parentCallId);
            //Assert.IsType<CallList>(response);
            Assert.IsAssignableFrom<CallList>(response);
        }
        
        /// <summary>
        /// Test ListConferences
        /// </summary>
        [Fact]

        public void ListConferencesTest()
        {
            string accountId = accountIdTestValue();
            string status = statusTestValue();
            string alias = aliasTestValue();
            string dateCreated = dateCreatedTestValue();
            string dateUpdated = dateUpdatedTestValue();
            instance.Setup(m => m.ListConferences(accountId, status, alias, dateCreated, dateUpdated)).Returns(conferenceListTestValue());
            var response = instance.Object.ListConferences(accountId, status, alias, dateCreated, dateUpdated);
            //Assert.IsType<ConferenceList>(response);
            Assert.IsAssignableFrom<ConferenceList>(response);
        }
        
        /// <summary>
        /// Test ListIncomingNumbers
        /// </summary>
        [Fact]

        public void ListIncomingNumbersTest()
        {
            string accountId = accountIdTestValue();
            string phoneNumber = phoneNumberTestValue();
            string alias = aliasTestValue();
            string region = regionTestValue();
            string country = countryTestValue();
            string applicationId = applicationIdTestValue();
            bool? hasApplication = hasApplicationTestValue();
            bool? voiceEnabled = voiceEnabledTestValue();
            bool? smsEnabled = smsEnabledTestValue();
            bool? capabilitiesVoice = capabilitiesVoiceTestValue();
            bool? capabilitiesSms = capabilitiesSmsTestValue();
            bool? capabilitiesTollFree = capabilitiesTollFreeTestValue();
            bool? capabilitiesTenDLC = capabilitiesTenDLCTestValue();
            bool? capabilitiesShortCode = capabilitiesShortCodeTestValue();
            instance.Setup(m => m.ListIncomingNumbers(accountId, phoneNumber, alias, region, country, applicationId, hasApplication, voiceEnabled, smsEnabled, capabilitiesVoice, capabilitiesSms, capabilitiesTollFree, capabilitiesTenDLC, capabilitiesShortCode)).Returns(incomingNumberListTestValue());
            var response = instance.Object.ListIncomingNumbers(accountId, phoneNumber, alias, region, country, applicationId, hasApplication, voiceEnabled, smsEnabled, capabilitiesVoice, capabilitiesSms, capabilitiesTollFree, capabilitiesTenDLC, capabilitiesShortCode);
            //Assert.IsType<IncomingNumberList>(response);
            Assert.IsAssignableFrom<IncomingNumberList>(response);
        }
        
        /// <summary>
        /// Test ListMembers
        /// </summary>
        [Fact]

        public void ListMembersTest()
        {
            string accountId = accountIdTestValue();
            string queueId = queueIdTestValue();
            instance.Setup(m => m.ListMembers(accountId, queueId)).Returns(queueMemberListTestValue());
            var response = instance.Object.ListMembers(accountId, queueId);
            //Assert.IsType<QueueMemberList>(response);
            Assert.IsAssignableFrom<QueueMemberList>(response);
        }
        
        /// <summary>
        /// Test ListParticipants
        /// </summary>
        [Fact]

        public void ListParticipantsTest()
        {
            string accountId = accountIdTestValue();
            string conferenceId = conferenceIdTestValue();
            bool? talk = talkTestValue();
            bool? listen = listenTestValue();
            instance.Setup(m => m.ListParticipants(accountId, conferenceId, talk, listen)).Returns(conferenceParticipantListTestValue());
            var response = instance.Object.ListParticipants(accountId, conferenceId, talk, listen);
            //Assert.IsType<ConferenceParticipantList>(response);
            Assert.IsAssignableFrom<ConferenceParticipantList>(response);
        }
        
        /// <summary>
        /// Test ListRecordings
        /// </summary>
        [Fact]

        public void ListRecordingsTest()
        {
            string accountId = accountIdTestValue();
            string callId = callIdTestValue();
            string conferenceId = conferenceIdTestValue();
            string dateCreated = dateCreatedTestValue();
            instance.Setup(m => m.ListRecordings(accountId, callId, conferenceId, dateCreated)).Returns(recordingListTestValue());
            var response = instance.Object.ListRecordings(accountId, callId, conferenceId, dateCreated);
            //Assert.IsType<RecordingList>(response);
            Assert.IsAssignableFrom<RecordingList>(response);
        }
        
        /// <summary>
        /// Test ListSmsMessages
        /// </summary>
        [Fact]

        public void ListSmsMessagesTest()
        {
            string accountId = accountIdTestValue();
            string to = toTestValue();
            string from = fromTestValue();
            string beginTime = beginTimeTestValue();
            string endTime = endTimeTestValue();
            string direction = directionTestValue();
            instance.Setup(m => m.ListSmsMessages(accountId, to, from, beginTime, endTime, direction)).Returns(messagesListTestValue());
            var response = instance.Object.ListSmsMessages(accountId, to, from, beginTime, endTime, direction);
            //Assert.IsType<MessagesList>(response);
            Assert.IsAssignableFrom<MessagesList>(response);
        }
        
        /// <summary>
        /// Test MakeACall
        /// </summary>
        [Fact]

        public void MakeACallTest()
        {
            string accountId = accountIdTestValue();
            MakeCallRequest makeCallRequest = makeCallRequestTestValue();
            instance.Setup(m => m.MakeACall(accountId, makeCallRequest)).Returns(callResultTestValue());
            var response = instance.Object.MakeACall(accountId, makeCallRequest);
            //Assert.IsType<CallResult>(response);
            Assert.IsAssignableFrom<CallResult>(response);
        }
        
        /// <summary>
        /// Test RemoveAParticipant
        /// </summary>
        [Fact]

        public void RemoveAParticipantTest()
        {
            string accountId = accountIdTestValue();
            string conferenceId = conferenceIdTestValue();
            string callId = callIdTestValue();
            instance.Setup(m => m.RemoveAParticipant(accountId, conferenceId, callId));
            instance.Object.RemoveAParticipant(accountId, conferenceId, callId);
        }
        
        /// <summary>
        /// Test SendAnSmsMessage
        /// </summary>
        [Fact]

        public void SendAnSmsMessageTest()
        {
            string accountId = accountIdTestValue();
            MessageRequest messageRequest = messageRequestTestValue();
            instance.Setup(m => m.SendAnSmsMessage(accountId, messageRequest)).Returns(messageResultTestValue());
            var response = instance.Object.SendAnSmsMessage(accountId, messageRequest);
            //Assert.IsType<MessageResult>(response);
            Assert.IsAssignableFrom<MessageResult>(response);
        }
        
        /// <summary>
        /// Test StreamARecordingFile
        /// </summary>
        [Fact]

        public void StreamARecordingFileTest()
        {
            string accountId = accountIdTestValue();
            string recordingId = recordingIdTestValue();
            instance.Setup(m => m.StreamARecordingFile(accountId, recordingId)).Returns(systemIOStreamTestValue());
            var response = instance.Object.StreamARecordingFile(accountId, recordingId);
            //Assert.IsType<System.IO.Stream>(response);
            Assert.IsAssignableFrom<System.IO.Stream>(response);
        }
        
        /// <summary>
        /// Test UpdateAConference
        /// </summary>
        [Fact]

        public void UpdateAConferenceTest()
        {
            string accountId = accountIdTestValue();
            string conferenceId = conferenceIdTestValue();
            UpdateConferenceRequest updateConferenceRequest = updateConferenceRequestTestValue();
            instance.Setup(m => m.UpdateAConference(accountId, conferenceId, updateConferenceRequest)).Returns(conferenceResultTestValue());
            var response = instance.Object.UpdateAConference(accountId, conferenceId, updateConferenceRequest);
            //Assert.IsType<ConferenceResult>(response);
            Assert.IsAssignableFrom<ConferenceResult>(response);
        }
        
        /// <summary>
        /// Test UpdateALiveCall
        /// </summary>
        [Fact]

        public void UpdateALiveCallTest()
        {
            string accountId = accountIdTestValue();
            string callId = callIdTestValue();
            UpdateCallRequest updateCallRequest = updateCallRequestTestValue();
            instance.Setup(m => m.UpdateALiveCall(accountId, callId, updateCallRequest));
            instance.Object.UpdateALiveCall(accountId, callId, updateCallRequest);
        }
        
        /// <summary>
        /// Test UpdateAParticipant
        /// </summary>
        [Fact]

        public void UpdateAParticipantTest()
        {
            string accountId = accountIdTestValue();
            string conferenceId = conferenceIdTestValue();
            string callId = callIdTestValue();
            UpdateConferenceParticipantRequest updateConferenceParticipantRequest = updateConferenceParticipantRequestTestValue();
            instance.Setup(m => m.UpdateAParticipant(accountId, conferenceId, callId, updateConferenceParticipantRequest)).Returns(conferenceParticipantResultTestValue());
            var response = instance.Object.UpdateAParticipant(accountId, conferenceId, callId, updateConferenceParticipantRequest);
            //Assert.IsType<ConferenceParticipantResult>(response);
            Assert.IsAssignableFrom<ConferenceParticipantResult>(response);
        }
        
        /// <summary>
        /// Test UpdateAQueue
        /// </summary>
        [Fact]

        public void UpdateAQueueTest()
        {
            string accountId = accountIdTestValue();
            string queueId = queueIdTestValue();
            QueueRequest queueRequest = queueRequestTestValue();
            instance.Setup(m => m.UpdateAQueue(accountId, queueId, queueRequest)).Returns(queueResultTestValue());
            var response = instance.Object.UpdateAQueue(accountId, queueId, queueRequest);
            //Assert.IsType<QueueResult>(response);
            Assert.IsAssignableFrom<QueueResult>(response);
        }
        
        /// <summary>
        /// Test UpdateAnAccount
        /// </summary>
        [Fact]

        public void UpdateAnAccountTest()
        {
            string accountId = accountIdTestValue();
            AccountRequest accountRequest = accountRequestTestValue();
            instance.Setup(m => m.UpdateAnAccount(accountId, accountRequest));
            instance.Object.UpdateAnAccount(accountId, accountRequest);
        }
        
        /// <summary>
        /// Test UpdateAnApplication
        /// </summary>
        [Fact]

        public void UpdateAnApplicationTest()
        {
            string accountId = accountIdTestValue();
            string applicationId = applicationIdTestValue();
            ApplicationRequest applicationRequest = applicationRequestTestValue();
            instance.Setup(m => m.UpdateAnApplication(accountId, applicationId, applicationRequest)).Returns(applicationResultTestValue());
            var response = instance.Object.UpdateAnApplication(accountId, applicationId, applicationRequest);
            //Assert.IsType<ApplicationResult>(response);
            Assert.IsAssignableFrom<ApplicationResult>(response);
        }
        
        /// <summary>
        /// Test UpdateAnIncomingNumber
        /// </summary>
        [Fact]

        public void UpdateAnIncomingNumberTest()
        {
            string accountId = accountIdTestValue();
            string phoneNumberId = phoneNumberIdTestValue();
            IncomingNumberRequest incomingNumberRequest = incomingNumberRequestTestValue();
            instance.Setup(m => m.UpdateAnIncomingNumber(accountId, phoneNumberId, incomingNumberRequest)).Returns(incomingNumberResultTestValue());
            var response = instance.Object.UpdateAnIncomingNumber(accountId, phoneNumberId, incomingNumberRequest);
            //Assert.IsType<IncomingNumberResult>(response);
            Assert.IsAssignableFrom<IncomingNumberResult>(response);
        }

        private string accountIdTestValue()
        {
            return "AC0000000000000000000000000000000000000000";
        }
        
        private string applicationIdTestValue()
        {
            return "AP0000000000000000000000000000000000000000";
        }

        private string recordingIdTestValue()
        {
            return "RC0000000000000000000000000000000000000000";
        }

        private string callIdTestValue()
        {
            return "CA0000000000000000000000000000000000000000";
        }

        private string phoneNumberTestValue()
        {
            return "+13124567890";
        }

        private string phoneNumberIdTestValue()
        {
            return "PN0000000000000000000000000000000000000000";
        }

        private string queueIdTestValue()
        {
            return "QU0000000000000000000000000000000000000000";
        }

        private string conferenceIdTestValue()
        {
            return "CN0000000000000000000000000000000000000000";
        }

        private string messageIdTestValue()
        {
            return "ME0000000000000000000000000000000000000000";
        }

        private string aliasTestValue()
        {
            return "TEST-ALIAS";
        }

        private string dateCreatedTestValue()
        {
            return "Mon, 15 Jun 2020 20:20:20 GMT";
        }

        private string dateUpdatedTestValue()
        {
            return "Wed, 17, Jun 2020 20:20:20 GMT";
        }

        private BuyIncomingNumberRequest buyIncomingNumberRequestTestValue()
        {
            return new BuyIncomingNumberRequest("+18001234567", "TEST-ALIAS", "TEST-APP");
        }

        private IncomingNumberRequest incomingNumberRequestTestValue()
        {
            return new IncomingNumberRequest(applicationIdTestValue(), aliasTestValue());
        }
        
        private IncomingNumberResult incomingNumberResultTestValue()
        {
            Capabilities capabilities = new Capabilities(true, true, true, true, false);
            return new IncomingNumberResult("example.com", "Mon, 15 Jun 2020 20:20:20 GMT", "Wed, 17 Jun 2020 20:20:20 GMT", 0, capabilities);
        }

        private MakeCallRequest makeCallRequestTestValue()
        {
            return new MakeCallRequest("+18001234567", "+18003214567", "TEST-APP");
        }

        private CreateConferenceRequest createConferenceRequestTestValue()
        {
            return new CreateConferenceRequest("TEST-CONF", CreateConferenceRequest.PlayBeepEnum.ALWAYS, true);
        }

        private ConferenceResult conferenceResultTestValue()
        {
            return new ConferenceResult();
        }

        private QueueRequest queueRequestTestValue()
        {
            return new QueueRequest("TEST-QUEUE");
        }
        
        private QueueMember queueMemberTestValue()
        {
            return new QueueMember("example.com", callIdTestValue(), 0, 0, "Mon, 15 Jun 2009 20:45:30 GMT");
        
        }
        
        private QueueResult queueResultTestValue()
        {
            return new QueueResult("example.com", "Mon, 15 Jun 2020 20:20:20 GMT", 
                "Wed, 17 Jun 2020 20:20:20 GMT", 0, accountIdTestValue(), 
                queueIdTestValue(), "TEST-QUEUE", 100, "0", "0", "0");
        }

        private ApplicationRequest applicationRequestTestValue()
        {
            return new ApplicationRequest("TEST-APP", "voice.com", "voicefallback.com", "callconnect.com", "status.com", "sms.com", "smsfallback.com");
        }

        private ApplicationResult applicationResultTestValue()
        {
            return new ApplicationResult("example.com", "Mon, 15 Jun 2009 20:45:30 GMT", "Wed, 17 Jun 2009 20:45:30 GMT", 3,
                accountIdTestValue(), applicationIdTestValue(), "TEST-APP", "voice.com", "voicefallback.com", "callconnect.com",
                "status.com", "sms.com", "smsfallback.com");
        }

        private string regionTestValue()
        {
            return "IL";
        }

        private string countryTestValue()
        {
            return "US";
        }

        private bool voiceEnabledTestValue()
        {
            return true;
        }

        private bool smsEnabledTestValue()
        {
            return true;
        }

        private bool capabilitiesVoiceTestValue()
        {
            return true;
        }

        private bool capabilitiesSmsTestValue()
        {
            return true;
        }
        
        private bool capabilitiesTollFreeTestValue()
        {
            return false;
        }
        
        private bool capabilitiesTenDLCTestValue()
        {
            return true;
        }
        
        private bool capabilitiesShortCodeTestValue()
        {
            return true;
        }

        private AvailableNumberList availableNumberListTestValue()
        {
            List<AvailableNumber> numList = new List<AvailableNumber>();
            Capabilities capabilities = new Capabilities(true, true, true, true, false);
            AvailableNumber num1 = new AvailableNumber(capabilities, "TEST-CAMPAIGN", "+18003608245", true, true, "US", "IL");
            AvailableNumber num2 = new AvailableNumber(capabilities, "TEST-CAMPAIGN", phoneNumberTestValue(), true, true, "US", "IL");
            numList.Add(num1);
            numList.Add(num2);
            return new AvailableNumberList(2, 1, 1, 1, 1, 10, "example.com", numList);
        }

        private FilterLogsRequest filterLogsRequestTestValue()
        {
            return new FilterLogsRequest("test");
        }

        private LogList logListTestValue()
        {
            return new LogList();
        }

        private CallResult callResultTestValue()
        {
            return new CallResult("example.com", dateCreatedTestValue(), "Mon, 15 Jun 2020 20:45:32 GMT", 
                1, callIdTestValue(), null, accountIdTestValue(), phoneNumberTestValue(), "+13124567890",
                null, CallResult.StatusEnum.IN_PROGRESS, dateCreatedTestValue(), dateCreatedTestValue(), null);
        }
        
        private ConferenceParticipantResult conferenceParticipantResultTestValue()
        {
            return new ConferenceParticipantResult("example.com", dateCreatedTestValue(), null, 1, 
                accountIdTestValue(), conferenceIdTestValue(), callIdTestValue(), true, true, true);
        }
        
        private RecordingResult recordingResultTestValue()
        {
            return new RecordingResult("example.com", dateCreatedTestValue(), null, 1, recordingIdTestValue(), accountIdTestValue(), callIdTestValue(), 10);
        }

        private AccountResult accountResultTestValue()
        {
            return new AccountResult("example.com", dateCreatedTestValue(), null, 1, accountIdTestValue(), "TEST-API-KEY", "TEST-ALIAS");
        }

        private MessageResult messageResultTestValue()
        {
            return new MessageResult("example.com", dateCreatedTestValue(), null, 1, accountIdTestValue(), messageIdTestValue(), MessageResult.StatusEnum.SENT,
                phoneNumberTestValue(), "+13121113456", "Test text message", "outbound");
        }

        public QueueList queueListTestValue()
        {
            List<QueueResult> queueResults = new List<QueueResult>();
            queueResults.Add(queueResultTestValue());
            return new QueueList(1, 1, 1, 1, 1, 10, null, queueResults);
        }

        private ApplicationList applicationListTestValue()
        {
            List<ApplicationResult> applicationResults = new List<ApplicationResult>();
            applicationResults.Add(applicationResultTestValue());
            return new ApplicationList(1, 1, 1, 1, 1, 10, null, applicationResults);
        }
        
        private RecordingList recordingListTestValue()
        {
            List<RecordingResult> recordingList = new List<RecordingResult>();
            recordingList.Add(recordingResultTestValue());
            RecordingResult rec2 = recordingResultTestValue();
            rec2.RecordingId = "RC00000000000000000000000000000000000000001";
            recordingList.Add(rec2);
            return new RecordingList(2, 1, 1, 1, 1, 10, null, recordingList);
        }

        private ConferenceList conferenceListTestValue()
        {
            List<ConferenceResult> conferences = new List<ConferenceResult>();
            conferences.Add(conferenceResultTestValue());
            return new ConferenceList(1, 1, 1, 1, 1, 10, null, conferences);
        }

        private bool activeTestValue()
        {
            return true;
        }

        private string toTestValue()
        {
            return phoneNumberTestValue();
        }

        private string fromTestValue()
        {
            return "+18009991234";
        }

        private string statusTestValue()
        {
            return "completed";
        }

        private string startTimeTestValue()
        {
            return "2022-12-12 01:01:01";
        }

        private string endTimeTestValue()
        {
            return "2022-12-12 02:02:02";
        }

        private string parentCallIdTestValue()
        {
            return callIdTestValue();
        }

        private CallList callListTestValue()
        {
            List<CallResult> calls = new List<CallResult>();
            calls.Add(callResultTestValue());
            return new CallList(1, 1, 1, 1, 1, 10, null, calls);
        }

        private bool hasApplicationTestValue()
        {
            return false;
        }

        private IncomingNumberList incomingNumberListTestValue()
        {
            List<IncomingNumberResult> incomingNumbers = new List<IncomingNumberResult>();
            incomingNumbers.Add(incomingNumberResultTestValue());
            return new IncomingNumberList(1, 1, 1, 1, 1, 10, null, incomingNumbers);
        }

        private QueueMemberList queueMemberListTestValue()
        {
            List<QueueMember> queues = new List<QueueMember>();
            queues.Add(queueMemberTestValue());
            return new QueueMemberList(1, 1, 1, 1, 1, 10, null, queues);
        }

        private bool talkTestValue() { return true; }

        private bool listenTestValue() { return true; }

        private ConferenceParticipantList conferenceParticipantListTestValue()
        {
            List<ConferenceParticipantResult> conferences = new List<ConferenceParticipantResult>();
            conferences.Add(conferenceParticipantResultTestValue());
            return new ConferenceParticipantList(1,1,1,1,1,10,null,conferences);
        }

        private string beginTimeTestValue() { return "2022-12-12 01:01:01:01"; }
        
        private string directionTestValue() { return "outbound"; }

        private MessagesList messagesListTestValue()
        {
            List<MessageResult> messages = new List<MessageResult>();
            messages.Add(messageResultTestValue());
            return new MessagesList(1,1,1,1,1,10,null,messages);
        }

        private UpdateConferenceRequest updateConferenceRequestTestValue()
        {
            return new UpdateConferenceRequest("TEST-CONF", UpdateConferenceRequest.PlayBeepEnum.ALWAYS);
        }

        private UpdateCallRequest updateCallRequestTestValue()
        {
            return new UpdateCallRequest(UpdateCallRequest.StatusEnum.COMPLETED);
        }

        private UpdateConferenceParticipantRequest updateConferenceParticipantRequestTestValue()
        {
            return new UpdateConferenceParticipantRequest(true, true);
        }

        private AccountRequest accountRequestTestValue()
        {
            return new AccountRequest("TEST-ACCOUNT", null);
        }

        private MessageRequest messageRequestTestValue()
        {
            return new MessageRequest("example.com", dateCreatedTestValue(), dateUpdatedTestValue(), 2, phoneNumberTestValue(), "+13124445555",
               "test text message", null, accountIdTestValue());
        }

        private System.IO.Stream systemIOStreamTestValue()
        {
            System.IO.MemoryStream memStream = new System.IO.MemoryStream();
            System.IO.Stream stream = memStream;
            return stream;
        }
    }
}
