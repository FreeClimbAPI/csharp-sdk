/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Enums
{
    /// <summary>
    /// Defines GetSpeechReason
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum GetSpeechReason
    {
        /// <summary>
        /// Enum ERROR for value: error
        /// </summary>
        [EnumMember(Value = "error")]
        ERROR = 1,

        /// <summary>
        /// Enum HANGUP for value: hangup
        /// </summary>
        [EnumMember(Value = "hangup")]
        HANGUP = 2,

        /// <summary>
        /// Enum DIGIT for value: digit
        /// </summary>
        [EnumMember(Value = "digit")]
        DIGIT = 3,

        /// <summary>
        /// Enum NO_INPUT for value: noInput
        /// </summary>
        [EnumMember(Value = "noInput")]
        NO_INPUT = 4,

        /// <summary>
        /// Enum NO_MATCH for value: noMatch
        /// </summary>
        [EnumMember(Value = "noMatch")]
        NO_MATCH = 5,

        /// <summary>
        /// Enum RECOGNITION for value: recognition
        /// </summary>
        [EnumMember(Value = "recognition")]
        RECOGNITION = 6,
    }

    /// <summary>
    /// Converts <see cref="GetSpeechReason"/> to and from the JSON value
    /// </summary>
    public static class GetSpeechReasonValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="GetSpeechReason"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static GetSpeechReason FromString(string value)
        {
            if (value.Equals("error"))
                return GetSpeechReason.ERROR;

            if (value.Equals("hangup"))
                return GetSpeechReason.HANGUP;

            if (value.Equals("digit"))
                return GetSpeechReason.DIGIT;

            if (value.Equals("noInput"))
                return GetSpeechReason.NO_INPUT;

            if (value.Equals("noMatch"))
                return GetSpeechReason.NO_MATCH;

            if (value.Equals("recognition"))
                return GetSpeechReason.RECOGNITION;

            throw new NotImplementedException(
                $"Could not convert value to type GetSpeechReason: '{value}'"
            );
        }

        /// <summary>
        /// Parses a given value to <see cref="GetSpeechReason"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static GetSpeechReason? FromStringOrDefault(string value)
        {
            if (value.Equals("error"))
                return GetSpeechReason.ERROR;

            if (value.Equals("hangup"))
                return GetSpeechReason.HANGUP;

            if (value.Equals("digit"))
                return GetSpeechReason.DIGIT;

            if (value.Equals("noInput"))
                return GetSpeechReason.NO_INPUT;

            if (value.Equals("noMatch"))
                return GetSpeechReason.NO_MATCH;

            if (value.Equals("recognition"))
                return GetSpeechReason.RECOGNITION;

            return null;
        }
    }
}
