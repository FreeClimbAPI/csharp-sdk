/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Enums
{
    /// <summary>
    /// This field explains how the GetDigits action ended. The value is one of the below: •finishKey - The finish key as specified had been pressed by the caller. Digit string has all keys up to, but not including, the finish key.  •timeout - The timeout limit was reached prior to any other criteria being met. If any digits were collected, they will be included.  •maxDigits - The maximum number of digits was reached and digit collection ended.  •tone - Answering machine or fax tone detection occurred, interrupting digit collection. Any digits received up to this point are included in this webhook.
    /// </summary>
    /// <value>This field explains how the GetDigits action ended. The value is one of the below: •finishKey - The finish key as specified had been pressed by the caller. Digit string has all keys up to, but not including, the finish key.  •timeout - The timeout limit was reached prior to any other criteria being met. If any digits were collected, they will be included.  •maxDigits - The maximum number of digits was reached and digit collection ended.  •tone - Answering machine or fax tone detection occurred, interrupting digit collection. Any digits received up to this point are included in this webhook.</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum GetDigitsReason
    {
        /// <summary>
        /// Enum FINISH_KEY for value: finishKey
        /// </summary>
        [EnumMember(Value = "finishKey")]
        FINISH_KEY = 1,

        /// <summary>
        /// Enum TIMEOUT for value: timeout
        /// </summary>
        [EnumMember(Value = "timeout")]
        TIMEOUT = 2,

        /// <summary>
        /// Enum MAX_DIGITS for value: maxDigits
        /// </summary>
        [EnumMember(Value = "maxDigits")]
        MAX_DIGITS = 3,

        /// <summary>
        /// Enum TONE for value: tone
        /// </summary>
        [EnumMember(Value = "tone")]
        TONE = 4,
    }

    /// <summary>
    /// Converts <see cref="GetDigitsReason"/> to and from the JSON value
    /// </summary>
    public static class GetDigitsReasonValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="GetDigitsReason"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static GetDigitsReason FromString(string value)
        {
            if (value.Equals("finishKey"))
                return GetDigitsReason.FINISH_KEY;

            if (value.Equals("timeout"))
                return GetDigitsReason.TIMEOUT;

            if (value.Equals("maxDigits"))
                return GetDigitsReason.MAX_DIGITS;

            if (value.Equals("tone"))
                return GetDigitsReason.TONE;

            throw new NotImplementedException(
                $"Could not convert value to type GetDigitsReason: '{value}'"
            );
        }

        /// <summary>
        /// Parses a given value to <see cref="GetDigitsReason"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static GetDigitsReason? FromStringOrDefault(string value)
        {
            if (value.Equals("finishKey"))
                return GetDigitsReason.FINISH_KEY;

            if (value.Equals("timeout"))
                return GetDigitsReason.TIMEOUT;

            if (value.Equals("maxDigits"))
                return GetDigitsReason.MAX_DIGITS;

            if (value.Equals("tone"))
                return GetDigitsReason.TONE;

            return null;
        }
    }
}
