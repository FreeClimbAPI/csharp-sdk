/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Enums
{
    /// <summary>
    /// The culture to use for the TTS. The complete list of valid values for the culture attribute is shown below.
    /// </summary>
    /// <value>The culture to use for the TTS. The complete list of valid values for the culture attribute is shown below.</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum SayStandardCulture
    {
        /// <summary>
        /// Enum CA_ES for value: ca-ES
        /// </summary>
        [EnumMember(Value = "ca-ES")]
        CA_ES = 1,

        /// <summary>
        /// Enum DA_DK for value: da-DK
        /// </summary>
        [EnumMember(Value = "da-DK")]
        DA_DK = 2,

        /// <summary>
        /// Enum DE_DE for value: de-DE
        /// </summary>
        [EnumMember(Value = "de-DE")]
        DE_DE = 3,

        /// <summary>
        /// Enum EN_AU for value: en-AU
        /// </summary>
        [EnumMember(Value = "en-AU")]
        EN_AU = 4,

        /// <summary>
        /// Enum EN_CA for value: en-CA
        /// </summary>
        [EnumMember(Value = "en-CA")]
        EN_CA = 5,

        /// <summary>
        /// Enum EN_GB for value: en-GB
        /// </summary>
        [EnumMember(Value = "en-GB")]
        EN_GB = 6,

        /// <summary>
        /// Enum EN_IN for value: en-IN
        /// </summary>
        [EnumMember(Value = "en-IN")]
        EN_IN = 7,

        /// <summary>
        /// Enum EN_US for value: en-US
        /// </summary>
        [EnumMember(Value = "en-US")]
        EN_US = 8,

        /// <summary>
        /// Enum ES_ES for value: es-ES
        /// </summary>
        [EnumMember(Value = "es-ES")]
        ES_ES = 9,

        /// <summary>
        /// Enum ES_MX for value: es-MX
        /// </summary>
        [EnumMember(Value = "es-MX")]
        ES_MX = 10,

        /// <summary>
        /// Enum FI_FI for value: fi-FI
        /// </summary>
        [EnumMember(Value = "fi-FI")]
        FI_FI = 11,

        /// <summary>
        /// Enum FR_CA for value: fr-CA
        /// </summary>
        [EnumMember(Value = "fr-CA")]
        FR_CA = 12,

        /// <summary>
        /// Enum FR_FR for value: fr-FR
        /// </summary>
        [EnumMember(Value = "fr-FR")]
        FR_FR = 13,

        /// <summary>
        /// Enum IT_IT for value: it-IT
        /// </summary>
        [EnumMember(Value = "it-IT")]
        IT_IT = 14,

        /// <summary>
        /// Enum JA_JP for value: ja-JP
        /// </summary>
        [EnumMember(Value = "ja-JP")]
        JA_JP = 15,

        /// <summary>
        /// Enum KO_KR for value: ko-KR
        /// </summary>
        [EnumMember(Value = "ko-KR")]
        KO_KR = 16,

        /// <summary>
        /// Enum NB_NO for value: nb-NO
        /// </summary>
        [EnumMember(Value = "nb-NO")]
        NB_NO = 17,

        /// <summary>
        /// Enum NL_NL for value: nl-NL
        /// </summary>
        [EnumMember(Value = "nl-NL")]
        NL_NL = 18,

        /// <summary>
        /// Enum PL_PL for value: pl-PL
        /// </summary>
        [EnumMember(Value = "pl-PL")]
        PL_PL = 19,

        /// <summary>
        /// Enum PT_BR for value: pt-BR
        /// </summary>
        [EnumMember(Value = "pt-BR")]
        PT_BR = 20,

        /// <summary>
        /// Enum PT_PT for value: pt-PT
        /// </summary>
        [EnumMember(Value = "pt-PT")]
        PT_PT = 21,

        /// <summary>
        /// Enum RU_RU for value: ru-RU
        /// </summary>
        [EnumMember(Value = "ru-RU")]
        RU_RU = 22,

        /// <summary>
        /// Enum SV_SE for value: sv-SE
        /// </summary>
        [EnumMember(Value = "sv-SE")]
        SV_SE = 23,

        /// <summary>
        /// Enum ZH_CN for value: zh-CN
        /// </summary>
        [EnumMember(Value = "zh-CN")]
        ZH_CN = 24,

        /// <summary>
        /// Enum ZH_HK for value: zh-HK
        /// </summary>
        [EnumMember(Value = "zh-HK")]
        ZH_HK = 25,

        /// <summary>
        /// Enum ZH_TW for value: zh-TW
        /// </summary>
        [EnumMember(Value = "zh-TW")]
        ZH_TW = 26,
    }

    /// <summary>
    /// Converts <see cref="SayStandardCulture"/> to and from the JSON value
    /// </summary>
    public static class SayStandardCultureValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="SayStandardCulture"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SayStandardCulture FromString(string value)
        {
            if (value.Equals("ca-ES"))
                return SayStandardCulture.CA_ES;

            if (value.Equals("da-DK"))
                return SayStandardCulture.DA_DK;

            if (value.Equals("de-DE"))
                return SayStandardCulture.DE_DE;

            if (value.Equals("en-AU"))
                return SayStandardCulture.EN_AU;

            if (value.Equals("en-CA"))
                return SayStandardCulture.EN_CA;

            if (value.Equals("en-GB"))
                return SayStandardCulture.EN_GB;

            if (value.Equals("en-IN"))
                return SayStandardCulture.EN_IN;

            if (value.Equals("en-US"))
                return SayStandardCulture.EN_US;

            if (value.Equals("es-ES"))
                return SayStandardCulture.ES_ES;

            if (value.Equals("es-MX"))
                return SayStandardCulture.ES_MX;

            if (value.Equals("fi-FI"))
                return SayStandardCulture.FI_FI;

            if (value.Equals("fr-CA"))
                return SayStandardCulture.FR_CA;

            if (value.Equals("fr-FR"))
                return SayStandardCulture.FR_FR;

            if (value.Equals("it-IT"))
                return SayStandardCulture.IT_IT;

            if (value.Equals("ja-JP"))
                return SayStandardCulture.JA_JP;

            if (value.Equals("ko-KR"))
                return SayStandardCulture.KO_KR;

            if (value.Equals("nb-NO"))
                return SayStandardCulture.NB_NO;

            if (value.Equals("nl-NL"))
                return SayStandardCulture.NL_NL;

            if (value.Equals("pl-PL"))
                return SayStandardCulture.PL_PL;

            if (value.Equals("pt-BR"))
                return SayStandardCulture.PT_BR;

            if (value.Equals("pt-PT"))
                return SayStandardCulture.PT_PT;

            if (value.Equals("ru-RU"))
                return SayStandardCulture.RU_RU;

            if (value.Equals("sv-SE"))
                return SayStandardCulture.SV_SE;

            if (value.Equals("zh-CN"))
                return SayStandardCulture.ZH_CN;

            if (value.Equals("zh-HK"))
                return SayStandardCulture.ZH_HK;

            if (value.Equals("zh-TW"))
                return SayStandardCulture.ZH_TW;

            throw new NotImplementedException(
                $"Could not convert value to type SayStandardCulture: '{value}'"
            );
        }

        /// <summary>
        /// Parses a given value to <see cref="SayStandardCulture"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SayStandardCulture? FromStringOrDefault(string value)
        {
            if (value.Equals("ca-ES"))
                return SayStandardCulture.CA_ES;

            if (value.Equals("da-DK"))
                return SayStandardCulture.DA_DK;

            if (value.Equals("de-DE"))
                return SayStandardCulture.DE_DE;

            if (value.Equals("en-AU"))
                return SayStandardCulture.EN_AU;

            if (value.Equals("en-CA"))
                return SayStandardCulture.EN_CA;

            if (value.Equals("en-GB"))
                return SayStandardCulture.EN_GB;

            if (value.Equals("en-IN"))
                return SayStandardCulture.EN_IN;

            if (value.Equals("en-US"))
                return SayStandardCulture.EN_US;

            if (value.Equals("es-ES"))
                return SayStandardCulture.ES_ES;

            if (value.Equals("es-MX"))
                return SayStandardCulture.ES_MX;

            if (value.Equals("fi-FI"))
                return SayStandardCulture.FI_FI;

            if (value.Equals("fr-CA"))
                return SayStandardCulture.FR_CA;

            if (value.Equals("fr-FR"))
                return SayStandardCulture.FR_FR;

            if (value.Equals("it-IT"))
                return SayStandardCulture.IT_IT;

            if (value.Equals("ja-JP"))
                return SayStandardCulture.JA_JP;

            if (value.Equals("ko-KR"))
                return SayStandardCulture.KO_KR;

            if (value.Equals("nb-NO"))
                return SayStandardCulture.NB_NO;

            if (value.Equals("nl-NL"))
                return SayStandardCulture.NL_NL;

            if (value.Equals("pl-PL"))
                return SayStandardCulture.PL_PL;

            if (value.Equals("pt-BR"))
                return SayStandardCulture.PT_BR;

            if (value.Equals("pt-PT"))
                return SayStandardCulture.PT_PT;

            if (value.Equals("ru-RU"))
                return SayStandardCulture.RU_RU;

            if (value.Equals("sv-SE"))
                return SayStandardCulture.SV_SE;

            if (value.Equals("zh-CN"))
                return SayStandardCulture.ZH_CN;

            if (value.Equals("zh-HK"))
                return SayStandardCulture.ZH_HK;

            if (value.Equals("zh-TW"))
                return SayStandardCulture.ZH_TW;

            return null;
        }
    }
}
