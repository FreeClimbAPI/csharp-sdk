/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Enums
{
    /// <summary>
    /// The status of the Conference. One of: creating, empty, populated, inProgress, or terminated.
    /// </summary>
    /// <value>The status of the Conference. One of: creating, empty, populated, inProgress, or terminated.</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ConferenceStatus
    {
        /// <summary>
        /// Enum EMPTY for value: empty
        /// </summary>
        [EnumMember(Value = "empty")]
        EMPTY = 1,

        /// <summary>
        /// Enum POPULATED for value: populated
        /// </summary>
        [EnumMember(Value = "populated")]
        POPULATED = 2,

        /// <summary>
        /// Enum IN_PROGRESS for value: inProgress
        /// </summary>
        [EnumMember(Value = "inProgress")]
        IN_PROGRESS = 3,

        /// <summary>
        /// Enum TERMINATED for value: terminated
        /// </summary>
        [EnumMember(Value = "terminated")]
        TERMINATED = 4,
    }

    /// <summary>
    /// Converts <see cref="ConferenceStatus"/> to and from the JSON value
    /// </summary>
    public static class ConferenceStatusValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ConferenceStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ConferenceStatus FromString(string value)
        {
            if (value.Equals("empty"))
                return ConferenceStatus.EMPTY;

            if (value.Equals("populated"))
                return ConferenceStatus.POPULATED;

            if (value.Equals("inProgress"))
                return ConferenceStatus.IN_PROGRESS;

            if (value.Equals("terminated"))
                return ConferenceStatus.TERMINATED;

            throw new NotImplementedException(
                $"Could not convert value to type ConferenceStatus: '{value}'"
            );
        }

        /// <summary>
        /// Parses a given value to <see cref="ConferenceStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ConferenceStatus? FromStringOrDefault(string value)
        {
            if (value.Equals("empty"))
                return ConferenceStatus.EMPTY;

            if (value.Equals("populated"))
                return ConferenceStatus.POPULATED;

            if (value.Equals("inProgress"))
                return ConferenceStatus.IN_PROGRESS;

            if (value.Equals("terminated"))
                return ConferenceStatus.TERMINATED;

            return null;
        }
    }
}
