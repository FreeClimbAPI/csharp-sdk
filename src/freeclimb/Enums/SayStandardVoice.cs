/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Enums
{
    /// <summary>
    /// The voice to use for the TTS. The complete list of valid values for the voice attribute is shown below.
    /// </summary>
    /// <value>The voice to use for the TTS. The complete list of valid values for the voice attribute is shown below.</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum SayStandardVoice
    {
        /// <summary>
        /// Enum HERENA for value: Herena
        /// </summary>
        [EnumMember(Value = "Herena")]
        HERENA = 1,

        /// <summary>
        /// Enum HELLE for value: Helle
        /// </summary>
        [EnumMember(Value = "Helle")]
        HELLE = 2,

        /// <summary>
        /// Enum HEDDA for value: Hedda
        /// </summary>
        [EnumMember(Value = "Hedda")]
        HEDDA = 3,

        /// <summary>
        /// Enum HAYLEY for value: Hayley
        /// </summary>
        [EnumMember(Value = "Hayley")]
        HAYLEY = 4,

        /// <summary>
        /// Enum HEATHER for value: Heather
        /// </summary>
        [EnumMember(Value = "Heather")]
        HEATHER = 5,

        /// <summary>
        /// Enum HAZEL for value: Hazel
        /// </summary>
        [EnumMember(Value = "Hazel")]
        HAZEL = 6,

        /// <summary>
        /// Enum HEERA for value: Heera
        /// </summary>
        [EnumMember(Value = "Heera")]
        HEERA = 7,

        /// <summary>
        /// Enum HELEN for value: Helen
        /// </summary>
        [EnumMember(Value = "Helen")]
        HELEN = 8,

        /// <summary>
        /// Enum ZIRA_PRO for value: ZiraPro
        /// </summary>
        [EnumMember(Value = "ZiraPro")]
        ZIRA_PRO = 9,

        /// <summary>
        /// Enum HELENA for value: Helena
        /// </summary>
        [EnumMember(Value = "Helena")]
        HELENA = 10,

        /// <summary>
        /// Enum HILDA for value: Hilda
        /// </summary>
        [EnumMember(Value = "Hilda")]
        HILDA = 11,

        /// <summary>
        /// Enum HEIDI for value: Heidi
        /// </summary>
        [EnumMember(Value = "Heidi")]
        HEIDI = 12,

        /// <summary>
        /// Enum HARMONIE for value: Harmonie
        /// </summary>
        [EnumMember(Value = "Harmonie")]
        HARMONIE = 13,

        /// <summary>
        /// Enum HORTENSE for value: Hortense
        /// </summary>
        [EnumMember(Value = "Hortense")]
        HORTENSE = 14,

        /// <summary>
        /// Enum LUCIA for value: Lucia
        /// </summary>
        [EnumMember(Value = "Lucia")]
        LUCIA = 15,

        /// <summary>
        /// Enum HARKUA for value: Harkua
        /// </summary>
        [EnumMember(Value = "Harkua")]
        HARKUA = 16,

        /// <summary>
        /// Enum HEAMI for value: Heami
        /// </summary>
        [EnumMember(Value = "Heami")]
        HEAMI = 17,

        /// <summary>
        /// Enum HULDA for value: Hulda
        /// </summary>
        [EnumMember(Value = "Hulda")]
        HULDA = 18,

        /// <summary>
        /// Enum HANNA for value: Hanna
        /// </summary>
        [EnumMember(Value = "Hanna")]
        HANNA = 19,

        /// <summary>
        /// Enum PAULINA for value: Paulina
        /// </summary>
        [EnumMember(Value = "Paulina")]
        PAULINA = 20,

        /// <summary>
        /// Enum HELOSIA for value: Helosia
        /// </summary>
        [EnumMember(Value = "Helosia")]
        HELOSIA = 21,

        /// <summary>
        /// Enum HELIA for value: Helia
        /// </summary>
        [EnumMember(Value = "Helia")]
        HELIA = 22,

        /// <summary>
        /// Enum ELENA for value: Elena
        /// </summary>
        [EnumMember(Value = "Elena")]
        ELENA = 23,

        /// <summary>
        /// Enum HEDVIG for value: Hedvig
        /// </summary>
        [EnumMember(Value = "Hedvig")]
        HEDVIG = 24,

        /// <summary>
        /// Enum HUN_YEE for value: HunYee
        /// </summary>
        [EnumMember(Value = "HunYee")]
        HUN_YEE = 25,

        /// <summary>
        /// Enum HAN_HAN for value: HanHan
        /// </summary>
        [EnumMember(Value = "HanHan")]
        HAN_HAN = 26,
    }

    /// <summary>
    /// Converts <see cref="SayStandardVoice"/> to and from the JSON value
    /// </summary>
    public static class SayStandardVoiceValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="SayStandardVoice"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SayStandardVoice FromString(string value)
        {
            if (value.Equals("Herena"))
                return SayStandardVoice.HERENA;

            if (value.Equals("Helle"))
                return SayStandardVoice.HELLE;

            if (value.Equals("Hedda"))
                return SayStandardVoice.HEDDA;

            if (value.Equals("Hayley"))
                return SayStandardVoice.HAYLEY;

            if (value.Equals("Heather"))
                return SayStandardVoice.HEATHER;

            if (value.Equals("Hazel"))
                return SayStandardVoice.HAZEL;

            if (value.Equals("Heera"))
                return SayStandardVoice.HEERA;

            if (value.Equals("Helen"))
                return SayStandardVoice.HELEN;

            if (value.Equals("ZiraPro"))
                return SayStandardVoice.ZIRA_PRO;

            if (value.Equals("Helena"))
                return SayStandardVoice.HELENA;

            if (value.Equals("Hilda"))
                return SayStandardVoice.HILDA;

            if (value.Equals("Heidi"))
                return SayStandardVoice.HEIDI;

            if (value.Equals("Harmonie"))
                return SayStandardVoice.HARMONIE;

            if (value.Equals("Hortense"))
                return SayStandardVoice.HORTENSE;

            if (value.Equals("Lucia"))
                return SayStandardVoice.LUCIA;

            if (value.Equals("Harkua"))
                return SayStandardVoice.HARKUA;

            if (value.Equals("Heami"))
                return SayStandardVoice.HEAMI;

            if (value.Equals("Hulda"))
                return SayStandardVoice.HULDA;

            if (value.Equals("Hanna"))
                return SayStandardVoice.HANNA;

            if (value.Equals("Paulina"))
                return SayStandardVoice.PAULINA;

            if (value.Equals("Helosia"))
                return SayStandardVoice.HELOSIA;

            if (value.Equals("Helia"))
                return SayStandardVoice.HELIA;

            if (value.Equals("Elena"))
                return SayStandardVoice.ELENA;

            if (value.Equals("Hedvig"))
                return SayStandardVoice.HEDVIG;

            if (value.Equals("HunYee"))
                return SayStandardVoice.HUN_YEE;

            if (value.Equals("HanHan"))
                return SayStandardVoice.HAN_HAN;

            throw new NotImplementedException(
                $"Could not convert value to type SayStandardVoice: '{value}'"
            );
        }

        /// <summary>
        /// Parses a given value to <see cref="SayStandardVoice"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SayStandardVoice? FromStringOrDefault(string value)
        {
            if (value.Equals("Herena"))
                return SayStandardVoice.HERENA;

            if (value.Equals("Helle"))
                return SayStandardVoice.HELLE;

            if (value.Equals("Hedda"))
                return SayStandardVoice.HEDDA;

            if (value.Equals("Hayley"))
                return SayStandardVoice.HAYLEY;

            if (value.Equals("Heather"))
                return SayStandardVoice.HEATHER;

            if (value.Equals("Hazel"))
                return SayStandardVoice.HAZEL;

            if (value.Equals("Heera"))
                return SayStandardVoice.HEERA;

            if (value.Equals("Helen"))
                return SayStandardVoice.HELEN;

            if (value.Equals("ZiraPro"))
                return SayStandardVoice.ZIRA_PRO;

            if (value.Equals("Helena"))
                return SayStandardVoice.HELENA;

            if (value.Equals("Hilda"))
                return SayStandardVoice.HILDA;

            if (value.Equals("Heidi"))
                return SayStandardVoice.HEIDI;

            if (value.Equals("Harmonie"))
                return SayStandardVoice.HARMONIE;

            if (value.Equals("Hortense"))
                return SayStandardVoice.HORTENSE;

            if (value.Equals("Lucia"))
                return SayStandardVoice.LUCIA;

            if (value.Equals("Harkua"))
                return SayStandardVoice.HARKUA;

            if (value.Equals("Heami"))
                return SayStandardVoice.HEAMI;

            if (value.Equals("Hulda"))
                return SayStandardVoice.HULDA;

            if (value.Equals("Hanna"))
                return SayStandardVoice.HANNA;

            if (value.Equals("Paulina"))
                return SayStandardVoice.PAULINA;

            if (value.Equals("Helosia"))
                return SayStandardVoice.HELOSIA;

            if (value.Equals("Helia"))
                return SayStandardVoice.HELIA;

            if (value.Equals("Elena"))
                return SayStandardVoice.ELENA;

            if (value.Equals("Hedvig"))
                return SayStandardVoice.HEDVIG;

            if (value.Equals("HunYee"))
                return SayStandardVoice.HUN_YEE;

            if (value.Equals("HanHan"))
                return SayStandardVoice.HAN_HAN;

            return null;
        }
    }
}
