/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;
using freeclimb.Enums;

namespace freeclimb.Enums
{
    /// <summary>
    /// Indicates the state of the message through the message lifecycle including: new, queued, rejected, sending, sent, failed, received, undelivered, expired, deleted, and unknown
    /// </summary>
    /// <value>Indicates the state of the message through the message lifecycle including: new, queued, rejected, sending, sent, failed, received, undelivered, expired, deleted, and unknown</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum MessageStatus
    {
        /// <summary>
        /// Enum NEW for value: new
        /// </summary>
        [EnumMember(Value = "new")]
        NEW = 1,

        /// <summary>
        /// Enum QUEUED for value: queued
        /// </summary>
        [EnumMember(Value = "queued")]
        QUEUED = 2,

        /// <summary>
        /// Enum REJECTED for value: rejected
        /// </summary>
        [EnumMember(Value = "rejected")]
        REJECTED = 3,

        /// <summary>
        /// Enum SENDING for value: sending
        /// </summary>
        [EnumMember(Value = "sending")]
        SENDING = 4,

        /// <summary>
        /// Enum SENT for value: sent
        /// </summary>
        [EnumMember(Value = "sent")]
        SENT = 5,

        /// <summary>
        /// Enum FAILED for value: failed
        /// </summary>
        [EnumMember(Value = "failed")]
        FAILED = 6,

        /// <summary>
        /// Enum RECEIVED for value: received
        /// </summary>
        [EnumMember(Value = "received")]
        RECEIVED = 7,

        /// <summary>
        /// Enum UNDELIVERED for value: undelivered
        /// </summary>
        [EnumMember(Value = "undelivered")]
        UNDELIVERED = 8,

        /// <summary>
        /// Enum EXPIRED for value: expired
        /// </summary>
        [EnumMember(Value = "expired")]
        EXPIRED = 9,

        /// <summary>
        /// Enum DELETED for value: deleted
        /// </summary>
        [EnumMember(Value = "deleted")]
        DELETED = 10,

        /// <summary>
        /// Enum UNKNOWN for value: unknown
        /// </summary>
        [EnumMember(Value = "unknown")]
        UNKNOWN = 11

    }

}
