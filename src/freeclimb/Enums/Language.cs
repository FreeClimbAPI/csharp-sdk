/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Enums
{
    /// <summary>
    /// Defines Language
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum Language
    {
        /// <summary>
        /// Enum CATALAN for value: ca-ES
        /// </summary>
        [EnumMember(Value = "ca-ES")]
        CATALAN = 1,

        /// <summary>
        /// Enum DANISH for value: da-DK
        /// </summary>
        [EnumMember(Value = "da-DK")]
        DANISH = 2,

        /// <summary>
        /// Enum GERMAN for value: de-DE
        /// </summary>
        [EnumMember(Value = "de-DE")]
        GERMAN = 3,

        /// <summary>
        /// Enum ENGLISH_AU for value: en-AU
        /// </summary>
        [EnumMember(Value = "en-AU")]
        ENGLISH_AU = 4,

        /// <summary>
        /// Enum ENGLISH_CA for value: en-CA
        /// </summary>
        [EnumMember(Value = "en-CA")]
        ENGLISH_CA = 5,

        /// <summary>
        /// Enum ENGLISH_UK for value: en-GB
        /// </summary>
        [EnumMember(Value = "en-GB")]
        ENGLISH_UK = 6,

        /// <summary>
        /// Enum ENGLISH_IN for value: en-IN
        /// </summary>
        [EnumMember(Value = "en-IN")]
        ENGLISH_IN = 7,

        /// <summary>
        /// Enum ENGLISH_US for value: en-US
        /// </summary>
        [EnumMember(Value = "en-US")]
        ENGLISH_US = 8,

        /// <summary>
        /// Enum ENGLISH_ES for value: es-ES
        /// </summary>
        [EnumMember(Value = "es-ES")]
        ENGLISH_ES = 9,

        /// <summary>
        /// Enum ENGLISH_MX for value: es-MX
        /// </summary>
        [EnumMember(Value = "es-MX")]
        ENGLISH_MX = 10,

        /// <summary>
        /// Enum FINNISH for value: fi-FI
        /// </summary>
        [EnumMember(Value = "fi-FI")]
        FINNISH = 11,

        /// <summary>
        /// Enum FRENCH_CA for value: fr-CA
        /// </summary>
        [EnumMember(Value = "fr-CA")]
        FRENCH_CA = 12,

        /// <summary>
        /// Enum FRENCH_FR for value: fr-FR
        /// </summary>
        [EnumMember(Value = "fr-FR")]
        FRENCH_FR = 13,

        /// <summary>
        /// Enum ITALIAN for value: it-IT
        /// </summary>
        [EnumMember(Value = "it-IT")]
        ITALIAN = 14,

        /// <summary>
        /// Enum JAPANESE for value: ja-JP
        /// </summary>
        [EnumMember(Value = "ja-JP")]
        JAPANESE = 15,

        /// <summary>
        /// Enum KOREAN for value: ko-KR
        /// </summary>
        [EnumMember(Value = "ko-KR")]
        KOREAN = 16,

        /// <summary>
        /// Enum NORWEGIAN for value: nb-NO
        /// </summary>
        [EnumMember(Value = "nb-NO")]
        NORWEGIAN = 17,

        /// <summary>
        /// Enum DUTCH for value: nl-NL
        /// </summary>
        [EnumMember(Value = "nl-NL")]
        DUTCH = 18,

        /// <summary>
        /// Enum POLISH for value: pl-PL
        /// </summary>
        [EnumMember(Value = "pl-PL")]
        POLISH = 19,

        /// <summary>
        /// Enum PORTUGESE_BR for value: pt-BR
        /// </summary>
        [EnumMember(Value = "pt-BR")]
        PORTUGESE_BR = 20,

        /// <summary>
        /// Enum PORTUGESE_PT for value: pt-PT
        /// </summary>
        [EnumMember(Value = "pt-PT")]
        PORTUGESE_PT = 21,

        /// <summary>
        /// Enum RUSSIAN for value: ru-RU
        /// </summary>
        [EnumMember(Value = "ru-RU")]
        RUSSIAN = 22,

        /// <summary>
        /// Enum SWEDISH for value: sv-SE
        /// </summary>
        [EnumMember(Value = "sv-SE")]
        SWEDISH = 23,

        /// <summary>
        /// Enum CHINESE_CN for value: zh-CN
        /// </summary>
        [EnumMember(Value = "zh-CN")]
        CHINESE_CN = 24,

        /// <summary>
        /// Enum CHINESE_HK for value: zh-HK
        /// </summary>
        [EnumMember(Value = "zh-HK")]
        CHINESE_HK = 25,

        /// <summary>
        /// Enum CHINESE_TW for value: zh-TW
        /// </summary>
        [EnumMember(Value = "zh-TW")]
        CHINESE_TW = 26,
    }

    /// <summary>
    /// Converts <see cref="Language"/> to and from the JSON value
    /// </summary>
    public static class LanguageValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="Language"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Language FromString(string value)
        {
            if (value.Equals("ca-ES"))
                return Language.CATALAN;

            if (value.Equals("da-DK"))
                return Language.DANISH;

            if (value.Equals("de-DE"))
                return Language.GERMAN;

            if (value.Equals("en-AU"))
                return Language.ENGLISH_AU;

            if (value.Equals("en-CA"))
                return Language.ENGLISH_CA;

            if (value.Equals("en-GB"))
                return Language.ENGLISH_UK;

            if (value.Equals("en-IN"))
                return Language.ENGLISH_IN;

            if (value.Equals("en-US"))
                return Language.ENGLISH_US;

            if (value.Equals("es-ES"))
                return Language.ENGLISH_ES;

            if (value.Equals("es-MX"))
                return Language.ENGLISH_MX;

            if (value.Equals("fi-FI"))
                return Language.FINNISH;

            if (value.Equals("fr-CA"))
                return Language.FRENCH_CA;

            if (value.Equals("fr-FR"))
                return Language.FRENCH_FR;

            if (value.Equals("it-IT"))
                return Language.ITALIAN;

            if (value.Equals("ja-JP"))
                return Language.JAPANESE;

            if (value.Equals("ko-KR"))
                return Language.KOREAN;

            if (value.Equals("nb-NO"))
                return Language.NORWEGIAN;

            if (value.Equals("nl-NL"))
                return Language.DUTCH;

            if (value.Equals("pl-PL"))
                return Language.POLISH;

            if (value.Equals("pt-BR"))
                return Language.PORTUGESE_BR;

            if (value.Equals("pt-PT"))
                return Language.PORTUGESE_PT;

            if (value.Equals("ru-RU"))
                return Language.RUSSIAN;

            if (value.Equals("sv-SE"))
                return Language.SWEDISH;

            if (value.Equals("zh-CN"))
                return Language.CHINESE_CN;

            if (value.Equals("zh-HK"))
                return Language.CHINESE_HK;

            if (value.Equals("zh-TW"))
                return Language.CHINESE_TW;

            throw new NotImplementedException(
                $"Could not convert value to type Language: '{value}'"
            );
        }

        /// <summary>
        /// Parses a given value to <see cref="Language"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Language? FromStringOrDefault(string value)
        {
            if (value.Equals("ca-ES"))
                return Language.CATALAN;

            if (value.Equals("da-DK"))
                return Language.DANISH;

            if (value.Equals("de-DE"))
                return Language.GERMAN;

            if (value.Equals("en-AU"))
                return Language.ENGLISH_AU;

            if (value.Equals("en-CA"))
                return Language.ENGLISH_CA;

            if (value.Equals("en-GB"))
                return Language.ENGLISH_UK;

            if (value.Equals("en-IN"))
                return Language.ENGLISH_IN;

            if (value.Equals("en-US"))
                return Language.ENGLISH_US;

            if (value.Equals("es-ES"))
                return Language.ENGLISH_ES;

            if (value.Equals("es-MX"))
                return Language.ENGLISH_MX;

            if (value.Equals("fi-FI"))
                return Language.FINNISH;

            if (value.Equals("fr-CA"))
                return Language.FRENCH_CA;

            if (value.Equals("fr-FR"))
                return Language.FRENCH_FR;

            if (value.Equals("it-IT"))
                return Language.ITALIAN;

            if (value.Equals("ja-JP"))
                return Language.JAPANESE;

            if (value.Equals("ko-KR"))
                return Language.KOREAN;

            if (value.Equals("nb-NO"))
                return Language.NORWEGIAN;

            if (value.Equals("nl-NL"))
                return Language.DUTCH;

            if (value.Equals("pl-PL"))
                return Language.POLISH;

            if (value.Equals("pt-BR"))
                return Language.PORTUGESE_BR;

            if (value.Equals("pt-PT"))
                return Language.PORTUGESE_PT;

            if (value.Equals("ru-RU"))
                return Language.RUSSIAN;

            if (value.Equals("sv-SE"))
                return Language.SWEDISH;

            if (value.Equals("zh-CN"))
                return Language.CHINESE_CN;

            if (value.Equals("zh-HK"))
                return Language.CHINESE_HK;

            if (value.Equals("zh-TW"))
                return Language.CHINESE_TW;

            return null;
        }
    }
}
