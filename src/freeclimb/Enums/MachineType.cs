/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Enums
{
    /// <summary>
    /// Defines MachineType
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum MachineType
    {
        /// <summary>
        /// Enum ANSWERING_MACHINE for value: answering machine
        /// </summary>
        [EnumMember(Value = "answering machine")]
        ANSWERING_MACHINE = 1,

        /// <summary>
        /// Enum FAX_MODEM for value: fax modem
        /// </summary>
        [EnumMember(Value = "fax modem")]
        FAX_MODEM = 2,
    }

    /// <summary>
    /// Converts <see cref="MachineType"/> to and from the JSON value
    /// </summary>
    public static class MachineTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="MachineType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MachineType FromString(string value)
        {
            if (value.Equals("answering machine"))
                return MachineType.ANSWERING_MACHINE;

            if (value.Equals("fax modem"))
                return MachineType.FAX_MODEM;

            throw new NotImplementedException(
                $"Could not convert value to type MachineType: '{value}'"
            );
        }

        /// <summary>
        /// Parses a given value to <see cref="MachineType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MachineType? FromStringOrDefault(string value)
        {
            if (value.Equals("answering machine"))
                return MachineType.ANSWERING_MACHINE;

            if (value.Equals("fax modem"))
                return MachineType.FAX_MODEM;

            return null;
        }
    }
}
