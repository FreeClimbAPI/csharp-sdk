/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Enums
{
    /// <summary>
    /// Indicates whether to play a beep when a Participant enters or leaves the Conference. either &#x60;always&#x60;, &#x60;never&#x60;, &#x60;entryOnly&#x60;, or &#x60;exitOnly&#x60;. Leaving this unset will make conference default to &#x60;always&#x60;
    /// </summary>
    /// <value>Indicates whether to play a beep when a Participant enters or leaves the Conference. either &#x60;always&#x60;, &#x60;never&#x60;, &#x60;entryOnly&#x60;, or &#x60;exitOnly&#x60;. Leaving this unset will make conference default to &#x60;always&#x60; </value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum PlayBeep
    {
        /// <summary>
        /// Enum ALWAYS for value: always
        /// </summary>
        [EnumMember(Value = "always")]
        ALWAYS = 1,

        /// <summary>
        /// Enum NEVER for value: never
        /// </summary>
        [EnumMember(Value = "never")]
        NEVER = 2,

        /// <summary>
        /// Enum ENTRY_ONLY for value: entryOnly
        /// </summary>
        [EnumMember(Value = "entryOnly")]
        ENTRY_ONLY = 3,

        /// <summary>
        /// Enum EXIT_ONLY for value: exitOnly
        /// </summary>
        [EnumMember(Value = "exitOnly")]
        EXIT_ONLY = 4,
    }

    /// <summary>
    /// Converts <see cref="PlayBeep"/> to and from the JSON value
    /// </summary>
    public static class PlayBeepValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="PlayBeep"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PlayBeep FromString(string value)
        {
            if (value.Equals("always"))
                return PlayBeep.ALWAYS;

            if (value.Equals("never"))
                return PlayBeep.NEVER;

            if (value.Equals("entryOnly"))
                return PlayBeep.ENTRY_ONLY;

            if (value.Equals("exitOnly"))
                return PlayBeep.EXIT_ONLY;

            throw new NotImplementedException(
                $"Could not convert value to type PlayBeep: '{value}'"
            );
        }

        /// <summary>
        /// Parses a given value to <see cref="PlayBeep"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PlayBeep? FromStringOrDefault(string value)
        {
            if (value.Equals("always"))
                return PlayBeep.ALWAYS;

            if (value.Equals("never"))
                return PlayBeep.NEVER;

            if (value.Equals("entryOnly"))
                return PlayBeep.ENTRY_ONLY;

            if (value.Equals("exitOnly"))
                return PlayBeep.EXIT_ONLY;

            return null;
        }
    }
}
