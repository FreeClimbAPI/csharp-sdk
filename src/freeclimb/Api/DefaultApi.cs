/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Dynamic;
using System.Linq;
using System.Net;
using System.Net.Mime;
using freeclimb.Client;
using freeclimb.Enums;
using freeclimb.Model;

namespace freeclimb.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Buy a Phone Number
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyIncomingNumberRequest">Incoming Number transaction details</param>
        /// <returns>IncomingNumberResult</returns>
        IncomingNumberResult BuyAPhoneNumber(BuyIncomingNumberRequest buyIncomingNumberRequest);

        /// <summary>
        /// Buy a Phone Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyIncomingNumberRequest">Incoming Number transaction details</param>
        /// <returns>ApiResponse of IncomingNumberResult</returns>
        ApiResponse<IncomingNumberResult> BuyAPhoneNumberWithHttpInfo(BuyIncomingNumberRequest buyIncomingNumberRequest);
        /// <summary>
        /// Create a Conference
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConferenceRequest">Conference to create (optional)</param>
        /// <returns>ConferenceResult</returns>
        ConferenceResult CreateAConference(CreateConferenceRequest createConferenceRequest = default(CreateConferenceRequest));

        /// <summary>
        /// Create a Conference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConferenceRequest">Conference to create (optional)</param>
        /// <returns>ApiResponse of ConferenceResult</returns>
        ApiResponse<ConferenceResult> CreateAConferenceWithHttpInfo(CreateConferenceRequest createConferenceRequest = default(CreateConferenceRequest));
        /// <summary>
        /// Create a Queue
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueRequest">Queue details used to create a queue (optional)</param>
        /// <returns>QueueResult</returns>
        QueueResult CreateAQueue(QueueRequest queueRequest = default(QueueRequest));

        /// <summary>
        /// Create a Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueRequest">Queue details used to create a queue (optional)</param>
        /// <returns>ApiResponse of QueueResult</returns>
        ApiResponse<QueueResult> CreateAQueueWithHttpInfo(QueueRequest queueRequest = default(QueueRequest));
        /// <summary>
        /// Create an application
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationRequest">Application Details (optional)</param>
        /// <returns>ApplicationResult</returns>
        ApplicationResult CreateAnApplication(ApplicationRequest applicationRequest = default(ApplicationRequest));

        /// <summary>
        /// Create an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationRequest">Application Details (optional)</param>
        /// <returns>ApiResponse of ApplicationResult</returns>
        ApiResponse<ApplicationResult> CreateAnApplicationWithHttpInfo(ApplicationRequest applicationRequest = default(ApplicationRequest));
        /// <summary>
        /// Delete a Recording
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>
        /// <returns></returns>
        void DeleteARecording(string recordingId);

        /// <summary>
        /// Delete a Recording
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteARecordingWithHttpInfo(string recordingId);
        /// <summary>
        /// Delete an application
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">String that uniquely identifies this application resource.</param>
        /// <returns></returns>
        void DeleteAnApplication(string applicationId);

        /// <summary>
        /// Delete an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">String that uniquely identifies this application resource.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAnApplicationWithHttpInfo(string applicationId);
        /// <summary>
        /// Delete an Incoming Number
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource.</param>
        /// <returns></returns>
        void DeleteAnIncomingNumber(string phoneNumberId);

        /// <summary>
        /// Delete an Incoming Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAnIncomingNumberWithHttpInfo(string phoneNumberId);
        /// <summary>
        /// Dequeue a Member
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>
        /// <param name="callId">ID if the Call that the Member belongs to</param>
        /// <returns>QueueMember</returns>
        QueueMember DequeueAMember(string queueId, string callId);

        /// <summary>
        /// Dequeue a Member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>
        /// <param name="callId">ID if the Call that the Member belongs to</param>
        /// <returns>ApiResponse of QueueMember</returns>
        ApiResponse<QueueMember> DequeueAMemberWithHttpInfo(string queueId, string callId);
        /// <summary>
        /// Dequeue Head Member
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">String that uniquely identifies this queue resource.</param>
        /// <returns>QueueMember</returns>
        QueueMember DequeueHeadMember(string queueId);

        /// <summary>
        /// Dequeue Head Member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">String that uniquely identifies this queue resource.</param>
        /// <returns>ApiResponse of QueueMember</returns>
        ApiResponse<QueueMember> DequeueHeadMemberWithHttpInfo(string queueId);
        /// <summary>
        /// Download a Recording File
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadARecordingFile(string recordingId);

        /// <summary>
        /// Download a Recording File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadARecordingFileWithHttpInfo(string recordingId);
        /// <summary>
        /// Filter Logs
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterLogsRequest">Filter logs request paramters</param>
        /// <returns>LogList</returns>
        LogList FilterLogs(FilterLogsRequest filterLogsRequest);

        /// <summary>
        /// Filter Logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterLogsRequest">Filter logs request paramters</param>
        /// <returns>ApiResponse of LogList</returns>
        ApiResponse<LogList> FilterLogsWithHttpInfo(FilterLogsRequest filterLogsRequest);
        /// <summary>
        /// Get a Call
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">String that uniquely identifies this call resource.</param>
        /// <returns>CallResult</returns>
        CallResult GetACall(string callId);

        /// <summary>
        /// Get a Call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">String that uniquely identifies this call resource.</param>
        /// <returns>ApiResponse of CallResult</returns>
        ApiResponse<CallResult> GetACallWithHttpInfo(string callId);
        /// <summary>
        /// Get a Conference
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">A string that uniquely identifies this conference resource.</param>
        /// <returns>ConferenceResult</returns>
        ConferenceResult GetAConference(string conferenceId);

        /// <summary>
        /// Get a Conference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">A string that uniquely identifies this conference resource.</param>
        /// <returns>ApiResponse of ConferenceResult</returns>
        ApiResponse<ConferenceResult> GetAConferenceWithHttpInfo(string conferenceId);
        /// <summary>
        /// Get a Member
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>
        /// <param name="callId">ID of the Call that the Member belongs to</param>
        /// <returns>QueueMember</returns>
        QueueMember GetAMember(string queueId, string callId);

        /// <summary>
        /// Get a Member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>
        /// <param name="callId">ID of the Call that the Member belongs to</param>
        /// <returns>ApiResponse of QueueMember</returns>
        ApiResponse<QueueMember> GetAMemberWithHttpInfo(string queueId, string callId);
        /// <summary>
        /// Get a Participant
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">ID of the conference this participant is in.</param>
        /// <param name="callId">ID of the Call associated with this participant.</param>
        /// <returns>ConferenceParticipantResult</returns>
        ConferenceParticipantResult GetAParticipant(string conferenceId, string callId);

        /// <summary>
        /// Get a Participant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">ID of the conference this participant is in.</param>
        /// <param name="callId">ID of the Call associated with this participant.</param>
        /// <returns>ApiResponse of ConferenceParticipantResult</returns>
        ApiResponse<ConferenceParticipantResult> GetAParticipantWithHttpInfo(string conferenceId, string callId);
        /// <summary>
        /// Get a Queue
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">A string that uniquely identifies this queue resource.</param>
        /// <returns>QueueResult</returns>
        QueueResult GetAQueue(string queueId);

        /// <summary>
        /// Get a Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">A string that uniquely identifies this queue resource.</param>
        /// <returns>ApiResponse of QueueResult</returns>
        ApiResponse<QueueResult> GetAQueueWithHttpInfo(string queueId);
        /// <summary>
        /// Get a Recording
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>
        /// <returns>RecordingResult</returns>
        RecordingResult GetARecording(string recordingId);

        /// <summary>
        /// Get a Recording
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>
        /// <returns>ApiResponse of RecordingResult</returns>
        ApiResponse<RecordingResult> GetARecordingWithHttpInfo(string recordingId);
        /// <summary>
        /// Get an Account
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AccountResult</returns>
        AccountResult GetAnAccount();

        /// <summary>
        /// Get an Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AccountResult</returns>
        ApiResponse<AccountResult> GetAnAccountWithHttpInfo();
        /// <summary>
        /// Get an Application
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">A string that uniquely identifies this application resource.</param>
        /// <returns>ApplicationResult</returns>
        ApplicationResult GetAnApplication(string applicationId);

        /// <summary>
        /// Get an Application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">A string that uniquely identifies this application resource.</param>
        /// <returns>ApiResponse of ApplicationResult</returns>
        ApiResponse<ApplicationResult> GetAnApplicationWithHttpInfo(string applicationId);
        /// <summary>
        /// Get an Incoming Number
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource.</param>
        /// <returns>IncomingNumberResult</returns>
        IncomingNumberResult GetAnIncomingNumber(string phoneNumberId);

        /// <summary>
        /// Get an Incoming Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource.</param>
        /// <returns>ApiResponse of IncomingNumberResult</returns>
        ApiResponse<IncomingNumberResult> GetAnIncomingNumberWithHttpInfo(string phoneNumberId);
        /// <summary>
        /// Get an SMS Message
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">String that uniquely identifies this Message resource.</param>
        /// <returns>MessageResult</returns>
        MessageResult GetAnSmsMessage(string messageId);

        /// <summary>
        /// Get an SMS Message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">String that uniquely identifies this Message resource.</param>
        /// <returns>ApiResponse of MessageResult</returns>
        ApiResponse<MessageResult> GetAnSmsMessageWithHttpInfo(string messageId);
        /// <summary>
        /// Get Head Member
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>
        /// <returns>QueueMember</returns>
        QueueMember GetHeadMember(string queueId);

        /// <summary>
        /// Get Head Member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>
        /// <returns>ApiResponse of QueueMember</returns>
        ApiResponse<QueueMember> GetHeadMemberWithHttpInfo(string queueId);
        /// <summary>
        /// List Active Queues
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Return only the Queue resources with aliases that exactly match this name. (optional)</param>
        /// <returns>QueueList</returns>
        QueueList ListActiveQueues(string alias = default(string));

        /// <summary>
        /// List Active Queues
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Return only the Queue resources with aliases that exactly match this name. (optional)</param>
        /// <returns>ApiResponse of QueueList</returns>
        ApiResponse<QueueList> ListActiveQueuesWithHttpInfo(string alias = default(string));
        /// <summary>
        /// List All Account Logs
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LogList</returns>
        LogList ListAllAccountLogs();

        /// <summary>
        /// List All Account Logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LogList</returns>
        ApiResponse<LogList> ListAllAccountLogsWithHttpInfo();
        /// <summary>
        /// List applications
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Return only applications with aliases that exactly match this value. (optional)</param>
        /// <returns>ApplicationList</returns>
        ApplicationList ListApplications(string alias = default(string));

        /// <summary>
        /// List applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Return only applications with aliases that exactly match this value. (optional)</param>
        /// <returns>ApiResponse of ApplicationList</returns>
        ApiResponse<ApplicationList> ListApplicationsWithHttpInfo(string alias = default(string));
        /// <summary>
        /// List available numbers
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">PCRE-compatible regular expression to filter against &#x60;phoneNumber&#x60; field, which is in E.164 format. (optional)</param>
        /// <param name="region">State or province of this phone number. (optional)</param>
        /// <param name="country">Country of this phone number. (optional)</param>
        /// <param name="voiceEnabled">Indicates whether the phone number can handle Calls. Typically set to true for all numbers. (optional, default to true)</param>
        /// <param name="smsEnabled">Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers. (optional, default to true)</param>
        /// <param name="capabilitiesVoice"> (optional)</param>
        /// <param name="capabilitiesSms"> (optional)</param>
        /// <param name="capabilitiesTollFree"> (optional)</param>
        /// <param name="capabilitiesTenDLC"> (optional)</param>
        /// <param name="capabilitiesShortCode"> (optional)</param>
        /// <returns>AvailableNumberList</returns>
        AvailableNumberList ListAvailableNumbers(string phoneNumber = default(string), string region = default(string), string country = default(string), bool? voiceEnabled = default(bool?), bool? smsEnabled = default(bool?), bool? capabilitiesVoice = default(bool?), bool? capabilitiesSms = default(bool?), bool? capabilitiesTollFree = default(bool?), bool? capabilitiesTenDLC = default(bool?), bool? capabilitiesShortCode = default(bool?));

        /// <summary>
        /// List available numbers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">PCRE-compatible regular expression to filter against &#x60;phoneNumber&#x60; field, which is in E.164 format. (optional)</param>
        /// <param name="region">State or province of this phone number. (optional)</param>
        /// <param name="country">Country of this phone number. (optional)</param>
        /// <param name="voiceEnabled">Indicates whether the phone number can handle Calls. Typically set to true for all numbers. (optional, default to true)</param>
        /// <param name="smsEnabled">Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers. (optional, default to true)</param>
        /// <param name="capabilitiesVoice"> (optional)</param>
        /// <param name="capabilitiesSms"> (optional)</param>
        /// <param name="capabilitiesTollFree"> (optional)</param>
        /// <param name="capabilitiesTenDLC"> (optional)</param>
        /// <param name="capabilitiesShortCode"> (optional)</param>
        /// <returns>ApiResponse of AvailableNumberList</returns>
        ApiResponse<AvailableNumberList> ListAvailableNumbersWithHttpInfo(string phoneNumber = default(string), string region = default(string), string country = default(string), bool? voiceEnabled = default(bool?), bool? smsEnabled = default(bool?), bool? capabilitiesVoice = default(bool?), bool? capabilitiesSms = default(bool?), bool? capabilitiesTollFree = default(bool?), bool? capabilitiesTenDLC = default(bool?), bool? capabilitiesShortCode = default(bool?));
        /// <summary>
        /// List Call Logs
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">String that uniquely identifies this call resource.</param>
        /// <returns>LogList</returns>
        LogList ListCallLogs(string callId);

        /// <summary>
        /// List Call Logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">String that uniquely identifies this call resource.</param>
        /// <returns>ApiResponse of LogList</returns>
        ApiResponse<LogList> ListCallLogsWithHttpInfo(string callId);
        /// <summary>
        /// List Call Recordings
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">String that uniquely identifies this call resource.</param>
        /// <param name="dateCreated">Only show recordings created on the specified date, in the form *YYYY-MM-DD*. (optional)</param>
        /// <returns>RecordingList</returns>
        RecordingList ListCallRecordings(string callId, string dateCreated = default(string));

        /// <summary>
        /// List Call Recordings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">String that uniquely identifies this call resource.</param>
        /// <param name="dateCreated">Only show recordings created on the specified date, in the form *YYYY-MM-DD*. (optional)</param>
        /// <returns>ApiResponse of RecordingList</returns>
        ApiResponse<RecordingList> ListCallRecordingsWithHttpInfo(string callId, string dateCreated = default(string));
        /// <summary>
        /// List Calls
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">If active is set to true then all calls of the nature queued, ringing, inProgress are returned in the query. (optional, default to false)</param>
        /// <param name="to">Only show Calls to this phone number. (optional)</param>
        /// <param name="from">Only show Calls from this phone number. (optional)</param>
        /// <param name="status">Only show Calls currently in this status. May be &#x60;queued&#x60;, &#x60;ringing&#x60;, &#x60;inProgress&#x60;, &#x60;canceled&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;busy&#x60;, or &#x60;noAnswer&#x60;. (optional)</param>
        /// <param name="startTime">Only show Calls that started at or after this time, given as YYYY-MM-DD hh:mm:ss. (optional)</param>
        /// <param name="endTime">Only show Calls that ended at or before this time, given as YYYY-MM- DD hh:mm:ss. (optional)</param>
        /// <param name="parentCallId">Only show Calls spawned by the call with this ID. (optional)</param>
        /// <returns>CallList</returns>
        CallList ListCalls(bool? active = default(bool?), string to = default(string), string from = default(string), CallStatus? status = default(CallStatus?), string startTime = default(string), string endTime = default(string), string parentCallId = default(string));

        /// <summary>
        /// List Calls
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">If active is set to true then all calls of the nature queued, ringing, inProgress are returned in the query. (optional, default to false)</param>
        /// <param name="to">Only show Calls to this phone number. (optional)</param>
        /// <param name="from">Only show Calls from this phone number. (optional)</param>
        /// <param name="status">Only show Calls currently in this status. May be &#x60;queued&#x60;, &#x60;ringing&#x60;, &#x60;inProgress&#x60;, &#x60;canceled&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;busy&#x60;, or &#x60;noAnswer&#x60;. (optional)</param>
        /// <param name="startTime">Only show Calls that started at or after this time, given as YYYY-MM-DD hh:mm:ss. (optional)</param>
        /// <param name="endTime">Only show Calls that ended at or before this time, given as YYYY-MM- DD hh:mm:ss. (optional)</param>
        /// <param name="parentCallId">Only show Calls spawned by the call with this ID. (optional)</param>
        /// <returns>ApiResponse of CallList</returns>
        ApiResponse<CallList> ListCallsWithHttpInfo(bool? active = default(bool?), string to = default(string), string from = default(string), CallStatus? status = default(CallStatus?), string startTime = default(string), string endTime = default(string), string parentCallId = default(string));
        /// <summary>
        /// List Conferences
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Only show conferences that currently have the specified status. Valid values: &#x60;empty&#x60;, &#x60;populated&#x60;, &#x60;inProgress&#x60;, or &#x60;terminated&#x60;. (optional)</param>
        /// <param name="alias">List Conferences whose alias exactly matches this string. (optional)</param>
        /// <param name="dateCreated">Only show Conferences that were created on the specified date, in the form *YYYY-MM-DD*. (optional)</param>
        /// <param name="dateUpdated">Only show Conferences that were last updated on the specified date, in the form *YYYY-MM-DD*. (optional)</param>
        /// <returns>ConferenceList</returns>
        ConferenceList ListConferences(string status = default(string), string alias = default(string), string dateCreated = default(string), string dateUpdated = default(string));

        /// <summary>
        /// List Conferences
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Only show conferences that currently have the specified status. Valid values: &#x60;empty&#x60;, &#x60;populated&#x60;, &#x60;inProgress&#x60;, or &#x60;terminated&#x60;. (optional)</param>
        /// <param name="alias">List Conferences whose alias exactly matches this string. (optional)</param>
        /// <param name="dateCreated">Only show Conferences that were created on the specified date, in the form *YYYY-MM-DD*. (optional)</param>
        /// <param name="dateUpdated">Only show Conferences that were last updated on the specified date, in the form *YYYY-MM-DD*. (optional)</param>
        /// <returns>ApiResponse of ConferenceList</returns>
        ApiResponse<ConferenceList> ListConferencesWithHttpInfo(string status = default(string), string alias = default(string), string dateCreated = default(string), string dateUpdated = default(string));
        /// <summary>
        /// List Incoming Numbers
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Only show incoming phone number resources that match this PCRE-compatible regular expression. (optional)</param>
        /// <param name="alias">Only show incoming phone numbers with aliases that exactly match this value. (optional)</param>
        /// <param name="region">State or province of this phone number. (optional)</param>
        /// <param name="country">Country of this phone number. (optional)</param>
        /// <param name="applicationId">ID of the Application that FreeClimb should contact if a Call or SMS arrives for this phone number or a Call from this number is placed. An incoming phone number is not useful until associated with an applicationId. (optional)</param>
        /// <param name="hasApplication">Indication of whether the phone number has an application linked to it. (optional, default to false)</param>
        /// <param name="voiceEnabled">Indicates whether the phone number can handle Calls. Typically set to true for all numbers. (optional, default to true) (deprecated)</param>
        /// <param name="smsEnabled">Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers. (optional, default to true) (deprecated)</param>
        /// <param name="capabilitiesVoice"> (optional)</param>
        /// <param name="capabilitiesSms"> (optional)</param>
        /// <param name="capabilitiesTollFree"> (optional)</param>
        /// <param name="capabilitiesTenDLC"> (optional)</param>
        /// <param name="capabilitiesShortCode"> (optional)</param>
        /// <param name="offnet">Indication of whether the phone number was registered as an offnet number. This field will be rendered only for requests to the IncomingPhone number resource. (optional)</param>
        /// <returns>IncomingNumberList</returns>
        IncomingNumberList ListIncomingNumbers(string phoneNumber = default(string), string alias = default(string), string region = default(string), string country = default(string), string applicationId = default(string), bool? hasApplication = default(bool?), bool? voiceEnabled = default(bool?), bool? smsEnabled = default(bool?), bool? capabilitiesVoice = default(bool?), bool? capabilitiesSms = default(bool?), bool? capabilitiesTollFree = default(bool?), bool? capabilitiesTenDLC = default(bool?), bool? capabilitiesShortCode = default(bool?), bool? offnet = default(bool?));

        /// <summary>
        /// List Incoming Numbers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Only show incoming phone number resources that match this PCRE-compatible regular expression. (optional)</param>
        /// <param name="alias">Only show incoming phone numbers with aliases that exactly match this value. (optional)</param>
        /// <param name="region">State or province of this phone number. (optional)</param>
        /// <param name="country">Country of this phone number. (optional)</param>
        /// <param name="applicationId">ID of the Application that FreeClimb should contact if a Call or SMS arrives for this phone number or a Call from this number is placed. An incoming phone number is not useful until associated with an applicationId. (optional)</param>
        /// <param name="hasApplication">Indication of whether the phone number has an application linked to it. (optional, default to false)</param>
        /// <param name="voiceEnabled">Indicates whether the phone number can handle Calls. Typically set to true for all numbers. (optional, default to true) (deprecated)</param>
        /// <param name="smsEnabled">Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers. (optional, default to true) (deprecated)</param>
        /// <param name="capabilitiesVoice"> (optional)</param>
        /// <param name="capabilitiesSms"> (optional)</param>
        /// <param name="capabilitiesTollFree"> (optional)</param>
        /// <param name="capabilitiesTenDLC"> (optional)</param>
        /// <param name="capabilitiesShortCode"> (optional)</param>
        /// <param name="offnet">Indication of whether the phone number was registered as an offnet number. This field will be rendered only for requests to the IncomingPhone number resource. (optional)</param>
        /// <returns>ApiResponse of IncomingNumberList</returns>
        ApiResponse<IncomingNumberList> ListIncomingNumbersWithHttpInfo(string phoneNumber = default(string), string alias = default(string), string region = default(string), string country = default(string), string applicationId = default(string), bool? hasApplication = default(bool?), bool? voiceEnabled = default(bool?), bool? smsEnabled = default(bool?), bool? capabilitiesVoice = default(bool?), bool? capabilitiesSms = default(bool?), bool? capabilitiesTollFree = default(bool?), bool? capabilitiesTenDLC = default(bool?), bool? capabilitiesShortCode = default(bool?), bool? offnet = default(bool?));
        /// <summary>
        /// List Members
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>
        /// <returns>QueueMemberList</returns>
        QueueMemberList ListMembers(string queueId);

        /// <summary>
        /// List Members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>
        /// <returns>ApiResponse of QueueMemberList</returns>
        ApiResponse<QueueMemberList> ListMembersWithHttpInfo(string queueId);
        /// <summary>
        /// List Participants
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">ID of the conference this participant is in.</param>
        /// <param name="talk">Only show Participants with the talk privilege. (optional)</param>
        /// <param name="listen">Only show Participants with the listen privilege. (optional)</param>
        /// <returns>ConferenceParticipantList</returns>
        ConferenceParticipantList ListParticipants(string conferenceId, bool? talk = default(bool?), bool? listen = default(bool?));

        /// <summary>
        /// List Participants
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">ID of the conference this participant is in.</param>
        /// <param name="talk">Only show Participants with the talk privilege. (optional)</param>
        /// <param name="listen">Only show Participants with the listen privilege. (optional)</param>
        /// <returns>ApiResponse of ConferenceParticipantList</returns>
        ApiResponse<ConferenceParticipantList> ListParticipantsWithHttpInfo(string conferenceId, bool? talk = default(bool?), bool? listen = default(bool?));
        /// <summary>
        /// List Recordings
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Show only Recordings made during the Call with this ID. (optional)</param>
        /// <param name="conferenceId">Show only Recordings made during the conference with this ID. (optional)</param>
        /// <param name="dateCreated">Only show Recordings created on this date, formatted as *YYYY-MM-DD*. (optional)</param>
        /// <returns>RecordingList</returns>
        RecordingList ListRecordings(string callId = default(string), string conferenceId = default(string), string dateCreated = default(string));

        /// <summary>
        /// List Recordings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Show only Recordings made during the Call with this ID. (optional)</param>
        /// <param name="conferenceId">Show only Recordings made during the conference with this ID. (optional)</param>
        /// <param name="dateCreated">Only show Recordings created on this date, formatted as *YYYY-MM-DD*. (optional)</param>
        /// <returns>ApiResponse of RecordingList</returns>
        ApiResponse<RecordingList> ListRecordingsWithHttpInfo(string callId = default(string), string conferenceId = default(string), string dateCreated = default(string));
        /// <summary>
        /// List SMS Messages
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Only show Messages to this phone number. (optional)</param>
        /// <param name="from">Only show Messages from this phone number. (optional)</param>
        /// <param name="beginTime">Only show Messages sent at or after this time (GMT), given as *YYYY-MM-DD hh:mm:ss*. (optional)</param>
        /// <param name="endTime">Only show messages sent at or before this time (GMT), given as *YYYY-MM-DD hh:mm*.. (optional)</param>
        /// <param name="direction">Either &#x60;inbound&#x60; or &#x60;outbound&#x60;. Only show Messages that were either *sent from* or *received by* FreeClimb. (optional)</param>
        /// <returns>MessagesList</returns>
        MessagesList ListSmsMessages(string to = default(string), string from = default(string), string beginTime = default(string), string endTime = default(string), MessageDirection? direction = default(MessageDirection?));

        /// <summary>
        /// List SMS Messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Only show Messages to this phone number. (optional)</param>
        /// <param name="from">Only show Messages from this phone number. (optional)</param>
        /// <param name="beginTime">Only show Messages sent at or after this time (GMT), given as *YYYY-MM-DD hh:mm:ss*. (optional)</param>
        /// <param name="endTime">Only show messages sent at or before this time (GMT), given as *YYYY-MM-DD hh:mm*.. (optional)</param>
        /// <param name="direction">Either &#x60;inbound&#x60; or &#x60;outbound&#x60;. Only show Messages that were either *sent from* or *received by* FreeClimb. (optional)</param>
        /// <returns>ApiResponse of MessagesList</returns>
        ApiResponse<MessagesList> ListSmsMessagesWithHttpInfo(string to = default(string), string from = default(string), string beginTime = default(string), string endTime = default(string), MessageDirection? direction = default(MessageDirection?));
        /// <summary>
        /// Make a Call
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="makeCallRequest">Call details for making a call (optional)</param>
        /// <returns>CallResult</returns>
        CallResult MakeACall(MakeCallRequest makeCallRequest = default(MakeCallRequest));

        /// <summary>
        /// Make a Call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="makeCallRequest">Call details for making a call (optional)</param>
        /// <returns>ApiResponse of CallResult</returns>
        ApiResponse<CallResult> MakeACallWithHttpInfo(MakeCallRequest makeCallRequest = default(MakeCallRequest));
        /// <summary>
        /// Remove a Participant
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">ID of the conference this participant is in.</param>
        /// <param name="callId">ID of the Call associated with this participant.</param>
        /// <returns></returns>
        void RemoveAParticipant(string conferenceId, string callId);

        /// <summary>
        /// Remove a Participant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">ID of the conference this participant is in.</param>
        /// <param name="callId">ID of the Call associated with this participant.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveAParticipantWithHttpInfo(string conferenceId, string callId);
        /// <summary>
        /// Send an SMS Message
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageRequest">Details to create a message</param>
        /// <returns>MessageResult</returns>
        MessageResult SendAnSmsMessage(MessageRequest messageRequest);

        /// <summary>
        /// Send an SMS Message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageRequest">Details to create a message</param>
        /// <returns>ApiResponse of MessageResult</returns>
        ApiResponse<MessageResult> SendAnSmsMessageWithHttpInfo(MessageRequest messageRequest);
        /// <summary>
        /// Stream a Recording File
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream StreamARecordingFile(string recordingId);

        /// <summary>
        /// Stream a Recording File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> StreamARecordingFileWithHttpInfo(string recordingId);
        /// <summary>
        /// Update a Conference
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">String that uniquely identifies this conference resource.</param>
        /// <param name="updateConferenceRequest">Conference Details to update (optional)</param>
        /// <returns>ConferenceResult</returns>
        ConferenceResult UpdateAConference(string conferenceId, UpdateConferenceRequest updateConferenceRequest = default(UpdateConferenceRequest));

        /// <summary>
        /// Update a Conference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">String that uniquely identifies this conference resource.</param>
        /// <param name="updateConferenceRequest">Conference Details to update (optional)</param>
        /// <returns>ApiResponse of ConferenceResult</returns>
        ApiResponse<ConferenceResult> UpdateAConferenceWithHttpInfo(string conferenceId, UpdateConferenceRequest updateConferenceRequest = default(UpdateConferenceRequest));
        /// <summary>
        /// Update a Live Call
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">String that uniquely identifies this call resource.</param>
        /// <param name="updateCallRequest">Call details to update</param>
        /// <returns></returns>
        void UpdateALiveCall(string callId, UpdateCallRequest updateCallRequest);

        /// <summary>
        /// Update a Live Call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">String that uniquely identifies this call resource.</param>
        /// <param name="updateCallRequest">Call details to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateALiveCallWithHttpInfo(string callId, UpdateCallRequest updateCallRequest);
        /// <summary>
        /// Update a Participant
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">ID of the conference this participant is in.</param>
        /// <param name="callId">ID of the Call associated with this participant.</param>
        /// <param name="updateConferenceParticipantRequest">Conference participant details to update (optional)</param>
        /// <returns>ConferenceParticipantResult</returns>
        ConferenceParticipantResult UpdateAParticipant(string conferenceId, string callId, UpdateConferenceParticipantRequest updateConferenceParticipantRequest = default(UpdateConferenceParticipantRequest));

        /// <summary>
        /// Update a Participant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">ID of the conference this participant is in.</param>
        /// <param name="callId">ID of the Call associated with this participant.</param>
        /// <param name="updateConferenceParticipantRequest">Conference participant details to update (optional)</param>
        /// <returns>ApiResponse of ConferenceParticipantResult</returns>
        ApiResponse<ConferenceParticipantResult> UpdateAParticipantWithHttpInfo(string conferenceId, string callId, UpdateConferenceParticipantRequest updateConferenceParticipantRequest = default(UpdateConferenceParticipantRequest));
        /// <summary>
        /// Update a Queue
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">A string that uniquely identifies this Queue resource.</param>
        /// <param name="queueRequest">Queue Details to update (optional)</param>
        /// <returns>QueueResult</returns>
        QueueResult UpdateAQueue(string queueId, QueueRequest queueRequest = default(QueueRequest));

        /// <summary>
        /// Update a Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">A string that uniquely identifies this Queue resource.</param>
        /// <param name="queueRequest">Queue Details to update (optional)</param>
        /// <returns>ApiResponse of QueueResult</returns>
        ApiResponse<QueueResult> UpdateAQueueWithHttpInfo(string queueId, QueueRequest queueRequest = default(QueueRequest));
        /// <summary>
        /// Manage an account
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountRequest">Account details to update (optional)</param>
        /// <returns></returns>
        void UpdateAnAccount(AccountRequest accountRequest = default(AccountRequest));

        /// <summary>
        /// Manage an account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountRequest">Account details to update (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateAnAccountWithHttpInfo(AccountRequest accountRequest = default(AccountRequest));
        /// <summary>
        /// Update an application
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">A string that uniquely identifies this application resource.</param>
        /// <param name="applicationRequest">Application details to update. (optional)</param>
        /// <returns>ApplicationResult</returns>
        ApplicationResult UpdateAnApplication(string applicationId, ApplicationRequest applicationRequest = default(ApplicationRequest));

        /// <summary>
        /// Update an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">A string that uniquely identifies this application resource.</param>
        /// <param name="applicationRequest">Application details to update. (optional)</param>
        /// <returns>ApiResponse of ApplicationResult</returns>
        ApiResponse<ApplicationResult> UpdateAnApplicationWithHttpInfo(string applicationId, ApplicationRequest applicationRequest = default(ApplicationRequest));
        /// <summary>
        /// Update an Incoming Number
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource.</param>
        /// <param name="incomingNumberRequest">Incoming Number details to update (optional)</param>
        /// <returns>IncomingNumberResult</returns>
        IncomingNumberResult UpdateAnIncomingNumber(string phoneNumberId, IncomingNumberRequest incomingNumberRequest = default(IncomingNumberRequest));

        /// <summary>
        /// Update an Incoming Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource.</param>
        /// <param name="incomingNumberRequest">Incoming Number details to update (optional)</param>
        /// <returns>ApiResponse of IncomingNumberResult</returns>
        ApiResponse<IncomingNumberResult> UpdateAnIncomingNumberWithHttpInfo(string phoneNumberId, IncomingNumberRequest incomingNumberRequest = default(IncomingNumberRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Buy a Phone Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="buyIncomingNumberRequest">Incoming Number transaction details</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncomingNumberResult</returns>
        System.Threading.Tasks.Task<IncomingNumberResult> BuyAPhoneNumberAsync(BuyIncomingNumberRequest buyIncomingNumberRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Buy a Phone Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="buyIncomingNumberRequest">Incoming Number transaction details</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncomingNumberResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IncomingNumberResult>> BuyAPhoneNumberWithHttpInfoAsync(BuyIncomingNumberRequest buyIncomingNumberRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a Conference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="createConferenceRequest">Conference to create (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConferenceResult</returns>
        System.Threading.Tasks.Task<ConferenceResult> CreateAConferenceAsync(CreateConferenceRequest createConferenceRequest = default(CreateConferenceRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a Conference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="createConferenceRequest">Conference to create (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConferenceResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConferenceResult>> CreateAConferenceWithHttpInfoAsync(CreateConferenceRequest createConferenceRequest = default(CreateConferenceRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueRequest">Queue details used to create a queue (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueueResult</returns>
        System.Threading.Tasks.Task<QueueResult> CreateAQueueAsync(QueueRequest queueRequest = default(QueueRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueRequest">Queue details used to create a queue (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueueResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueueResult>> CreateAQueueWithHttpInfoAsync(QueueRequest queueRequest = default(QueueRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="applicationRequest">Application Details (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationResult</returns>
        System.Threading.Tasks.Task<ApplicationResult> CreateAnApplicationAsync(ApplicationRequest applicationRequest = default(ApplicationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="applicationRequest">Application Details (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationResult>> CreateAnApplicationWithHttpInfoAsync(ApplicationRequest applicationRequest = default(ApplicationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Recording
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteARecordingAsync(string recordingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Recording
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteARecordingWithHttpInfoAsync(string recordingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="applicationId">String that uniquely identifies this application resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAnApplicationAsync(string applicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="applicationId">String that uniquely identifies this application resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAnApplicationWithHttpInfoAsync(string applicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an Incoming Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAnIncomingNumberAsync(string phoneNumberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an Incoming Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAnIncomingNumberWithHttpInfoAsync(string phoneNumberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Dequeue a Member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>

        /// <param name="callId">ID if the Call that the Member belongs to</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueueMember</returns>
        System.Threading.Tasks.Task<QueueMember> DequeueAMemberAsync(string queueId, string callId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Dequeue a Member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>

        /// <param name="callId">ID if the Call that the Member belongs to</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueueMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueueMember>> DequeueAMemberWithHttpInfoAsync(string queueId, string callId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Dequeue Head Member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">String that uniquely identifies this queue resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueueMember</returns>
        System.Threading.Tasks.Task<QueueMember> DequeueHeadMemberAsync(string queueId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Dequeue Head Member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">String that uniquely identifies this queue resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueueMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueueMember>> DequeueHeadMemberWithHttpInfoAsync(string queueId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download a Recording File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadARecordingFileAsync(string recordingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download a Recording File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadARecordingFileWithHttpInfoAsync(string recordingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Filter Logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="filterLogsRequest">Filter logs request paramters</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogList</returns>
        System.Threading.Tasks.Task<LogList> FilterLogsAsync(FilterLogsRequest filterLogsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Filter Logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="filterLogsRequest">Filter logs request paramters</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogList)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogList>> FilterLogsWithHttpInfoAsync(FilterLogsRequest filterLogsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a Call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="callId">String that uniquely identifies this call resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallResult</returns>
        System.Threading.Tasks.Task<CallResult> GetACallAsync(string callId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a Call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="callId">String that uniquely identifies this call resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallResult>> GetACallWithHttpInfoAsync(string callId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a Conference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="conferenceId">A string that uniquely identifies this conference resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConferenceResult</returns>
        System.Threading.Tasks.Task<ConferenceResult> GetAConferenceAsync(string conferenceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a Conference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="conferenceId">A string that uniquely identifies this conference resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConferenceResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConferenceResult>> GetAConferenceWithHttpInfoAsync(string conferenceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a Member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>

        /// <param name="callId">ID of the Call that the Member belongs to</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueueMember</returns>
        System.Threading.Tasks.Task<QueueMember> GetAMemberAsync(string queueId, string callId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a Member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>

        /// <param name="callId">ID of the Call that the Member belongs to</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueueMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueueMember>> GetAMemberWithHttpInfoAsync(string queueId, string callId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a Participant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="conferenceId">ID of the conference this participant is in.</param>

        /// <param name="callId">ID of the Call associated with this participant.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConferenceParticipantResult</returns>
        System.Threading.Tasks.Task<ConferenceParticipantResult> GetAParticipantAsync(string conferenceId, string callId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a Participant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="conferenceId">ID of the conference this participant is in.</param>

        /// <param name="callId">ID of the Call associated with this participant.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConferenceParticipantResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConferenceParticipantResult>> GetAParticipantWithHttpInfoAsync(string conferenceId, string callId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">A string that uniquely identifies this queue resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueueResult</returns>
        System.Threading.Tasks.Task<QueueResult> GetAQueueAsync(string queueId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">A string that uniquely identifies this queue resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueueResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueueResult>> GetAQueueWithHttpInfoAsync(string queueId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a Recording
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecordingResult</returns>
        System.Threading.Tasks.Task<RecordingResult> GetARecordingAsync(string recordingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a Recording
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecordingResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecordingResult>> GetARecordingWithHttpInfoAsync(string recordingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResult</returns>
        System.Threading.Tasks.Task<AccountResult> GetAnAccountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountResult>> GetAnAccountWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an Application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="applicationId">A string that uniquely identifies this application resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationResult</returns>
        System.Threading.Tasks.Task<ApplicationResult> GetAnApplicationAsync(string applicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an Application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="applicationId">A string that uniquely identifies this application resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationResult>> GetAnApplicationWithHttpInfoAsync(string applicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an Incoming Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncomingNumberResult</returns>
        System.Threading.Tasks.Task<IncomingNumberResult> GetAnIncomingNumberAsync(string phoneNumberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an Incoming Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncomingNumberResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IncomingNumberResult>> GetAnIncomingNumberWithHttpInfoAsync(string phoneNumberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an SMS Message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="messageId">String that uniquely identifies this Message resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageResult</returns>
        System.Threading.Tasks.Task<MessageResult> GetAnSmsMessageAsync(string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an SMS Message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="messageId">String that uniquely identifies this Message resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageResult>> GetAnSmsMessageWithHttpInfoAsync(string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Head Member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueueMember</returns>
        System.Threading.Tasks.Task<QueueMember> GetHeadMemberAsync(string queueId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Head Member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueueMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueueMember>> GetHeadMemberWithHttpInfoAsync(string queueId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Active Queues
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="alias">Return only the Queue resources with aliases that exactly match this name. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueueList</returns>
        System.Threading.Tasks.Task<QueueList> ListActiveQueuesAsync(string alias = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Active Queues
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="alias">Return only the Queue resources with aliases that exactly match this name. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueueList)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueueList>> ListActiveQueuesWithHttpInfoAsync(string alias = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List All Account Logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogList</returns>
        System.Threading.Tasks.Task<LogList> ListAllAccountLogsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List All Account Logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogList)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogList>> ListAllAccountLogsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="alias">Return only applications with aliases that exactly match this value. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationList</returns>
        System.Threading.Tasks.Task<ApplicationList> ListApplicationsAsync(string alias = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="alias">Return only applications with aliases that exactly match this value. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationList>> ListApplicationsWithHttpInfoAsync(string alias = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List available numbers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="phoneNumber">PCRE-compatible regular expression to filter against `phoneNumber` field, which is in E.164 format. (optional)</param>

        /// <param name="region">State or province of this phone number. (optional)</param>

        /// <param name="country">Country of this phone number. (optional)</param>

        /// <param name="voiceEnabled">Indicates whether the phone number can handle Calls. Typically set to true for all numbers. (optional, default to true)</param>

        /// <param name="smsEnabled">Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers. (optional, default to true)</param>

        /// <param name="capabilitiesVoice"> (optional)</param>

        /// <param name="capabilitiesSms"> (optional)</param>

        /// <param name="capabilitiesTollFree"> (optional)</param>

        /// <param name="capabilitiesTenDLC"> (optional)</param>

        /// <param name="capabilitiesShortCode"> (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AvailableNumberList</returns>
        System.Threading.Tasks.Task<AvailableNumberList> ListAvailableNumbersAsync(string phoneNumber = default(string), string region = default(string), string country = default(string), bool? voiceEnabled = default(bool?), bool? smsEnabled = default(bool?), bool? capabilitiesVoice = default(bool?), bool? capabilitiesSms = default(bool?), bool? capabilitiesTollFree = default(bool?), bool? capabilitiesTenDLC = default(bool?), bool? capabilitiesShortCode = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List available numbers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="phoneNumber">PCRE-compatible regular expression to filter against `phoneNumber` field, which is in E.164 format. (optional)</param>

        /// <param name="region">State or province of this phone number. (optional)</param>

        /// <param name="country">Country of this phone number. (optional)</param>

        /// <param name="voiceEnabled">Indicates whether the phone number can handle Calls. Typically set to true for all numbers. (optional, default to true)</param>

        /// <param name="smsEnabled">Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers. (optional, default to true)</param>

        /// <param name="capabilitiesVoice"> (optional)</param>

        /// <param name="capabilitiesSms"> (optional)</param>

        /// <param name="capabilitiesTollFree"> (optional)</param>

        /// <param name="capabilitiesTenDLC"> (optional)</param>

        /// <param name="capabilitiesShortCode"> (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AvailableNumberList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AvailableNumberList>> ListAvailableNumbersWithHttpInfoAsync(string phoneNumber = default(string), string region = default(string), string country = default(string), bool? voiceEnabled = default(bool?), bool? smsEnabled = default(bool?), bool? capabilitiesVoice = default(bool?), bool? capabilitiesSms = default(bool?), bool? capabilitiesTollFree = default(bool?), bool? capabilitiesTenDLC = default(bool?), bool? capabilitiesShortCode = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Call Logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="callId">String that uniquely identifies this call resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogList</returns>
        System.Threading.Tasks.Task<LogList> ListCallLogsAsync(string callId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Call Logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="callId">String that uniquely identifies this call resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogList)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogList>> ListCallLogsWithHttpInfoAsync(string callId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Call Recordings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="callId">String that uniquely identifies this call resource.</param>

        /// <param name="dateCreated">Only show recordings created on the specified date, in the form *YYYY-MM-DD*. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecordingList</returns>
        System.Threading.Tasks.Task<RecordingList> ListCallRecordingsAsync(string callId, string dateCreated = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Call Recordings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="callId">String that uniquely identifies this call resource.</param>

        /// <param name="dateCreated">Only show recordings created on the specified date, in the form *YYYY-MM-DD*. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecordingList)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecordingList>> ListCallRecordingsWithHttpInfoAsync(string callId, string dateCreated = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Calls
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="active">If active is set to true then all calls of the nature queued, ringing, inProgress are returned in the query. (optional, default to false)</param>

        /// <param name="to">Only show Calls to this phone number. (optional)</param>

        /// <param name="from">Only show Calls from this phone number. (optional)</param>

        /// <param name="status">Only show Calls currently in this status. May be `queued`, `ringing`, `inProgress`, `canceled`, `completed`, `failed`, `busy`, or `noAnswer`. (optional)</param>

        /// <param name="startTime">Only show Calls that started at or after this time, given as YYYY-MM-DD hh:mm:ss. (optional)</param>

        /// <param name="endTime">Only show Calls that ended at or before this time, given as YYYY-MM- DD hh:mm:ss. (optional)</param>

        /// <param name="parentCallId">Only show Calls spawned by the call with this ID. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallList</returns>
        System.Threading.Tasks.Task<CallList> ListCallsAsync(bool? active = default(bool?), string to = default(string), string from = default(string), CallStatus? status = default(CallStatus?), string startTime = default(string), string endTime = default(string), string parentCallId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Calls
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="active">If active is set to true then all calls of the nature queued, ringing, inProgress are returned in the query. (optional, default to false)</param>

        /// <param name="to">Only show Calls to this phone number. (optional)</param>

        /// <param name="from">Only show Calls from this phone number. (optional)</param>

        /// <param name="status">Only show Calls currently in this status. May be `queued`, `ringing`, `inProgress`, `canceled`, `completed`, `failed`, `busy`, or `noAnswer`. (optional)</param>

        /// <param name="startTime">Only show Calls that started at or after this time, given as YYYY-MM-DD hh:mm:ss. (optional)</param>

        /// <param name="endTime">Only show Calls that ended at or before this time, given as YYYY-MM- DD hh:mm:ss. (optional)</param>

        /// <param name="parentCallId">Only show Calls spawned by the call with this ID. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallList)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallList>> ListCallsWithHttpInfoAsync(bool? active = default(bool?), string to = default(string), string from = default(string), CallStatus? status = default(CallStatus?), string startTime = default(string), string endTime = default(string), string parentCallId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Conferences
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="status">Only show conferences that currently have the specified status. Valid values: `empty`, `populated`, `inProgress`, or `terminated`. (optional)</param>

        /// <param name="alias">List Conferences whose alias exactly matches this string. (optional)</param>

        /// <param name="dateCreated">Only show Conferences that were created on the specified date, in the form *YYYY-MM-DD*. (optional)</param>

        /// <param name="dateUpdated">Only show Conferences that were last updated on the specified date, in the form *YYYY-MM-DD*. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConferenceList</returns>
        System.Threading.Tasks.Task<ConferenceList> ListConferencesAsync(string status = default(string), string alias = default(string), string dateCreated = default(string), string dateUpdated = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Conferences
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="status">Only show conferences that currently have the specified status. Valid values: `empty`, `populated`, `inProgress`, or `terminated`. (optional)</param>

        /// <param name="alias">List Conferences whose alias exactly matches this string. (optional)</param>

        /// <param name="dateCreated">Only show Conferences that were created on the specified date, in the form *YYYY-MM-DD*. (optional)</param>

        /// <param name="dateUpdated">Only show Conferences that were last updated on the specified date, in the form *YYYY-MM-DD*. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConferenceList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConferenceList>> ListConferencesWithHttpInfoAsync(string status = default(string), string alias = default(string), string dateCreated = default(string), string dateUpdated = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Incoming Numbers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="phoneNumber">Only show incoming phone number resources that match this PCRE-compatible regular expression. (optional)</param>

        /// <param name="alias">Only show incoming phone numbers with aliases that exactly match this value. (optional)</param>

        /// <param name="region">State or province of this phone number. (optional)</param>

        /// <param name="country">Country of this phone number. (optional)</param>

        /// <param name="applicationId">ID of the Application that FreeClimb should contact if a Call or SMS arrives for this phone number or a Call from this number is placed. An incoming phone number is not useful until associated with an applicationId. (optional)</param>

        /// <param name="hasApplication">Indication of whether the phone number has an application linked to it. (optional, default to false)</param>

        /// <param name="voiceEnabled">Indicates whether the phone number can handle Calls. Typically set to true for all numbers. (optional, default to true) (deprecated)</param>

        /// <param name="smsEnabled">Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers. (optional, default to true) (deprecated)</param>

        /// <param name="capabilitiesVoice"> (optional)</param>

        /// <param name="capabilitiesSms"> (optional)</param>

        /// <param name="capabilitiesTollFree"> (optional)</param>

        /// <param name="capabilitiesTenDLC"> (optional)</param>

        /// <param name="capabilitiesShortCode"> (optional)</param>

        /// <param name="offnet">Indication of whether the phone number was registered as an offnet number. This field will be rendered only for requests to the IncomingPhone number resource. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncomingNumberList</returns>
        System.Threading.Tasks.Task<IncomingNumberList> ListIncomingNumbersAsync(string phoneNumber = default(string), string alias = default(string), string region = default(string), string country = default(string), string applicationId = default(string), bool? hasApplication = default(bool?), bool? voiceEnabled = default(bool?), bool? smsEnabled = default(bool?), bool? capabilitiesVoice = default(bool?), bool? capabilitiesSms = default(bool?), bool? capabilitiesTollFree = default(bool?), bool? capabilitiesTenDLC = default(bool?), bool? capabilitiesShortCode = default(bool?), bool? offnet = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Incoming Numbers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="phoneNumber">Only show incoming phone number resources that match this PCRE-compatible regular expression. (optional)</param>

        /// <param name="alias">Only show incoming phone numbers with aliases that exactly match this value. (optional)</param>

        /// <param name="region">State or province of this phone number. (optional)</param>

        /// <param name="country">Country of this phone number. (optional)</param>

        /// <param name="applicationId">ID of the Application that FreeClimb should contact if a Call or SMS arrives for this phone number or a Call from this number is placed. An incoming phone number is not useful until associated with an applicationId. (optional)</param>

        /// <param name="hasApplication">Indication of whether the phone number has an application linked to it. (optional, default to false)</param>

        /// <param name="voiceEnabled">Indicates whether the phone number can handle Calls. Typically set to true for all numbers. (optional, default to true) (deprecated)</param>

        /// <param name="smsEnabled">Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers. (optional, default to true) (deprecated)</param>

        /// <param name="capabilitiesVoice"> (optional)</param>

        /// <param name="capabilitiesSms"> (optional)</param>

        /// <param name="capabilitiesTollFree"> (optional)</param>

        /// <param name="capabilitiesTenDLC"> (optional)</param>

        /// <param name="capabilitiesShortCode"> (optional)</param>

        /// <param name="offnet">Indication of whether the phone number was registered as an offnet number. This field will be rendered only for requests to the IncomingPhone number resource. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncomingNumberList)</returns>
        System.Threading.Tasks.Task<ApiResponse<IncomingNumberList>> ListIncomingNumbersWithHttpInfoAsync(string phoneNumber = default(string), string alias = default(string), string region = default(string), string country = default(string), string applicationId = default(string), bool? hasApplication = default(bool?), bool? voiceEnabled = default(bool?), bool? smsEnabled = default(bool?), bool? capabilitiesVoice = default(bool?), bool? capabilitiesSms = default(bool?), bool? capabilitiesTollFree = default(bool?), bool? capabilitiesTenDLC = default(bool?), bool? capabilitiesShortCode = default(bool?), bool? offnet = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueueMemberList</returns>
        System.Threading.Tasks.Task<QueueMemberList> ListMembersAsync(string queueId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueueMemberList)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueueMemberList>> ListMembersWithHttpInfoAsync(string queueId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Participants
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="conferenceId">ID of the conference this participant is in.</param>

        /// <param name="talk">Only show Participants with the talk privilege. (optional)</param>

        /// <param name="listen">Only show Participants with the listen privilege. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConferenceParticipantList</returns>
        System.Threading.Tasks.Task<ConferenceParticipantList> ListParticipantsAsync(string conferenceId, bool? talk = default(bool?), bool? listen = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Participants
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="conferenceId">ID of the conference this participant is in.</param>

        /// <param name="talk">Only show Participants with the talk privilege. (optional)</param>

        /// <param name="listen">Only show Participants with the listen privilege. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConferenceParticipantList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConferenceParticipantList>> ListParticipantsWithHttpInfoAsync(string conferenceId, bool? talk = default(bool?), bool? listen = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Recordings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="callId">Show only Recordings made during the Call with this ID. (optional)</param>

        /// <param name="conferenceId">Show only Recordings made during the conference with this ID. (optional)</param>

        /// <param name="dateCreated">Only show Recordings created on this date, formatted as *YYYY-MM-DD*. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecordingList</returns>
        System.Threading.Tasks.Task<RecordingList> ListRecordingsAsync(string callId = default(string), string conferenceId = default(string), string dateCreated = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Recordings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="callId">Show only Recordings made during the Call with this ID. (optional)</param>

        /// <param name="conferenceId">Show only Recordings made during the conference with this ID. (optional)</param>

        /// <param name="dateCreated">Only show Recordings created on this date, formatted as *YYYY-MM-DD*. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecordingList)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecordingList>> ListRecordingsWithHttpInfoAsync(string callId = default(string), string conferenceId = default(string), string dateCreated = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List SMS Messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="to">Only show Messages to this phone number. (optional)</param>

        /// <param name="from">Only show Messages from this phone number. (optional)</param>

        /// <param name="beginTime">Only show Messages sent at or after this time (GMT), given as *YYYY-MM-DD hh:mm:ss*. (optional)</param>

        /// <param name="endTime">Only show messages sent at or before this time (GMT), given as *YYYY-MM-DD hh:mm*.. (optional)</param>

        /// <param name="direction">Either `inbound` or `outbound`. Only show Messages that were either *sent from* or *received by* FreeClimb. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessagesList</returns>
        System.Threading.Tasks.Task<MessagesList> ListSmsMessagesAsync(string to = default(string), string from = default(string), string beginTime = default(string), string endTime = default(string), MessageDirection? direction = default(MessageDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List SMS Messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="to">Only show Messages to this phone number. (optional)</param>

        /// <param name="from">Only show Messages from this phone number. (optional)</param>

        /// <param name="beginTime">Only show Messages sent at or after this time (GMT), given as *YYYY-MM-DD hh:mm:ss*. (optional)</param>

        /// <param name="endTime">Only show messages sent at or before this time (GMT), given as *YYYY-MM-DD hh:mm*.. (optional)</param>

        /// <param name="direction">Either `inbound` or `outbound`. Only show Messages that were either *sent from* or *received by* FreeClimb. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessagesList)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessagesList>> ListSmsMessagesWithHttpInfoAsync(string to = default(string), string from = default(string), string beginTime = default(string), string endTime = default(string), MessageDirection? direction = default(MessageDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Make a Call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="makeCallRequest">Call details for making a call (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallResult</returns>
        System.Threading.Tasks.Task<CallResult> MakeACallAsync(MakeCallRequest makeCallRequest = default(MakeCallRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Make a Call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="makeCallRequest">Call details for making a call (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallResult>> MakeACallWithHttpInfoAsync(MakeCallRequest makeCallRequest = default(MakeCallRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a Participant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="conferenceId">ID of the conference this participant is in.</param>

        /// <param name="callId">ID of the Call associated with this participant.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAParticipantAsync(string conferenceId, string callId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a Participant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="conferenceId">ID of the conference this participant is in.</param>

        /// <param name="callId">ID of the Call associated with this participant.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAParticipantWithHttpInfoAsync(string conferenceId, string callId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send an SMS Message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="messageRequest">Details to create a message</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageResult</returns>
        System.Threading.Tasks.Task<MessageResult> SendAnSmsMessageAsync(MessageRequest messageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send an SMS Message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="messageRequest">Details to create a message</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageResult>> SendAnSmsMessageWithHttpInfoAsync(MessageRequest messageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Stream a Recording File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> StreamARecordingFileAsync(string recordingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Stream a Recording File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> StreamARecordingFileWithHttpInfoAsync(string recordingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a Conference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="conferenceId">String that uniquely identifies this conference resource.</param>

        /// <param name="updateConferenceRequest">Conference Details to update (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConferenceResult</returns>
        System.Threading.Tasks.Task<ConferenceResult> UpdateAConferenceAsync(string conferenceId, UpdateConferenceRequest updateConferenceRequest = default(UpdateConferenceRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a Conference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="conferenceId">String that uniquely identifies this conference resource.</param>

        /// <param name="updateConferenceRequest">Conference Details to update (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConferenceResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConferenceResult>> UpdateAConferenceWithHttpInfoAsync(string conferenceId, UpdateConferenceRequest updateConferenceRequest = default(UpdateConferenceRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a Live Call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="callId">String that uniquely identifies this call resource.</param>

        /// <param name="updateCallRequest">Call details to update</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateALiveCallAsync(string callId, UpdateCallRequest updateCallRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a Live Call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="callId">String that uniquely identifies this call resource.</param>

        /// <param name="updateCallRequest">Call details to update</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateALiveCallWithHttpInfoAsync(string callId, UpdateCallRequest updateCallRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a Participant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="conferenceId">ID of the conference this participant is in.</param>

        /// <param name="callId">ID of the Call associated with this participant.</param>

        /// <param name="updateConferenceParticipantRequest">Conference participant details to update (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConferenceParticipantResult</returns>
        System.Threading.Tasks.Task<ConferenceParticipantResult> UpdateAParticipantAsync(string conferenceId, string callId, UpdateConferenceParticipantRequest updateConferenceParticipantRequest = default(UpdateConferenceParticipantRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a Participant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="conferenceId">ID of the conference this participant is in.</param>

        /// <param name="callId">ID of the Call associated with this participant.</param>

        /// <param name="updateConferenceParticipantRequest">Conference participant details to update (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConferenceParticipantResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConferenceParticipantResult>> UpdateAParticipantWithHttpInfoAsync(string conferenceId, string callId, UpdateConferenceParticipantRequest updateConferenceParticipantRequest = default(UpdateConferenceParticipantRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">A string that uniquely identifies this Queue resource.</param>

        /// <param name="queueRequest">Queue Details to update (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueueResult</returns>
        System.Threading.Tasks.Task<QueueResult> UpdateAQueueAsync(string queueId, QueueRequest queueRequest = default(QueueRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">A string that uniquely identifies this Queue resource.</param>

        /// <param name="queueRequest">Queue Details to update (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueueResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueueResult>> UpdateAQueueWithHttpInfoAsync(string queueId, QueueRequest queueRequest = default(QueueRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage an account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="accountRequest">Account details to update (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateAnAccountAsync(AccountRequest accountRequest = default(AccountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage an account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="accountRequest">Account details to update (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAnAccountWithHttpInfoAsync(AccountRequest accountRequest = default(AccountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="applicationId">A string that uniquely identifies this application resource.</param>

        /// <param name="applicationRequest">Application details to update. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationResult</returns>
        System.Threading.Tasks.Task<ApplicationResult> UpdateAnApplicationAsync(string applicationId, ApplicationRequest applicationRequest = default(ApplicationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="applicationId">A string that uniquely identifies this application resource.</param>

        /// <param name="applicationRequest">Application details to update. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationResult>> UpdateAnApplicationWithHttpInfoAsync(string applicationId, ApplicationRequest applicationRequest = default(ApplicationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an Incoming Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource.</param>

        /// <param name="incomingNumberRequest">Incoming Number details to update (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncomingNumberResult</returns>
        System.Threading.Tasks.Task<IncomingNumberResult> UpdateAnIncomingNumberAsync(string phoneNumberId, IncomingNumberRequest incomingNumberRequest = default(IncomingNumberRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an Incoming Number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource.</param>

        /// <param name="incomingNumberRequest">Incoming Number details to update (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncomingNumberResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IncomingNumberResult>> UpdateAnIncomingNumberWithHttpInfoAsync(string phoneNumberId, IncomingNumberRequest incomingNumberRequest = default(IncomingNumberRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private string accountId;
        private freeclimb.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = freeclimb.Client.Configuration.MergeConfigurations(
                freeclimb.Client.GlobalConfiguration.Instance,
                new freeclimb.Client.Configuration { BasePath = basePath }
            );
            this.Client = new freeclimb.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new freeclimb.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = freeclimb.Client.Configuration.DefaultExceptionFactory;
            this.accountId = this.Configuration.Username;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(freeclimb.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = freeclimb.Client.Configuration.MergeConfigurations(
                freeclimb.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new freeclimb.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new freeclimb.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = freeclimb.Client.Configuration.DefaultExceptionFactory;
            this.accountId = this.Configuration.Username;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(freeclimb.Client.ISynchronousClient client, freeclimb.Client.IAsynchronousClient asyncClient, freeclimb.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = freeclimb.Client.Configuration.DefaultExceptionFactory;
            this.accountId = this.Configuration.Username;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public freeclimb.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public freeclimb.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public freeclimb.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public freeclimb.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Buy a Phone Number 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyIncomingNumberRequest">Incoming Number transaction details</param>
        /// <returns>IncomingNumberResult</returns>
        public IncomingNumberResult BuyAPhoneNumber(BuyIncomingNumberRequest buyIncomingNumberRequest)
        {
            freeclimb.Client.ApiResponse<IncomingNumberResult> localVarResponse = BuyAPhoneNumberWithHttpInfo(buyIncomingNumberRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Buy a Phone Number 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyIncomingNumberRequest">Incoming Number transaction details</param>
        /// <returns>ApiResponse of IncomingNumberResult</returns>
        public freeclimb.Client.ApiResponse<IncomingNumberResult> BuyAPhoneNumberWithHttpInfo(BuyIncomingNumberRequest buyIncomingNumberRequest)
        {

            // verify the required parameter 'buyIncomingNumberRequest' is set
            if (buyIncomingNumberRequest == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'buyIncomingNumberRequest' when calling DefaultApi->BuyAPhoneNumber");
            }


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = buyIncomingNumberRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IncomingNumberResult>("/Accounts/{accountId}/IncomingPhoneNumbers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuyAPhoneNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Buy a Phone Number 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="buyIncomingNumberRequest">Incoming Number transaction details</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncomingNumberResult</returns>
        public async System.Threading.Tasks.Task<IncomingNumberResult> BuyAPhoneNumberAsync(BuyIncomingNumberRequest buyIncomingNumberRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<IncomingNumberResult> localVarResponse = await BuyAPhoneNumberWithHttpInfoAsync(buyIncomingNumberRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Buy a Phone Number 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="buyIncomingNumberRequest">Incoming Number transaction details</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncomingNumberResult)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<IncomingNumberResult>> BuyAPhoneNumberWithHttpInfoAsync(BuyIncomingNumberRequest buyIncomingNumberRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'buyIncomingNumberRequest' is set
            if (buyIncomingNumberRequest == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'buyIncomingNumberRequest' when calling DefaultApi->BuyAPhoneNumber");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = buyIncomingNumberRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IncomingNumberResult>("/Accounts/{accountId}/IncomingPhoneNumbers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuyAPhoneNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Conference 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConferenceRequest">Conference to create (optional)</param>
        /// <returns>ConferenceResult</returns>
        public ConferenceResult CreateAConference(CreateConferenceRequest createConferenceRequest = default(CreateConferenceRequest))
        {
            freeclimb.Client.ApiResponse<ConferenceResult> localVarResponse = CreateAConferenceWithHttpInfo(createConferenceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Conference 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createConferenceRequest">Conference to create (optional)</param>
        /// <returns>ApiResponse of ConferenceResult</returns>
        public freeclimb.Client.ApiResponse<ConferenceResult> CreateAConferenceWithHttpInfo(CreateConferenceRequest createConferenceRequest = default(CreateConferenceRequest))
        {


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = createConferenceRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConferenceResult>("/Accounts/{accountId}/Conferences", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAConference", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Conference 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="createConferenceRequest">Conference to create (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConferenceResult</returns>
        public async System.Threading.Tasks.Task<ConferenceResult> CreateAConferenceAsync(CreateConferenceRequest createConferenceRequest = default(CreateConferenceRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<ConferenceResult> localVarResponse = await CreateAConferenceWithHttpInfoAsync(createConferenceRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Conference 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="createConferenceRequest">Conference to create (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConferenceResult)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<ConferenceResult>> CreateAConferenceWithHttpInfoAsync(CreateConferenceRequest createConferenceRequest = default(CreateConferenceRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = createConferenceRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConferenceResult>("/Accounts/{accountId}/Conferences", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAConference", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Queue 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueRequest">Queue details used to create a queue (optional)</param>
        /// <returns>QueueResult</returns>
        public QueueResult CreateAQueue(QueueRequest queueRequest = default(QueueRequest))
        {
            freeclimb.Client.ApiResponse<QueueResult> localVarResponse = CreateAQueueWithHttpInfo(queueRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Queue 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueRequest">Queue details used to create a queue (optional)</param>
        /// <returns>ApiResponse of QueueResult</returns>
        public freeclimb.Client.ApiResponse<QueueResult> CreateAQueueWithHttpInfo(QueueRequest queueRequest = default(QueueRequest))
        {


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = queueRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<QueueResult>("/Accounts/{accountId}/Queues", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAQueue", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Queue 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueRequest">Queue details used to create a queue (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueueResult</returns>
        public async System.Threading.Tasks.Task<QueueResult> CreateAQueueAsync(QueueRequest queueRequest = default(QueueRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<QueueResult> localVarResponse = await CreateAQueueWithHttpInfoAsync(queueRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Queue 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueRequest">Queue details used to create a queue (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueueResult)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<QueueResult>> CreateAQueueWithHttpInfoAsync(QueueRequest queueRequest = default(QueueRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = queueRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<QueueResult>("/Accounts/{accountId}/Queues", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAQueue", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an application 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationRequest">Application Details (optional)</param>
        /// <returns>ApplicationResult</returns>
        public ApplicationResult CreateAnApplication(ApplicationRequest applicationRequest = default(ApplicationRequest))
        {
            freeclimb.Client.ApiResponse<ApplicationResult> localVarResponse = CreateAnApplicationWithHttpInfo(applicationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an application 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationRequest">Application Details (optional)</param>
        /// <returns>ApiResponse of ApplicationResult</returns>
        public freeclimb.Client.ApiResponse<ApplicationResult> CreateAnApplicationWithHttpInfo(ApplicationRequest applicationRequest = default(ApplicationRequest))
        {


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = applicationRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApplicationResult>("/Accounts/{accountId}/Applications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAnApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an application 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="applicationRequest">Application Details (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationResult</returns>
        public async System.Threading.Tasks.Task<ApplicationResult> CreateAnApplicationAsync(ApplicationRequest applicationRequest = default(ApplicationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<ApplicationResult> localVarResponse = await CreateAnApplicationWithHttpInfoAsync(applicationRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an application 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="applicationRequest">Application Details (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationResult)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<ApplicationResult>> CreateAnApplicationWithHttpInfoAsync(ApplicationRequest applicationRequest = default(ApplicationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = applicationRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApplicationResult>("/Accounts/{accountId}/Applications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAnApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Recording 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>
        /// <returns></returns>
        public void DeleteARecording(string recordingId)
        {
            DeleteARecordingWithHttpInfo(recordingId);
        }

        /// <summary>
        /// Delete a Recording 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public freeclimb.Client.ApiResponse<Object> DeleteARecordingWithHttpInfo(string recordingId)
        {

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'recordingId' when calling DefaultApi->DeleteARecording");
            }


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", freeclimb.Client.ClientUtils.ParameterToString(recordingId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/Accounts/{accountId}/Recordings/{recordingId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteARecording", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Recording 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteARecordingAsync(string recordingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteARecordingWithHttpInfoAsync(recordingId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Recording 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<Object>> DeleteARecordingWithHttpInfoAsync(string recordingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'recordingId' when calling DefaultApi->DeleteARecording");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", freeclimb.Client.ClientUtils.ParameterToString(recordingId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/Accounts/{accountId}/Recordings/{recordingId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteARecording", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an application 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">String that uniquely identifies this application resource.</param>
        /// <returns></returns>
        public void DeleteAnApplication(string applicationId)
        {
            DeleteAnApplicationWithHttpInfo(applicationId);
        }

        /// <summary>
        /// Delete an application 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">String that uniquely identifies this application resource.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public freeclimb.Client.ApiResponse<Object> DeleteAnApplicationWithHttpInfo(string applicationId)
        {

            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->DeleteAnApplication");
            }


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("applicationId", freeclimb.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/Accounts/{accountId}/Applications/{applicationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAnApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an application 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="applicationId">String that uniquely identifies this application resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAnApplicationAsync(string applicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAnApplicationWithHttpInfoAsync(applicationId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an application 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="applicationId">String that uniquely identifies this application resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<Object>> DeleteAnApplicationWithHttpInfoAsync(string applicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->DeleteAnApplication");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("applicationId", freeclimb.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/Accounts/{accountId}/Applications/{applicationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAnApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Incoming Number 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource.</param>
        /// <returns></returns>
        public void DeleteAnIncomingNumber(string phoneNumberId)
        {
            DeleteAnIncomingNumberWithHttpInfo(phoneNumberId);
        }

        /// <summary>
        /// Delete an Incoming Number 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public freeclimb.Client.ApiResponse<Object> DeleteAnIncomingNumberWithHttpInfo(string phoneNumberId)
        {

            // verify the required parameter 'phoneNumberId' is set
            if (phoneNumberId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'phoneNumberId' when calling DefaultApi->DeleteAnIncomingNumber");
            }


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("phoneNumberId", freeclimb.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/Accounts/{accountId}/IncomingPhoneNumbers/{phoneNumberId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAnIncomingNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Incoming Number 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAnIncomingNumberAsync(string phoneNumberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAnIncomingNumberWithHttpInfoAsync(phoneNumberId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an Incoming Number 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<Object>> DeleteAnIncomingNumberWithHttpInfoAsync(string phoneNumberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'phoneNumberId' is set
            if (phoneNumberId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'phoneNumberId' when calling DefaultApi->DeleteAnIncomingNumber");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("phoneNumberId", freeclimb.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/Accounts/{accountId}/IncomingPhoneNumbers/{phoneNumberId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAnIncomingNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dequeue a Member 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>
        /// <param name="callId">ID if the Call that the Member belongs to</param>
        /// <returns>QueueMember</returns>
        public QueueMember DequeueAMember(string queueId, string callId)
        {
            freeclimb.Client.ApiResponse<QueueMember> localVarResponse = DequeueAMemberWithHttpInfo(queueId, callId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dequeue a Member 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>
        /// <param name="callId">ID if the Call that the Member belongs to</param>
        /// <returns>ApiResponse of QueueMember</returns>
        public freeclimb.Client.ApiResponse<QueueMember> DequeueAMemberWithHttpInfo(string queueId, string callId)
        {

            // verify the required parameter 'queueId' is set
            if (queueId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'queueId' when calling DefaultApi->DequeueAMember");
            }


            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'callId' when calling DefaultApi->DequeueAMember");
            }


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueId", freeclimb.Client.ClientUtils.ParameterToString(queueId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", freeclimb.Client.ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<QueueMember>("/Accounts/{accountId}/Queues/{queueId}/Members/{callId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DequeueAMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dequeue a Member 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>

        /// <param name="callId">ID if the Call that the Member belongs to</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueueMember</returns>
        public async System.Threading.Tasks.Task<QueueMember> DequeueAMemberAsync(string queueId, string callId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<QueueMember> localVarResponse = await DequeueAMemberWithHttpInfoAsync(queueId, callId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dequeue a Member 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>

        /// <param name="callId">ID if the Call that the Member belongs to</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueueMember)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<QueueMember>> DequeueAMemberWithHttpInfoAsync(string queueId, string callId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'queueId' is set
            if (queueId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'queueId' when calling DefaultApi->DequeueAMember");
            }


            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'callId' when calling DefaultApi->DequeueAMember");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueId", freeclimb.Client.ClientUtils.ParameterToString(queueId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", freeclimb.Client.ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<QueueMember>("/Accounts/{accountId}/Queues/{queueId}/Members/{callId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DequeueAMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dequeue Head Member 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">String that uniquely identifies this queue resource.</param>
        /// <returns>QueueMember</returns>
        public QueueMember DequeueHeadMember(string queueId)
        {
            freeclimb.Client.ApiResponse<QueueMember> localVarResponse = DequeueHeadMemberWithHttpInfo(queueId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dequeue Head Member 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">String that uniquely identifies this queue resource.</param>
        /// <returns>ApiResponse of QueueMember</returns>
        public freeclimb.Client.ApiResponse<QueueMember> DequeueHeadMemberWithHttpInfo(string queueId)
        {

            // verify the required parameter 'queueId' is set
            if (queueId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'queueId' when calling DefaultApi->DequeueHeadMember");
            }


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueId", freeclimb.Client.ClientUtils.ParameterToString(queueId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<QueueMember>("/Accounts/{accountId}/Queues/{queueId}/Members/Front", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DequeueHeadMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dequeue Head Member 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">String that uniquely identifies this queue resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueueMember</returns>
        public async System.Threading.Tasks.Task<QueueMember> DequeueHeadMemberAsync(string queueId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<QueueMember> localVarResponse = await DequeueHeadMemberWithHttpInfoAsync(queueId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dequeue Head Member 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">String that uniquely identifies this queue resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueueMember)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<QueueMember>> DequeueHeadMemberWithHttpInfoAsync(string queueId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'queueId' is set
            if (queueId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'queueId' when calling DefaultApi->DequeueHeadMember");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueId", freeclimb.Client.ClientUtils.ParameterToString(queueId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<QueueMember>("/Accounts/{accountId}/Queues/{queueId}/Members/Front", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DequeueHeadMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download a Recording File 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadARecordingFile(string recordingId)
        {
            freeclimb.Client.ApiResponse<System.IO.Stream> localVarResponse = DownloadARecordingFileWithHttpInfo(recordingId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download a Recording File 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public freeclimb.Client.ApiResponse<System.IO.Stream> DownloadARecordingFileWithHttpInfo(string recordingId)
        {

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'recordingId' when calling DefaultApi->DownloadARecordingFile");
            }


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "audio/x-wav"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", freeclimb.Client.ClientUtils.ParameterToString(recordingId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/Accounts/{accountId}/Recordings/{recordingId}/Download", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadARecordingFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download a Recording File 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadARecordingFileAsync(string recordingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<System.IO.Stream> localVarResponse = await DownloadARecordingFileWithHttpInfoAsync(recordingId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download a Recording File 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<System.IO.Stream>> DownloadARecordingFileWithHttpInfoAsync(string recordingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'recordingId' when calling DefaultApi->DownloadARecordingFile");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "audio/x-wav"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", freeclimb.Client.ClientUtils.ParameterToString(recordingId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/Accounts/{accountId}/Recordings/{recordingId}/Download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadARecordingFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Filter Logs 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterLogsRequest">Filter logs request paramters</param>
        /// <returns>LogList</returns>
        public LogList FilterLogs(FilterLogsRequest filterLogsRequest)
        {
            freeclimb.Client.ApiResponse<LogList> localVarResponse = FilterLogsWithHttpInfo(filterLogsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Filter Logs 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterLogsRequest">Filter logs request paramters</param>
        /// <returns>ApiResponse of LogList</returns>
        public freeclimb.Client.ApiResponse<LogList> FilterLogsWithHttpInfo(FilterLogsRequest filterLogsRequest)
        {

            // verify the required parameter 'filterLogsRequest' is set
            if (filterLogsRequest == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'filterLogsRequest' when calling DefaultApi->FilterLogs");
            }


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = filterLogsRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LogList>("/Accounts/{accountId}/Logs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilterLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Filter Logs 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="filterLogsRequest">Filter logs request paramters</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogList</returns>
        public async System.Threading.Tasks.Task<LogList> FilterLogsAsync(FilterLogsRequest filterLogsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<LogList> localVarResponse = await FilterLogsWithHttpInfoAsync(filterLogsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Filter Logs 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="filterLogsRequest">Filter logs request paramters</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogList)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<LogList>> FilterLogsWithHttpInfoAsync(FilterLogsRequest filterLogsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'filterLogsRequest' is set
            if (filterLogsRequest == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'filterLogsRequest' when calling DefaultApi->FilterLogs");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = filterLogsRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LogList>("/Accounts/{accountId}/Logs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilterLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Call 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">String that uniquely identifies this call resource.</param>
        /// <returns>CallResult</returns>
        public CallResult GetACall(string callId)
        {
            freeclimb.Client.ApiResponse<CallResult> localVarResponse = GetACallWithHttpInfo(callId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Call 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">String that uniquely identifies this call resource.</param>
        /// <returns>ApiResponse of CallResult</returns>
        public freeclimb.Client.ApiResponse<CallResult> GetACallWithHttpInfo(string callId)
        {

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'callId' when calling DefaultApi->GetACall");
            }


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", freeclimb.Client.ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CallResult>("/Accounts/{accountId}/Calls/{callId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetACall", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Call 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="callId">String that uniquely identifies this call resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallResult</returns>
        public async System.Threading.Tasks.Task<CallResult> GetACallAsync(string callId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<CallResult> localVarResponse = await GetACallWithHttpInfoAsync(callId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Call 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="callId">String that uniquely identifies this call resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallResult)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<CallResult>> GetACallWithHttpInfoAsync(string callId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'callId' when calling DefaultApi->GetACall");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", freeclimb.Client.ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CallResult>("/Accounts/{accountId}/Calls/{callId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetACall", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Conference 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">A string that uniquely identifies this conference resource.</param>
        /// <returns>ConferenceResult</returns>
        public ConferenceResult GetAConference(string conferenceId)
        {
            freeclimb.Client.ApiResponse<ConferenceResult> localVarResponse = GetAConferenceWithHttpInfo(conferenceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Conference 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">A string that uniquely identifies this conference resource.</param>
        /// <returns>ApiResponse of ConferenceResult</returns>
        public freeclimb.Client.ApiResponse<ConferenceResult> GetAConferenceWithHttpInfo(string conferenceId)
        {

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling DefaultApi->GetAConference");
            }


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", freeclimb.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConferenceResult>("/Accounts/{accountId}/Conferences/{conferenceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAConference", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Conference 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="conferenceId">A string that uniquely identifies this conference resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConferenceResult</returns>
        public async System.Threading.Tasks.Task<ConferenceResult> GetAConferenceAsync(string conferenceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<ConferenceResult> localVarResponse = await GetAConferenceWithHttpInfoAsync(conferenceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Conference 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="conferenceId">A string that uniquely identifies this conference resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConferenceResult)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<ConferenceResult>> GetAConferenceWithHttpInfoAsync(string conferenceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling DefaultApi->GetAConference");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", freeclimb.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConferenceResult>("/Accounts/{accountId}/Conferences/{conferenceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAConference", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Member 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>
        /// <param name="callId">ID of the Call that the Member belongs to</param>
        /// <returns>QueueMember</returns>
        public QueueMember GetAMember(string queueId, string callId)
        {
            freeclimb.Client.ApiResponse<QueueMember> localVarResponse = GetAMemberWithHttpInfo(queueId, callId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Member 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>
        /// <param name="callId">ID of the Call that the Member belongs to</param>
        /// <returns>ApiResponse of QueueMember</returns>
        public freeclimb.Client.ApiResponse<QueueMember> GetAMemberWithHttpInfo(string queueId, string callId)
        {

            // verify the required parameter 'queueId' is set
            if (queueId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'queueId' when calling DefaultApi->GetAMember");
            }


            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'callId' when calling DefaultApi->GetAMember");
            }


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueId", freeclimb.Client.ClientUtils.ParameterToString(queueId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", freeclimb.Client.ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<QueueMember>("/Accounts/{accountId}/Queues/{queueId}/Members/{callId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Member 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>

        /// <param name="callId">ID of the Call that the Member belongs to</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueueMember</returns>
        public async System.Threading.Tasks.Task<QueueMember> GetAMemberAsync(string queueId, string callId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<QueueMember> localVarResponse = await GetAMemberWithHttpInfoAsync(queueId, callId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Member 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>

        /// <param name="callId">ID of the Call that the Member belongs to</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueueMember)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<QueueMember>> GetAMemberWithHttpInfoAsync(string queueId, string callId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'queueId' is set
            if (queueId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'queueId' when calling DefaultApi->GetAMember");
            }


            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'callId' when calling DefaultApi->GetAMember");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueId", freeclimb.Client.ClientUtils.ParameterToString(queueId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", freeclimb.Client.ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<QueueMember>("/Accounts/{accountId}/Queues/{queueId}/Members/{callId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Participant 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">ID of the conference this participant is in.</param>
        /// <param name="callId">ID of the Call associated with this participant.</param>
        /// <returns>ConferenceParticipantResult</returns>
        public ConferenceParticipantResult GetAParticipant(string conferenceId, string callId)
        {
            freeclimb.Client.ApiResponse<ConferenceParticipantResult> localVarResponse = GetAParticipantWithHttpInfo(conferenceId, callId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Participant 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">ID of the conference this participant is in.</param>
        /// <param name="callId">ID of the Call associated with this participant.</param>
        /// <returns>ApiResponse of ConferenceParticipantResult</returns>
        public freeclimb.Client.ApiResponse<ConferenceParticipantResult> GetAParticipantWithHttpInfo(string conferenceId, string callId)
        {

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling DefaultApi->GetAParticipant");
            }


            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'callId' when calling DefaultApi->GetAParticipant");
            }


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", freeclimb.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", freeclimb.Client.ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConferenceParticipantResult>("/Accounts/{accountId}/Conferences/{conferenceId}/Participants/{callId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAParticipant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Participant 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="conferenceId">ID of the conference this participant is in.</param>

        /// <param name="callId">ID of the Call associated with this participant.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConferenceParticipantResult</returns>
        public async System.Threading.Tasks.Task<ConferenceParticipantResult> GetAParticipantAsync(string conferenceId, string callId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<ConferenceParticipantResult> localVarResponse = await GetAParticipantWithHttpInfoAsync(conferenceId, callId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Participant 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="conferenceId">ID of the conference this participant is in.</param>

        /// <param name="callId">ID of the Call associated with this participant.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConferenceParticipantResult)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<ConferenceParticipantResult>> GetAParticipantWithHttpInfoAsync(string conferenceId, string callId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling DefaultApi->GetAParticipant");
            }


            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'callId' when calling DefaultApi->GetAParticipant");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", freeclimb.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", freeclimb.Client.ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConferenceParticipantResult>("/Accounts/{accountId}/Conferences/{conferenceId}/Participants/{callId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAParticipant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Queue 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">A string that uniquely identifies this queue resource.</param>
        /// <returns>QueueResult</returns>
        public QueueResult GetAQueue(string queueId)
        {
            freeclimb.Client.ApiResponse<QueueResult> localVarResponse = GetAQueueWithHttpInfo(queueId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Queue 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">A string that uniquely identifies this queue resource.</param>
        /// <returns>ApiResponse of QueueResult</returns>
        public freeclimb.Client.ApiResponse<QueueResult> GetAQueueWithHttpInfo(string queueId)
        {

            // verify the required parameter 'queueId' is set
            if (queueId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'queueId' when calling DefaultApi->GetAQueue");
            }


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueId", freeclimb.Client.ClientUtils.ParameterToString(queueId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<QueueResult>("/Accounts/{accountId}/Queues/{queueId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAQueue", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Queue 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">A string that uniquely identifies this queue resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueueResult</returns>
        public async System.Threading.Tasks.Task<QueueResult> GetAQueueAsync(string queueId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<QueueResult> localVarResponse = await GetAQueueWithHttpInfoAsync(queueId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Queue 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">A string that uniquely identifies this queue resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueueResult)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<QueueResult>> GetAQueueWithHttpInfoAsync(string queueId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'queueId' is set
            if (queueId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'queueId' when calling DefaultApi->GetAQueue");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueId", freeclimb.Client.ClientUtils.ParameterToString(queueId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<QueueResult>("/Accounts/{accountId}/Queues/{queueId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAQueue", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Recording 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>
        /// <returns>RecordingResult</returns>
        public RecordingResult GetARecording(string recordingId)
        {
            freeclimb.Client.ApiResponse<RecordingResult> localVarResponse = GetARecordingWithHttpInfo(recordingId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Recording 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>
        /// <returns>ApiResponse of RecordingResult</returns>
        public freeclimb.Client.ApiResponse<RecordingResult> GetARecordingWithHttpInfo(string recordingId)
        {

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'recordingId' when calling DefaultApi->GetARecording");
            }


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", freeclimb.Client.ClientUtils.ParameterToString(recordingId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RecordingResult>("/Accounts/{accountId}/Recordings/{recordingId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetARecording", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Recording 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecordingResult</returns>
        public async System.Threading.Tasks.Task<RecordingResult> GetARecordingAsync(string recordingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<RecordingResult> localVarResponse = await GetARecordingWithHttpInfoAsync(recordingId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Recording 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecordingResult)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<RecordingResult>> GetARecordingWithHttpInfoAsync(string recordingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'recordingId' when calling DefaultApi->GetARecording");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", freeclimb.Client.ClientUtils.ParameterToString(recordingId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RecordingResult>("/Accounts/{accountId}/Recordings/{recordingId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetARecording", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an Account 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AccountResult</returns>
        public AccountResult GetAnAccount()
        {
            freeclimb.Client.ApiResponse<AccountResult> localVarResponse = GetAnAccountWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Account 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AccountResult</returns>
        public freeclimb.Client.ApiResponse<AccountResult> GetAnAccountWithHttpInfo()
        {

            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountResult>("/Accounts/{accountId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an Account 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResult</returns>
        public async System.Threading.Tasks.Task<AccountResult> GetAnAccountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<AccountResult> localVarResponse = await GetAnAccountWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Account 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResult)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<AccountResult>> GetAnAccountWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountResult>("/Accounts/{accountId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an Application 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">A string that uniquely identifies this application resource.</param>
        /// <returns>ApplicationResult</returns>
        public ApplicationResult GetAnApplication(string applicationId)
        {
            freeclimb.Client.ApiResponse<ApplicationResult> localVarResponse = GetAnApplicationWithHttpInfo(applicationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Application 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">A string that uniquely identifies this application resource.</param>
        /// <returns>ApiResponse of ApplicationResult</returns>
        public freeclimb.Client.ApiResponse<ApplicationResult> GetAnApplicationWithHttpInfo(string applicationId)
        {

            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->GetAnApplication");
            }


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("applicationId", freeclimb.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApplicationResult>("/Accounts/{accountId}/Applications/{applicationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an Application 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="applicationId">A string that uniquely identifies this application resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationResult</returns>
        public async System.Threading.Tasks.Task<ApplicationResult> GetAnApplicationAsync(string applicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<ApplicationResult> localVarResponse = await GetAnApplicationWithHttpInfoAsync(applicationId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Application 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="applicationId">A string that uniquely identifies this application resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationResult)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<ApplicationResult>> GetAnApplicationWithHttpInfoAsync(string applicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->GetAnApplication");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("applicationId", freeclimb.Client.ClientUtils.ParameterToString(applicationId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApplicationResult>("/Accounts/{accountId}/Applications/{applicationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an Incoming Number 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource.</param>
        /// <returns>IncomingNumberResult</returns>
        public IncomingNumberResult GetAnIncomingNumber(string phoneNumberId)
        {
            freeclimb.Client.ApiResponse<IncomingNumberResult> localVarResponse = GetAnIncomingNumberWithHttpInfo(phoneNumberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Incoming Number 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource.</param>
        /// <returns>ApiResponse of IncomingNumberResult</returns>
        public freeclimb.Client.ApiResponse<IncomingNumberResult> GetAnIncomingNumberWithHttpInfo(string phoneNumberId)
        {

            // verify the required parameter 'phoneNumberId' is set
            if (phoneNumberId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'phoneNumberId' when calling DefaultApi->GetAnIncomingNumber");
            }


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("phoneNumberId", freeclimb.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IncomingNumberResult>("/Accounts/{accountId}/IncomingPhoneNumbers/{phoneNumberId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnIncomingNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an Incoming Number 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncomingNumberResult</returns>
        public async System.Threading.Tasks.Task<IncomingNumberResult> GetAnIncomingNumberAsync(string phoneNumberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<IncomingNumberResult> localVarResponse = await GetAnIncomingNumberWithHttpInfoAsync(phoneNumberId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Incoming Number 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncomingNumberResult)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<IncomingNumberResult>> GetAnIncomingNumberWithHttpInfoAsync(string phoneNumberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'phoneNumberId' is set
            if (phoneNumberId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'phoneNumberId' when calling DefaultApi->GetAnIncomingNumber");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("phoneNumberId", freeclimb.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IncomingNumberResult>("/Accounts/{accountId}/IncomingPhoneNumbers/{phoneNumberId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnIncomingNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an SMS Message 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">String that uniquely identifies this Message resource.</param>
        /// <returns>MessageResult</returns>
        public MessageResult GetAnSmsMessage(string messageId)
        {
            freeclimb.Client.ApiResponse<MessageResult> localVarResponse = GetAnSmsMessageWithHttpInfo(messageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an SMS Message 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">String that uniquely identifies this Message resource.</param>
        /// <returns>ApiResponse of MessageResult</returns>
        public freeclimb.Client.ApiResponse<MessageResult> GetAnSmsMessageWithHttpInfo(string messageId)
        {

            // verify the required parameter 'messageId' is set
            if (messageId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'messageId' when calling DefaultApi->GetAnSmsMessage");
            }


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("messageId", freeclimb.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MessageResult>("/Accounts/{accountId}/Messages/{messageId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnSmsMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an SMS Message 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="messageId">String that uniquely identifies this Message resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageResult</returns>
        public async System.Threading.Tasks.Task<MessageResult> GetAnSmsMessageAsync(string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<MessageResult> localVarResponse = await GetAnSmsMessageWithHttpInfoAsync(messageId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an SMS Message 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="messageId">String that uniquely identifies this Message resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageResult)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<MessageResult>> GetAnSmsMessageWithHttpInfoAsync(string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'messageId' is set
            if (messageId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'messageId' when calling DefaultApi->GetAnSmsMessage");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("messageId", freeclimb.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MessageResult>("/Accounts/{accountId}/Messages/{messageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnSmsMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Head Member 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>
        /// <returns>QueueMember</returns>
        public QueueMember GetHeadMember(string queueId)
        {
            freeclimb.Client.ApiResponse<QueueMember> localVarResponse = GetHeadMemberWithHttpInfo(queueId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Head Member 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>
        /// <returns>ApiResponse of QueueMember</returns>
        public freeclimb.Client.ApiResponse<QueueMember> GetHeadMemberWithHttpInfo(string queueId)
        {

            // verify the required parameter 'queueId' is set
            if (queueId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'queueId' when calling DefaultApi->GetHeadMember");
            }


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueId", freeclimb.Client.ClientUtils.ParameterToString(queueId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<QueueMember>("/Accounts/{accountId}/Queues/{queueId}/Members/Front", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHeadMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Head Member 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueueMember</returns>
        public async System.Threading.Tasks.Task<QueueMember> GetHeadMemberAsync(string queueId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<QueueMember> localVarResponse = await GetHeadMemberWithHttpInfoAsync(queueId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Head Member 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueueMember)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<QueueMember>> GetHeadMemberWithHttpInfoAsync(string queueId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'queueId' is set
            if (queueId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'queueId' when calling DefaultApi->GetHeadMember");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueId", freeclimb.Client.ClientUtils.ParameterToString(queueId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<QueueMember>("/Accounts/{accountId}/Queues/{queueId}/Members/Front", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHeadMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Active Queues 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Return only the Queue resources with aliases that exactly match this name. (optional)</param>
        /// <returns>QueueList</returns>
        public QueueList ListActiveQueues(string alias = default(string))
        {
            freeclimb.Client.ApiResponse<QueueList> localVarResponse = ListActiveQueuesWithHttpInfo(alias);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Active Queues 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Return only the Queue resources with aliases that exactly match this name. (optional)</param>
        /// <returns>ApiResponse of QueueList</returns>
        public freeclimb.Client.ApiResponse<QueueList> ListActiveQueuesWithHttpInfo(string alias = default(string))
        {


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (alias != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "alias", alias));
            }

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<QueueList>("/Accounts/{accountId}/Queues", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListActiveQueues", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Active Queues 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="alias">Return only the Queue resources with aliases that exactly match this name. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueueList</returns>
        public async System.Threading.Tasks.Task<QueueList> ListActiveQueuesAsync(string alias = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<QueueList> localVarResponse = await ListActiveQueuesWithHttpInfoAsync(alias, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Active Queues 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="alias">Return only the Queue resources with aliases that exactly match this name. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueueList)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<QueueList>> ListActiveQueuesWithHttpInfoAsync(string alias = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (alias != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "alias", alias));
            }

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<QueueList>("/Accounts/{accountId}/Queues", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListActiveQueues", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List All Account Logs 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>LogList</returns>
        public LogList ListAllAccountLogs()
        {
            freeclimb.Client.ApiResponse<LogList> localVarResponse = ListAllAccountLogsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List All Account Logs 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of LogList</returns>
        public freeclimb.Client.ApiResponse<LogList> ListAllAccountLogsWithHttpInfo()
        {

            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LogList>("/Accounts/{accountId}/Logs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAllAccountLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List All Account Logs 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogList</returns>
        public async System.Threading.Tasks.Task<LogList> ListAllAccountLogsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<LogList> localVarResponse = await ListAllAccountLogsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List All Account Logs 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogList)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<LogList>> ListAllAccountLogsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LogList>("/Accounts/{accountId}/Logs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAllAccountLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List applications 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Return only applications with aliases that exactly match this value. (optional)</param>
        /// <returns>ApplicationList</returns>
        public ApplicationList ListApplications(string alias = default(string))
        {
            freeclimb.Client.ApiResponse<ApplicationList> localVarResponse = ListApplicationsWithHttpInfo(alias);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List applications 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Return only applications with aliases that exactly match this value. (optional)</param>
        /// <returns>ApiResponse of ApplicationList</returns>
        public freeclimb.Client.ApiResponse<ApplicationList> ListApplicationsWithHttpInfo(string alias = default(string))
        {


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (alias != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "alias", alias));
            }

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApplicationList>("/Accounts/{accountId}/Applications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListApplications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List applications 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="alias">Return only applications with aliases that exactly match this value. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationList</returns>
        public async System.Threading.Tasks.Task<ApplicationList> ListApplicationsAsync(string alias = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<ApplicationList> localVarResponse = await ListApplicationsWithHttpInfoAsync(alias, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List applications 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="alias">Return only applications with aliases that exactly match this value. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationList)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<ApplicationList>> ListApplicationsWithHttpInfoAsync(string alias = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (alias != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "alias", alias));
            }

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApplicationList>("/Accounts/{accountId}/Applications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListApplications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List available numbers 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">PCRE-compatible regular expression to filter against &#x60;phoneNumber&#x60; field, which is in E.164 format. (optional)</param>
        /// <param name="region">State or province of this phone number. (optional)</param>
        /// <param name="country">Country of this phone number. (optional)</param>
        /// <param name="voiceEnabled">Indicates whether the phone number can handle Calls. Typically set to true for all numbers. (optional, default to true)</param>
        /// <param name="smsEnabled">Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers. (optional, default to true)</param>
        /// <param name="capabilitiesVoice"> (optional)</param>
        /// <param name="capabilitiesSms"> (optional)</param>
        /// <param name="capabilitiesTollFree"> (optional)</param>
        /// <param name="capabilitiesTenDLC"> (optional)</param>
        /// <param name="capabilitiesShortCode"> (optional)</param>
        /// <returns>AvailableNumberList</returns>
        public AvailableNumberList ListAvailableNumbers(string phoneNumber = default(string), string region = default(string), string country = default(string), bool? voiceEnabled = default(bool?), bool? smsEnabled = default(bool?), bool? capabilitiesVoice = default(bool?), bool? capabilitiesSms = default(bool?), bool? capabilitiesTollFree = default(bool?), bool? capabilitiesTenDLC = default(bool?), bool? capabilitiesShortCode = default(bool?))
        {
            freeclimb.Client.ApiResponse<AvailableNumberList> localVarResponse = ListAvailableNumbersWithHttpInfo(phoneNumber, region, country, voiceEnabled, smsEnabled, capabilitiesVoice, capabilitiesSms, capabilitiesTollFree, capabilitiesTenDLC, capabilitiesShortCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List available numbers 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">PCRE-compatible regular expression to filter against &#x60;phoneNumber&#x60; field, which is in E.164 format. (optional)</param>
        /// <param name="region">State or province of this phone number. (optional)</param>
        /// <param name="country">Country of this phone number. (optional)</param>
        /// <param name="voiceEnabled">Indicates whether the phone number can handle Calls. Typically set to true for all numbers. (optional, default to true)</param>
        /// <param name="smsEnabled">Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers. (optional, default to true)</param>
        /// <param name="capabilitiesVoice"> (optional)</param>
        /// <param name="capabilitiesSms"> (optional)</param>
        /// <param name="capabilitiesTollFree"> (optional)</param>
        /// <param name="capabilitiesTenDLC"> (optional)</param>
        /// <param name="capabilitiesShortCode"> (optional)</param>
        /// <returns>ApiResponse of AvailableNumberList</returns>
        public freeclimb.Client.ApiResponse<AvailableNumberList> ListAvailableNumbersWithHttpInfo(string phoneNumber = default(string), string region = default(string), string country = default(string), bool? voiceEnabled = default(bool?), bool? smsEnabled = default(bool?), bool? capabilitiesVoice = default(bool?), bool? capabilitiesSms = default(bool?), bool? capabilitiesTollFree = default(bool?), bool? capabilitiesTenDLC = default(bool?), bool? capabilitiesShortCode = default(bool?))
        {











            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (phoneNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "phoneNumber", phoneNumber));
            }
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (country != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            }
            if (voiceEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "voiceEnabled", voiceEnabled));
            }
            if (smsEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "smsEnabled", smsEnabled));
            }
            if (capabilitiesVoice != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "capabilities.voice", capabilitiesVoice));
            }
            if (capabilitiesSms != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "capabilities.sms", capabilitiesSms));
            }
            if (capabilitiesTollFree != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "capabilities.tollFree", capabilitiesTollFree));
            }
            if (capabilitiesTenDLC != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "capabilities.tenDLC", capabilitiesTenDLC));
            }
            if (capabilitiesShortCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "capabilities.shortCode", capabilitiesShortCode));
            }

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AvailableNumberList>("/AvailablePhoneNumbers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAvailableNumbers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List available numbers 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="phoneNumber">PCRE-compatible regular expression to filter against &#x60;phoneNumber&#x60; field, which is in E.164 format. (optional)</param>

        /// <param name="region">State or province of this phone number. (optional)</param>

        /// <param name="country">Country of this phone number. (optional)</param>

        /// <param name="voiceEnabled">Indicates whether the phone number can handle Calls. Typically set to true for all numbers. (optional, default to true)</param>

        /// <param name="smsEnabled">Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers. (optional, default to true)</param>

        /// <param name="capabilitiesVoice"> (optional)</param>

        /// <param name="capabilitiesSms"> (optional)</param>

        /// <param name="capabilitiesTollFree"> (optional)</param>

        /// <param name="capabilitiesTenDLC"> (optional)</param>

        /// <param name="capabilitiesShortCode"> (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AvailableNumberList</returns>
        public async System.Threading.Tasks.Task<AvailableNumberList> ListAvailableNumbersAsync(string phoneNumber = default(string), string region = default(string), string country = default(string), bool? voiceEnabled = default(bool?), bool? smsEnabled = default(bool?), bool? capabilitiesVoice = default(bool?), bool? capabilitiesSms = default(bool?), bool? capabilitiesTollFree = default(bool?), bool? capabilitiesTenDLC = default(bool?), bool? capabilitiesShortCode = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<AvailableNumberList> localVarResponse = await ListAvailableNumbersWithHttpInfoAsync(phoneNumber, region, country, voiceEnabled, smsEnabled, capabilitiesVoice, capabilitiesSms, capabilitiesTollFree, capabilitiesTenDLC, capabilitiesShortCode, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List available numbers 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="phoneNumber">PCRE-compatible regular expression to filter against &#x60;phoneNumber&#x60; field, which is in E.164 format. (optional)</param>

        /// <param name="region">State or province of this phone number. (optional)</param>

        /// <param name="country">Country of this phone number. (optional)</param>

        /// <param name="voiceEnabled">Indicates whether the phone number can handle Calls. Typically set to true for all numbers. (optional, default to true)</param>

        /// <param name="smsEnabled">Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers. (optional, default to true)</param>

        /// <param name="capabilitiesVoice"> (optional)</param>

        /// <param name="capabilitiesSms"> (optional)</param>

        /// <param name="capabilitiesTollFree"> (optional)</param>

        /// <param name="capabilitiesTenDLC"> (optional)</param>

        /// <param name="capabilitiesShortCode"> (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AvailableNumberList)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<AvailableNumberList>> ListAvailableNumbersWithHttpInfoAsync(string phoneNumber = default(string), string region = default(string), string country = default(string), bool? voiceEnabled = default(bool?), bool? smsEnabled = default(bool?), bool? capabilitiesVoice = default(bool?), bool? capabilitiesSms = default(bool?), bool? capabilitiesTollFree = default(bool?), bool? capabilitiesTenDLC = default(bool?), bool? capabilitiesShortCode = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {












            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (phoneNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "phoneNumber", phoneNumber));
            }
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (country != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            }
            if (voiceEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "voiceEnabled", voiceEnabled));
            }
            if (smsEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "smsEnabled", smsEnabled));
            }
            if (capabilitiesVoice != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "capabilities.voice", capabilitiesVoice));
            }
            if (capabilitiesSms != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "capabilities.sms", capabilitiesSms));
            }
            if (capabilitiesTollFree != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "capabilities.tollFree", capabilitiesTollFree));
            }
            if (capabilitiesTenDLC != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "capabilities.tenDLC", capabilitiesTenDLC));
            }
            if (capabilitiesShortCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "capabilities.shortCode", capabilitiesShortCode));
            }

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AvailableNumberList>("/AvailablePhoneNumbers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAvailableNumbers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Call Logs 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">String that uniquely identifies this call resource.</param>
        /// <returns>LogList</returns>
        public LogList ListCallLogs(string callId)
        {
            freeclimb.Client.ApiResponse<LogList> localVarResponse = ListCallLogsWithHttpInfo(callId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Call Logs 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">String that uniquely identifies this call resource.</param>
        /// <returns>ApiResponse of LogList</returns>
        public freeclimb.Client.ApiResponse<LogList> ListCallLogsWithHttpInfo(string callId)
        {

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'callId' when calling DefaultApi->ListCallLogs");
            }


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", freeclimb.Client.ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LogList>("/Accounts/{accountId}/Calls/{callId}/Logs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCallLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Call Logs 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="callId">String that uniquely identifies this call resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogList</returns>
        public async System.Threading.Tasks.Task<LogList> ListCallLogsAsync(string callId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<LogList> localVarResponse = await ListCallLogsWithHttpInfoAsync(callId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Call Logs 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="callId">String that uniquely identifies this call resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogList)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<LogList>> ListCallLogsWithHttpInfoAsync(string callId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'callId' when calling DefaultApi->ListCallLogs");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", freeclimb.Client.ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LogList>("/Accounts/{accountId}/Calls/{callId}/Logs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCallLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Call Recordings 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">String that uniquely identifies this call resource.</param>
        /// <param name="dateCreated">Only show recordings created on the specified date, in the form *YYYY-MM-DD*. (optional)</param>
        /// <returns>RecordingList</returns>
        public RecordingList ListCallRecordings(string callId, string dateCreated = default(string))
        {
            freeclimb.Client.ApiResponse<RecordingList> localVarResponse = ListCallRecordingsWithHttpInfo(callId, dateCreated);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Call Recordings 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">String that uniquely identifies this call resource.</param>
        /// <param name="dateCreated">Only show recordings created on the specified date, in the form *YYYY-MM-DD*. (optional)</param>
        /// <returns>ApiResponse of RecordingList</returns>
        public freeclimb.Client.ApiResponse<RecordingList> ListCallRecordingsWithHttpInfo(string callId, string dateCreated = default(string))
        {

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'callId' when calling DefaultApi->ListCallRecordings");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", freeclimb.Client.ClientUtils.ParameterToString(callId)); // path parameter
            if (dateCreated != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "dateCreated", dateCreated));
            }

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RecordingList>("/Accounts/{accountId}/Calls/{callId}/Recordings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCallRecordings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Call Recordings 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="callId">String that uniquely identifies this call resource.</param>

        /// <param name="dateCreated">Only show recordings created on the specified date, in the form *YYYY-MM-DD*. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecordingList</returns>
        public async System.Threading.Tasks.Task<RecordingList> ListCallRecordingsAsync(string callId, string dateCreated = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<RecordingList> localVarResponse = await ListCallRecordingsWithHttpInfoAsync(callId, dateCreated, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Call Recordings 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="callId">String that uniquely identifies this call resource.</param>

        /// <param name="dateCreated">Only show recordings created on the specified date, in the form *YYYY-MM-DD*. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecordingList)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<RecordingList>> ListCallRecordingsWithHttpInfoAsync(string callId, string dateCreated = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'callId' when calling DefaultApi->ListCallRecordings");
            }




            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", freeclimb.Client.ClientUtils.ParameterToString(callId)); // path parameter
            if (dateCreated != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "dateCreated", dateCreated));
            }

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RecordingList>("/Accounts/{accountId}/Calls/{callId}/Recordings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCallRecordings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Calls 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">If active is set to true then all calls of the nature queued, ringing, inProgress are returned in the query. (optional, default to false)</param>
        /// <param name="to">Only show Calls to this phone number. (optional)</param>
        /// <param name="from">Only show Calls from this phone number. (optional)</param>
        /// <param name="status">Only show Calls currently in this status. May be &#x60;queued&#x60;, &#x60;ringing&#x60;, &#x60;inProgress&#x60;, &#x60;canceled&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;busy&#x60;, or &#x60;noAnswer&#x60;. (optional)</param>
        /// <param name="startTime">Only show Calls that started at or after this time, given as YYYY-MM-DD hh:mm:ss. (optional)</param>
        /// <param name="endTime">Only show Calls that ended at or before this time, given as YYYY-MM- DD hh:mm:ss. (optional)</param>
        /// <param name="parentCallId">Only show Calls spawned by the call with this ID. (optional)</param>
        /// <returns>CallList</returns>
        public CallList ListCalls(bool? active = default(bool?), string to = default(string), string from = default(string), CallStatus? status = default(CallStatus?), string startTime = default(string), string endTime = default(string), string parentCallId = default(string))
        {
            freeclimb.Client.ApiResponse<CallList> localVarResponse = ListCallsWithHttpInfo(active, to, from, status, startTime, endTime, parentCallId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Calls 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">If active is set to true then all calls of the nature queued, ringing, inProgress are returned in the query. (optional, default to false)</param>
        /// <param name="to">Only show Calls to this phone number. (optional)</param>
        /// <param name="from">Only show Calls from this phone number. (optional)</param>
        /// <param name="status">Only show Calls currently in this status. May be &#x60;queued&#x60;, &#x60;ringing&#x60;, &#x60;inProgress&#x60;, &#x60;canceled&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;busy&#x60;, or &#x60;noAnswer&#x60;. (optional)</param>
        /// <param name="startTime">Only show Calls that started at or after this time, given as YYYY-MM-DD hh:mm:ss. (optional)</param>
        /// <param name="endTime">Only show Calls that ended at or before this time, given as YYYY-MM- DD hh:mm:ss. (optional)</param>
        /// <param name="parentCallId">Only show Calls spawned by the call with this ID. (optional)</param>
        /// <returns>ApiResponse of CallList</returns>
        public freeclimb.Client.ApiResponse<CallList> ListCallsWithHttpInfo(bool? active = default(bool?), string to = default(string), string from = default(string), CallStatus? status = default(CallStatus?), string startTime = default(string), string endTime = default(string), string parentCallId = default(string))
        {








            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (parentCallId != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "parentCallId", parentCallId));
            }

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CallList>("/Accounts/{accountId}/Calls", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCalls", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Calls 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="active">If active is set to true then all calls of the nature queued, ringing, inProgress are returned in the query. (optional, default to false)</param>

        /// <param name="to">Only show Calls to this phone number. (optional)</param>

        /// <param name="from">Only show Calls from this phone number. (optional)</param>

        /// <param name="status">Only show Calls currently in this status. May be &#x60;queued&#x60;, &#x60;ringing&#x60;, &#x60;inProgress&#x60;, &#x60;canceled&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;busy&#x60;, or &#x60;noAnswer&#x60;. (optional)</param>

        /// <param name="startTime">Only show Calls that started at or after this time, given as YYYY-MM-DD hh:mm:ss. (optional)</param>

        /// <param name="endTime">Only show Calls that ended at or before this time, given as YYYY-MM- DD hh:mm:ss. (optional)</param>

        /// <param name="parentCallId">Only show Calls spawned by the call with this ID. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallList</returns>
        public async System.Threading.Tasks.Task<CallList> ListCallsAsync(bool? active = default(bool?), string to = default(string), string from = default(string), CallStatus? status = default(CallStatus?), string startTime = default(string), string endTime = default(string), string parentCallId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<CallList> localVarResponse = await ListCallsWithHttpInfoAsync(active, to, from, status, startTime, endTime, parentCallId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Calls 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="active">If active is set to true then all calls of the nature queued, ringing, inProgress are returned in the query. (optional, default to false)</param>

        /// <param name="to">Only show Calls to this phone number. (optional)</param>

        /// <param name="from">Only show Calls from this phone number. (optional)</param>

        /// <param name="status">Only show Calls currently in this status. May be &#x60;queued&#x60;, &#x60;ringing&#x60;, &#x60;inProgress&#x60;, &#x60;canceled&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;busy&#x60;, or &#x60;noAnswer&#x60;. (optional)</param>

        /// <param name="startTime">Only show Calls that started at or after this time, given as YYYY-MM-DD hh:mm:ss. (optional)</param>

        /// <param name="endTime">Only show Calls that ended at or before this time, given as YYYY-MM- DD hh:mm:ss. (optional)</param>

        /// <param name="parentCallId">Only show Calls spawned by the call with this ID. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallList)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<CallList>> ListCallsWithHttpInfoAsync(bool? active = default(bool?), string to = default(string), string from = default(string), CallStatus? status = default(CallStatus?), string startTime = default(string), string endTime = default(string), string parentCallId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {









            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (parentCallId != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "parentCallId", parentCallId));
            }

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CallList>("/Accounts/{accountId}/Calls", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCalls", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Conferences 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Only show conferences that currently have the specified status. Valid values: &#x60;empty&#x60;, &#x60;populated&#x60;, &#x60;inProgress&#x60;, or &#x60;terminated&#x60;. (optional)</param>
        /// <param name="alias">List Conferences whose alias exactly matches this string. (optional)</param>
        /// <param name="dateCreated">Only show Conferences that were created on the specified date, in the form *YYYY-MM-DD*. (optional)</param>
        /// <param name="dateUpdated">Only show Conferences that were last updated on the specified date, in the form *YYYY-MM-DD*. (optional)</param>
        /// <returns>ConferenceList</returns>
        public ConferenceList ListConferences(string status = default(string), string alias = default(string), string dateCreated = default(string), string dateUpdated = default(string))
        {
            freeclimb.Client.ApiResponse<ConferenceList> localVarResponse = ListConferencesWithHttpInfo(status, alias, dateCreated, dateUpdated);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Conferences 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Only show conferences that currently have the specified status. Valid values: &#x60;empty&#x60;, &#x60;populated&#x60;, &#x60;inProgress&#x60;, or &#x60;terminated&#x60;. (optional)</param>
        /// <param name="alias">List Conferences whose alias exactly matches this string. (optional)</param>
        /// <param name="dateCreated">Only show Conferences that were created on the specified date, in the form *YYYY-MM-DD*. (optional)</param>
        /// <param name="dateUpdated">Only show Conferences that were last updated on the specified date, in the form *YYYY-MM-DD*. (optional)</param>
        /// <returns>ApiResponse of ConferenceList</returns>
        public freeclimb.Client.ApiResponse<ConferenceList> ListConferencesWithHttpInfo(string status = default(string), string alias = default(string), string dateCreated = default(string), string dateUpdated = default(string))
        {





            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (alias != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "alias", alias));
            }
            if (dateCreated != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "dateCreated", dateCreated));
            }
            if (dateUpdated != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "dateUpdated", dateUpdated));
            }

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConferenceList>("/Accounts/{accountId}/Conferences", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListConferences", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Conferences 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="status">Only show conferences that currently have the specified status. Valid values: &#x60;empty&#x60;, &#x60;populated&#x60;, &#x60;inProgress&#x60;, or &#x60;terminated&#x60;. (optional)</param>

        /// <param name="alias">List Conferences whose alias exactly matches this string. (optional)</param>

        /// <param name="dateCreated">Only show Conferences that were created on the specified date, in the form *YYYY-MM-DD*. (optional)</param>

        /// <param name="dateUpdated">Only show Conferences that were last updated on the specified date, in the form *YYYY-MM-DD*. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConferenceList</returns>
        public async System.Threading.Tasks.Task<ConferenceList> ListConferencesAsync(string status = default(string), string alias = default(string), string dateCreated = default(string), string dateUpdated = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<ConferenceList> localVarResponse = await ListConferencesWithHttpInfoAsync(status, alias, dateCreated, dateUpdated, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Conferences 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="status">Only show conferences that currently have the specified status. Valid values: &#x60;empty&#x60;, &#x60;populated&#x60;, &#x60;inProgress&#x60;, or &#x60;terminated&#x60;. (optional)</param>

        /// <param name="alias">List Conferences whose alias exactly matches this string. (optional)</param>

        /// <param name="dateCreated">Only show Conferences that were created on the specified date, in the form *YYYY-MM-DD*. (optional)</param>

        /// <param name="dateUpdated">Only show Conferences that were last updated on the specified date, in the form *YYYY-MM-DD*. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConferenceList)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<ConferenceList>> ListConferencesWithHttpInfoAsync(string status = default(string), string alias = default(string), string dateCreated = default(string), string dateUpdated = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {






            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (alias != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "alias", alias));
            }
            if (dateCreated != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "dateCreated", dateCreated));
            }
            if (dateUpdated != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "dateUpdated", dateUpdated));
            }

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConferenceList>("/Accounts/{accountId}/Conferences", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListConferences", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Incoming Numbers 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Only show incoming phone number resources that match this PCRE-compatible regular expression. (optional)</param>
        /// <param name="alias">Only show incoming phone numbers with aliases that exactly match this value. (optional)</param>
        /// <param name="region">State or province of this phone number. (optional)</param>
        /// <param name="country">Country of this phone number. (optional)</param>
        /// <param name="applicationId">ID of the Application that FreeClimb should contact if a Call or SMS arrives for this phone number or a Call from this number is placed. An incoming phone number is not useful until associated with an applicationId. (optional)</param>
        /// <param name="hasApplication">Indication of whether the phone number has an application linked to it. (optional, default to false)</param>
        /// <param name="voiceEnabled">Indicates whether the phone number can handle Calls. Typically set to true for all numbers. (optional, default to true) (deprecated)</param>
        /// <param name="smsEnabled">Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers. (optional, default to true) (deprecated)</param>
        /// <param name="capabilitiesVoice"> (optional)</param>
        /// <param name="capabilitiesSms"> (optional)</param>
        /// <param name="capabilitiesTollFree"> (optional)</param>
        /// <param name="capabilitiesTenDLC"> (optional)</param>
        /// <param name="capabilitiesShortCode"> (optional)</param>
        /// <param name="offnet">Indication of whether the phone number was registered as an offnet number. This field will be rendered only for requests to the IncomingPhone number resource. (optional)</param>
        /// <returns>IncomingNumberList</returns>
        public IncomingNumberList ListIncomingNumbers(string phoneNumber = default(string), string alias = default(string), string region = default(string), string country = default(string), string applicationId = default(string), bool? hasApplication = default(bool?), bool? voiceEnabled = default(bool?), bool? smsEnabled = default(bool?), bool? capabilitiesVoice = default(bool?), bool? capabilitiesSms = default(bool?), bool? capabilitiesTollFree = default(bool?), bool? capabilitiesTenDLC = default(bool?), bool? capabilitiesShortCode = default(bool?), bool? offnet = default(bool?))
        {
            freeclimb.Client.ApiResponse<IncomingNumberList> localVarResponse = ListIncomingNumbersWithHttpInfo(phoneNumber, alias, region, country, applicationId, hasApplication, voiceEnabled, smsEnabled, capabilitiesVoice, capabilitiesSms, capabilitiesTollFree, capabilitiesTenDLC, capabilitiesShortCode, offnet);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Incoming Numbers 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Only show incoming phone number resources that match this PCRE-compatible regular expression. (optional)</param>
        /// <param name="alias">Only show incoming phone numbers with aliases that exactly match this value. (optional)</param>
        /// <param name="region">State or province of this phone number. (optional)</param>
        /// <param name="country">Country of this phone number. (optional)</param>
        /// <param name="applicationId">ID of the Application that FreeClimb should contact if a Call or SMS arrives for this phone number or a Call from this number is placed. An incoming phone number is not useful until associated with an applicationId. (optional)</param>
        /// <param name="hasApplication">Indication of whether the phone number has an application linked to it. (optional, default to false)</param>
        /// <param name="voiceEnabled">Indicates whether the phone number can handle Calls. Typically set to true for all numbers. (optional, default to true) (deprecated)</param>
        /// <param name="smsEnabled">Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers. (optional, default to true) (deprecated)</param>
        /// <param name="capabilitiesVoice"> (optional)</param>
        /// <param name="capabilitiesSms"> (optional)</param>
        /// <param name="capabilitiesTollFree"> (optional)</param>
        /// <param name="capabilitiesTenDLC"> (optional)</param>
        /// <param name="capabilitiesShortCode"> (optional)</param>
        /// <param name="offnet">Indication of whether the phone number was registered as an offnet number. This field will be rendered only for requests to the IncomingPhone number resource. (optional)</param>
        /// <returns>ApiResponse of IncomingNumberList</returns>
        public freeclimb.Client.ApiResponse<IncomingNumberList> ListIncomingNumbersWithHttpInfo(string phoneNumber = default(string), string alias = default(string), string region = default(string), string country = default(string), string applicationId = default(string), bool? hasApplication = default(bool?), bool? voiceEnabled = default(bool?), bool? smsEnabled = default(bool?), bool? capabilitiesVoice = default(bool?), bool? capabilitiesSms = default(bool?), bool? capabilitiesTollFree = default(bool?), bool? capabilitiesTenDLC = default(bool?), bool? capabilitiesShortCode = default(bool?), bool? offnet = default(bool?))
        {















            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (phoneNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "phoneNumber", phoneNumber));
            }
            if (alias != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "alias", alias));
            }
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (country != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (hasApplication != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "hasApplication", hasApplication));
            }
            if (voiceEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "voiceEnabled", voiceEnabled));
            }
            if (smsEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "smsEnabled", smsEnabled));
            }
            if (capabilitiesVoice != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "capabilities.voice", capabilitiesVoice));
            }
            if (capabilitiesSms != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "capabilities.sms", capabilitiesSms));
            }
            if (capabilitiesTollFree != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "capabilities.tollFree", capabilitiesTollFree));
            }
            if (capabilitiesTenDLC != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "capabilities.tenDLC", capabilitiesTenDLC));
            }
            if (capabilitiesShortCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "capabilities.shortCode", capabilitiesShortCode));
            }
            if (offnet != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "offnet", offnet));
            }

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IncomingNumberList>("/Accounts/{accountId}/IncomingPhoneNumbers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListIncomingNumbers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Incoming Numbers 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="phoneNumber">Only show incoming phone number resources that match this PCRE-compatible regular expression. (optional)</param>

        /// <param name="alias">Only show incoming phone numbers with aliases that exactly match this value. (optional)</param>

        /// <param name="region">State or province of this phone number. (optional)</param>

        /// <param name="country">Country of this phone number. (optional)</param>

        /// <param name="applicationId">ID of the Application that FreeClimb should contact if a Call or SMS arrives for this phone number or a Call from this number is placed. An incoming phone number is not useful until associated with an applicationId. (optional)</param>

        /// <param name="hasApplication">Indication of whether the phone number has an application linked to it. (optional, default to false)</param>

        /// <param name="voiceEnabled">Indicates whether the phone number can handle Calls. Typically set to true for all numbers. (optional, default to true) (deprecated)</param>

        /// <param name="smsEnabled">Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers. (optional, default to true) (deprecated)</param>

        /// <param name="capabilitiesVoice"> (optional)</param>

        /// <param name="capabilitiesSms"> (optional)</param>

        /// <param name="capabilitiesTollFree"> (optional)</param>

        /// <param name="capabilitiesTenDLC"> (optional)</param>

        /// <param name="capabilitiesShortCode"> (optional)</param>

        /// <param name="offnet">Indication of whether the phone number was registered as an offnet number. This field will be rendered only for requests to the IncomingPhone number resource. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncomingNumberList</returns>
        public async System.Threading.Tasks.Task<IncomingNumberList> ListIncomingNumbersAsync(string phoneNumber = default(string), string alias = default(string), string region = default(string), string country = default(string), string applicationId = default(string), bool? hasApplication = default(bool?), bool? voiceEnabled = default(bool?), bool? smsEnabled = default(bool?), bool? capabilitiesVoice = default(bool?), bool? capabilitiesSms = default(bool?), bool? capabilitiesTollFree = default(bool?), bool? capabilitiesTenDLC = default(bool?), bool? capabilitiesShortCode = default(bool?), bool? offnet = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<IncomingNumberList> localVarResponse = await ListIncomingNumbersWithHttpInfoAsync(phoneNumber, alias, region, country, applicationId, hasApplication, voiceEnabled, smsEnabled, capabilitiesVoice, capabilitiesSms, capabilitiesTollFree, capabilitiesTenDLC, capabilitiesShortCode, offnet, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Incoming Numbers 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="phoneNumber">Only show incoming phone number resources that match this PCRE-compatible regular expression. (optional)</param>

        /// <param name="alias">Only show incoming phone numbers with aliases that exactly match this value. (optional)</param>

        /// <param name="region">State or province of this phone number. (optional)</param>

        /// <param name="country">Country of this phone number. (optional)</param>

        /// <param name="applicationId">ID of the Application that FreeClimb should contact if a Call or SMS arrives for this phone number or a Call from this number is placed. An incoming phone number is not useful until associated with an applicationId. (optional)</param>

        /// <param name="hasApplication">Indication of whether the phone number has an application linked to it. (optional, default to false)</param>

        /// <param name="voiceEnabled">Indicates whether the phone number can handle Calls. Typically set to true for all numbers. (optional, default to true) (deprecated)</param>

        /// <param name="smsEnabled">Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers. (optional, default to true) (deprecated)</param>

        /// <param name="capabilitiesVoice"> (optional)</param>

        /// <param name="capabilitiesSms"> (optional)</param>

        /// <param name="capabilitiesTollFree"> (optional)</param>

        /// <param name="capabilitiesTenDLC"> (optional)</param>

        /// <param name="capabilitiesShortCode"> (optional)</param>

        /// <param name="offnet">Indication of whether the phone number was registered as an offnet number. This field will be rendered only for requests to the IncomingPhone number resource. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncomingNumberList)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<IncomingNumberList>> ListIncomingNumbersWithHttpInfoAsync(string phoneNumber = default(string), string alias = default(string), string region = default(string), string country = default(string), string applicationId = default(string), bool? hasApplication = default(bool?), bool? voiceEnabled = default(bool?), bool? smsEnabled = default(bool?), bool? capabilitiesVoice = default(bool?), bool? capabilitiesSms = default(bool?), bool? capabilitiesTollFree = default(bool?), bool? capabilitiesTenDLC = default(bool?), bool? capabilitiesShortCode = default(bool?), bool? offnet = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
















            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (phoneNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "phoneNumber", phoneNumber));
            }
            if (alias != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "alias", alias));
            }
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (country != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "applicationId", applicationId));
            }
            if (hasApplication != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "hasApplication", hasApplication));
            }
            if (voiceEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "voiceEnabled", voiceEnabled));
            }
            if (smsEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "smsEnabled", smsEnabled));
            }
            if (capabilitiesVoice != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "capabilities.voice", capabilitiesVoice));
            }
            if (capabilitiesSms != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "capabilities.sms", capabilitiesSms));
            }
            if (capabilitiesTollFree != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "capabilities.tollFree", capabilitiesTollFree));
            }
            if (capabilitiesTenDLC != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "capabilities.tenDLC", capabilitiesTenDLC));
            }
            if (capabilitiesShortCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "capabilities.shortCode", capabilitiesShortCode));
            }
            if (offnet != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "offnet", offnet));
            }

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IncomingNumberList>("/Accounts/{accountId}/IncomingPhoneNumbers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListIncomingNumbers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Members 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>
        /// <returns>QueueMemberList</returns>
        public QueueMemberList ListMembers(string queueId)
        {
            freeclimb.Client.ApiResponse<QueueMemberList> localVarResponse = ListMembersWithHttpInfo(queueId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Members 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>
        /// <returns>ApiResponse of QueueMemberList</returns>
        public freeclimb.Client.ApiResponse<QueueMemberList> ListMembersWithHttpInfo(string queueId)
        {

            // verify the required parameter 'queueId' is set
            if (queueId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'queueId' when calling DefaultApi->ListMembers");
            }


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueId", freeclimb.Client.ClientUtils.ParameterToString(queueId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<QueueMemberList>("/Accounts/{accountId}/Queues/{queueId}/Members", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Members 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueueMemberList</returns>
        public async System.Threading.Tasks.Task<QueueMemberList> ListMembersAsync(string queueId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<QueueMemberList> localVarResponse = await ListMembersWithHttpInfoAsync(queueId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Members 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">String that uniquely identifies the Queue that the Member belongs to.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueueMemberList)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<QueueMemberList>> ListMembersWithHttpInfoAsync(string queueId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'queueId' is set
            if (queueId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'queueId' when calling DefaultApi->ListMembers");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueId", freeclimb.Client.ClientUtils.ParameterToString(queueId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<QueueMemberList>("/Accounts/{accountId}/Queues/{queueId}/Members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Participants 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">ID of the conference this participant is in.</param>
        /// <param name="talk">Only show Participants with the talk privilege. (optional)</param>
        /// <param name="listen">Only show Participants with the listen privilege. (optional)</param>
        /// <returns>ConferenceParticipantList</returns>
        public ConferenceParticipantList ListParticipants(string conferenceId, bool? talk = default(bool?), bool? listen = default(bool?))
        {
            freeclimb.Client.ApiResponse<ConferenceParticipantList> localVarResponse = ListParticipantsWithHttpInfo(conferenceId, talk, listen);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Participants 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">ID of the conference this participant is in.</param>
        /// <param name="talk">Only show Participants with the talk privilege. (optional)</param>
        /// <param name="listen">Only show Participants with the listen privilege. (optional)</param>
        /// <returns>ApiResponse of ConferenceParticipantList</returns>
        public freeclimb.Client.ApiResponse<ConferenceParticipantList> ListParticipantsWithHttpInfo(string conferenceId, bool? talk = default(bool?), bool? listen = default(bool?))
        {

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling DefaultApi->ListParticipants");
            }




            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", freeclimb.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter
            if (talk != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "talk", talk));
            }
            if (listen != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "listen", listen));
            }

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConferenceParticipantList>("/Accounts/{accountId}/Conferences/{conferenceId}/Participants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListParticipants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Participants 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="conferenceId">ID of the conference this participant is in.</param>

        /// <param name="talk">Only show Participants with the talk privilege. (optional)</param>

        /// <param name="listen">Only show Participants with the listen privilege. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConferenceParticipantList</returns>
        public async System.Threading.Tasks.Task<ConferenceParticipantList> ListParticipantsAsync(string conferenceId, bool? talk = default(bool?), bool? listen = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<ConferenceParticipantList> localVarResponse = await ListParticipantsWithHttpInfoAsync(conferenceId, talk, listen, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Participants 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="conferenceId">ID of the conference this participant is in.</param>

        /// <param name="talk">Only show Participants with the talk privilege. (optional)</param>

        /// <param name="listen">Only show Participants with the listen privilege. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConferenceParticipantList)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<ConferenceParticipantList>> ListParticipantsWithHttpInfoAsync(string conferenceId, bool? talk = default(bool?), bool? listen = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling DefaultApi->ListParticipants");
            }





            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", freeclimb.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter
            if (talk != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "talk", talk));
            }
            if (listen != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "listen", listen));
            }

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConferenceParticipantList>("/Accounts/{accountId}/Conferences/{conferenceId}/Participants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListParticipants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Recordings 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Show only Recordings made during the Call with this ID. (optional)</param>
        /// <param name="conferenceId">Show only Recordings made during the conference with this ID. (optional)</param>
        /// <param name="dateCreated">Only show Recordings created on this date, formatted as *YYYY-MM-DD*. (optional)</param>
        /// <returns>RecordingList</returns>
        public RecordingList ListRecordings(string callId = default(string), string conferenceId = default(string), string dateCreated = default(string))
        {
            freeclimb.Client.ApiResponse<RecordingList> localVarResponse = ListRecordingsWithHttpInfo(callId, conferenceId, dateCreated);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Recordings 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">Show only Recordings made during the Call with this ID. (optional)</param>
        /// <param name="conferenceId">Show only Recordings made during the conference with this ID. (optional)</param>
        /// <param name="dateCreated">Only show Recordings created on this date, formatted as *YYYY-MM-DD*. (optional)</param>
        /// <returns>ApiResponse of RecordingList</returns>
        public freeclimb.Client.ApiResponse<RecordingList> ListRecordingsWithHttpInfo(string callId = default(string), string conferenceId = default(string), string dateCreated = default(string))
        {




            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (callId != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "callId", callId));
            }
            if (conferenceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "conferenceId", conferenceId));
            }
            if (dateCreated != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "dateCreated", dateCreated));
            }

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RecordingList>("/Accounts/{accountId}/Recordings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRecordings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Recordings 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="callId">Show only Recordings made during the Call with this ID. (optional)</param>

        /// <param name="conferenceId">Show only Recordings made during the conference with this ID. (optional)</param>

        /// <param name="dateCreated">Only show Recordings created on this date, formatted as *YYYY-MM-DD*. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecordingList</returns>
        public async System.Threading.Tasks.Task<RecordingList> ListRecordingsAsync(string callId = default(string), string conferenceId = default(string), string dateCreated = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<RecordingList> localVarResponse = await ListRecordingsWithHttpInfoAsync(callId, conferenceId, dateCreated, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Recordings 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="callId">Show only Recordings made during the Call with this ID. (optional)</param>

        /// <param name="conferenceId">Show only Recordings made during the conference with this ID. (optional)</param>

        /// <param name="dateCreated">Only show Recordings created on this date, formatted as *YYYY-MM-DD*. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecordingList)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<RecordingList>> ListRecordingsWithHttpInfoAsync(string callId = default(string), string conferenceId = default(string), string dateCreated = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {





            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (callId != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "callId", callId));
            }
            if (conferenceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "conferenceId", conferenceId));
            }
            if (dateCreated != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "dateCreated", dateCreated));
            }

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RecordingList>("/Accounts/{accountId}/Recordings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRecordings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List SMS Messages 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Only show Messages to this phone number. (optional)</param>
        /// <param name="from">Only show Messages from this phone number. (optional)</param>
        /// <param name="beginTime">Only show Messages sent at or after this time (GMT), given as *YYYY-MM-DD hh:mm:ss*. (optional)</param>
        /// <param name="endTime">Only show messages sent at or before this time (GMT), given as *YYYY-MM-DD hh:mm*.. (optional)</param>
        /// <param name="direction">Either &#x60;inbound&#x60; or &#x60;outbound&#x60;. Only show Messages that were either *sent from* or *received by* FreeClimb. (optional)</param>
        /// <returns>MessagesList</returns>
        public MessagesList ListSmsMessages(string to = default(string), string from = default(string), string beginTime = default(string), string endTime = default(string), MessageDirection? direction = default(MessageDirection?))
        {
            freeclimb.Client.ApiResponse<MessagesList> localVarResponse = ListSmsMessagesWithHttpInfo(to, from, beginTime, endTime, direction);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List SMS Messages 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="to">Only show Messages to this phone number. (optional)</param>
        /// <param name="from">Only show Messages from this phone number. (optional)</param>
        /// <param name="beginTime">Only show Messages sent at or after this time (GMT), given as *YYYY-MM-DD hh:mm:ss*. (optional)</param>
        /// <param name="endTime">Only show messages sent at or before this time (GMT), given as *YYYY-MM-DD hh:mm*.. (optional)</param>
        /// <param name="direction">Either &#x60;inbound&#x60; or &#x60;outbound&#x60;. Only show Messages that were either *sent from* or *received by* FreeClimb. (optional)</param>
        /// <returns>ApiResponse of MessagesList</returns>
        public freeclimb.Client.ApiResponse<MessagesList> ListSmsMessagesWithHttpInfo(string to = default(string), string from = default(string), string beginTime = default(string), string endTime = default(string), MessageDirection? direction = default(MessageDirection?))
        {






            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (beginTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "beginTime", beginTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MessagesList>("/Accounts/{accountId}/Messages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSmsMessages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List SMS Messages 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="to">Only show Messages to this phone number. (optional)</param>

        /// <param name="from">Only show Messages from this phone number. (optional)</param>

        /// <param name="beginTime">Only show Messages sent at or after this time (GMT), given as *YYYY-MM-DD hh:mm:ss*. (optional)</param>

        /// <param name="endTime">Only show messages sent at or before this time (GMT), given as *YYYY-MM-DD hh:mm*.. (optional)</param>

        /// <param name="direction">Either &#x60;inbound&#x60; or &#x60;outbound&#x60;. Only show Messages that were either *sent from* or *received by* FreeClimb. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessagesList</returns>
        public async System.Threading.Tasks.Task<MessagesList> ListSmsMessagesAsync(string to = default(string), string from = default(string), string beginTime = default(string), string endTime = default(string), MessageDirection? direction = default(MessageDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<MessagesList> localVarResponse = await ListSmsMessagesWithHttpInfoAsync(to, from, beginTime, endTime, direction, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List SMS Messages 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="to">Only show Messages to this phone number. (optional)</param>

        /// <param name="from">Only show Messages from this phone number. (optional)</param>

        /// <param name="beginTime">Only show Messages sent at or after this time (GMT), given as *YYYY-MM-DD hh:mm:ss*. (optional)</param>

        /// <param name="endTime">Only show messages sent at or before this time (GMT), given as *YYYY-MM-DD hh:mm*.. (optional)</param>

        /// <param name="direction">Either &#x60;inbound&#x60; or &#x60;outbound&#x60;. Only show Messages that were either *sent from* or *received by* FreeClimb. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessagesList)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<MessagesList>> ListSmsMessagesWithHttpInfoAsync(string to = default(string), string from = default(string), string beginTime = default(string), string endTime = default(string), MessageDirection? direction = default(MessageDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {







            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (beginTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "beginTime", beginTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(freeclimb.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MessagesList>("/Accounts/{accountId}/Messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSmsMessages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Make a Call 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="makeCallRequest">Call details for making a call (optional)</param>
        /// <returns>CallResult</returns>
        public CallResult MakeACall(MakeCallRequest makeCallRequest = default(MakeCallRequest))
        {
            freeclimb.Client.ApiResponse<CallResult> localVarResponse = MakeACallWithHttpInfo(makeCallRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Make a Call 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="makeCallRequest">Call details for making a call (optional)</param>
        /// <returns>ApiResponse of CallResult</returns>
        public freeclimb.Client.ApiResponse<CallResult> MakeACallWithHttpInfo(MakeCallRequest makeCallRequest = default(MakeCallRequest))
        {


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = makeCallRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CallResult>("/Accounts/{accountId}/Calls", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MakeACall", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Make a Call 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="makeCallRequest">Call details for making a call (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallResult</returns>
        public async System.Threading.Tasks.Task<CallResult> MakeACallAsync(MakeCallRequest makeCallRequest = default(MakeCallRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<CallResult> localVarResponse = await MakeACallWithHttpInfoAsync(makeCallRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Make a Call 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="makeCallRequest">Call details for making a call (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallResult)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<CallResult>> MakeACallWithHttpInfoAsync(MakeCallRequest makeCallRequest = default(MakeCallRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = makeCallRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CallResult>("/Accounts/{accountId}/Calls", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MakeACall", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a Participant 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">ID of the conference this participant is in.</param>
        /// <param name="callId">ID of the Call associated with this participant.</param>
        /// <returns></returns>
        public void RemoveAParticipant(string conferenceId, string callId)
        {
            RemoveAParticipantWithHttpInfo(conferenceId, callId);
        }

        /// <summary>
        /// Remove a Participant 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">ID of the conference this participant is in.</param>
        /// <param name="callId">ID of the Call associated with this participant.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public freeclimb.Client.ApiResponse<Object> RemoveAParticipantWithHttpInfo(string conferenceId, string callId)
        {

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling DefaultApi->RemoveAParticipant");
            }


            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'callId' when calling DefaultApi->RemoveAParticipant");
            }


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", freeclimb.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", freeclimb.Client.ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/Accounts/{accountId}/Conferences/{conferenceId}/Participants/{callId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAParticipant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a Participant 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="conferenceId">ID of the conference this participant is in.</param>

        /// <param name="callId">ID of the Call associated with this participant.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAParticipantAsync(string conferenceId, string callId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveAParticipantWithHttpInfoAsync(conferenceId, callId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a Participant 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="conferenceId">ID of the conference this participant is in.</param>

        /// <param name="callId">ID of the Call associated with this participant.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<Object>> RemoveAParticipantWithHttpInfoAsync(string conferenceId, string callId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling DefaultApi->RemoveAParticipant");
            }


            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'callId' when calling DefaultApi->RemoveAParticipant");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", freeclimb.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", freeclimb.Client.ClientUtils.ParameterToString(callId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/Accounts/{accountId}/Conferences/{conferenceId}/Participants/{callId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAParticipant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send an SMS Message 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageRequest">Details to create a message</param>
        /// <returns>MessageResult</returns>
        public MessageResult SendAnSmsMessage(MessageRequest messageRequest)
        {
            freeclimb.Client.ApiResponse<MessageResult> localVarResponse = SendAnSmsMessageWithHttpInfo(messageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send an SMS Message 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageRequest">Details to create a message</param>
        /// <returns>ApiResponse of MessageResult</returns>
        public freeclimb.Client.ApiResponse<MessageResult> SendAnSmsMessageWithHttpInfo(MessageRequest messageRequest)
        {

            // verify the required parameter 'messageRequest' is set
            if (messageRequest == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'messageRequest' when calling DefaultApi->SendAnSmsMessage");
            }


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = messageRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MessageResult>("/Accounts/{accountId}/Messages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendAnSmsMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send an SMS Message 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="messageRequest">Details to create a message</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageResult</returns>
        public async System.Threading.Tasks.Task<MessageResult> SendAnSmsMessageAsync(MessageRequest messageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<MessageResult> localVarResponse = await SendAnSmsMessageWithHttpInfoAsync(messageRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send an SMS Message 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="messageRequest">Details to create a message</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageResult)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<MessageResult>> SendAnSmsMessageWithHttpInfoAsync(MessageRequest messageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'messageRequest' is set
            if (messageRequest == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'messageRequest' when calling DefaultApi->SendAnSmsMessage");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = messageRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MessageResult>("/Accounts/{accountId}/Messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendAnSmsMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stream a Recording File 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream StreamARecordingFile(string recordingId)
        {
            freeclimb.Client.ApiResponse<System.IO.Stream> localVarResponse = StreamARecordingFileWithHttpInfo(recordingId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stream a Recording File 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public freeclimb.Client.ApiResponse<System.IO.Stream> StreamARecordingFileWithHttpInfo(string recordingId)
        {

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'recordingId' when calling DefaultApi->StreamARecordingFile");
            }


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "audio/x-wav"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", freeclimb.Client.ClientUtils.ParameterToString(recordingId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/Accounts/{accountId}/Recordings/{recordingId}/Stream", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamARecordingFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stream a Recording File 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> StreamARecordingFileAsync(string recordingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<System.IO.Stream> localVarResponse = await StreamARecordingFileWithHttpInfoAsync(recordingId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stream a Recording File 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="recordingId">String that uniquely identifies this recording resource.</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<System.IO.Stream>> StreamARecordingFileWithHttpInfoAsync(string recordingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'recordingId' when calling DefaultApi->StreamARecordingFile");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "audio/x-wav"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", freeclimb.Client.ClientUtils.ParameterToString(recordingId)); // path parameter

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/Accounts/{accountId}/Recordings/{recordingId}/Stream", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamARecordingFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Conference 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">String that uniquely identifies this conference resource.</param>
        /// <param name="updateConferenceRequest">Conference Details to update (optional)</param>
        /// <returns>ConferenceResult</returns>
        public ConferenceResult UpdateAConference(string conferenceId, UpdateConferenceRequest updateConferenceRequest = default(UpdateConferenceRequest))
        {
            freeclimb.Client.ApiResponse<ConferenceResult> localVarResponse = UpdateAConferenceWithHttpInfo(conferenceId, updateConferenceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Conference 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">String that uniquely identifies this conference resource.</param>
        /// <param name="updateConferenceRequest">Conference Details to update (optional)</param>
        /// <returns>ApiResponse of ConferenceResult</returns>
        public freeclimb.Client.ApiResponse<ConferenceResult> UpdateAConferenceWithHttpInfo(string conferenceId, UpdateConferenceRequest updateConferenceRequest = default(UpdateConferenceRequest))
        {

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling DefaultApi->UpdateAConference");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", freeclimb.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.Data = updateConferenceRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConferenceResult>("/Accounts/{accountId}/Conferences/{conferenceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAConference", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Conference 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="conferenceId">String that uniquely identifies this conference resource.</param>

        /// <param name="updateConferenceRequest">Conference Details to update (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConferenceResult</returns>
        public async System.Threading.Tasks.Task<ConferenceResult> UpdateAConferenceAsync(string conferenceId, UpdateConferenceRequest updateConferenceRequest = default(UpdateConferenceRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<ConferenceResult> localVarResponse = await UpdateAConferenceWithHttpInfoAsync(conferenceId, updateConferenceRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Conference 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="conferenceId">String that uniquely identifies this conference resource.</param>

        /// <param name="updateConferenceRequest">Conference Details to update (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConferenceResult)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<ConferenceResult>> UpdateAConferenceWithHttpInfoAsync(string conferenceId, UpdateConferenceRequest updateConferenceRequest = default(UpdateConferenceRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling DefaultApi->UpdateAConference");
            }




            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", freeclimb.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.Data = updateConferenceRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConferenceResult>("/Accounts/{accountId}/Conferences/{conferenceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAConference", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Live Call 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">String that uniquely identifies this call resource.</param>
        /// <param name="updateCallRequest">Call details to update</param>
        /// <returns></returns>
        public void UpdateALiveCall(string callId, UpdateCallRequest updateCallRequest)
        {
            UpdateALiveCallWithHttpInfo(callId, updateCallRequest);
        }

        /// <summary>
        /// Update a Live Call 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">String that uniquely identifies this call resource.</param>
        /// <param name="updateCallRequest">Call details to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public freeclimb.Client.ApiResponse<Object> UpdateALiveCallWithHttpInfo(string callId, UpdateCallRequest updateCallRequest)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'callId' when calling DefaultApi->UpdateALiveCall");
            }


            // verify the required parameter 'updateCallRequest' is set
            if (updateCallRequest == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'updateCallRequest' when calling DefaultApi->UpdateALiveCall");
            }


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            //to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                Console.WriteLine("Accepts Params if not null:" + localVarAccept);
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }
            Console.WriteLine("Accepts Params:" + localVarAccept);

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", freeclimb.Client.ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = updateCallRequest;
            //Console.WriteLine("Header Parameters being passed in for update a live call: " + localVarRequestOptions.HeaderParameters.ToString());
            //Console.WriteLine("JSON conversion of the request: " + updateCallRequest.ToJson());
            //Console.WriteLine(updateCallRequest.ToJsonObject());

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            //Printout of entire request before sending to client to Post
            Console.WriteLine("Request Header Parameters:");
            foreach (var contents in localVarRequestOptions.HeaderParameters.Keys)
            {
                foreach (var listMember in localVarRequestOptions.HeaderParameters[contents])
                {
                    Console.WriteLine("Key : " + contents + " member :" + listMember);
                }
            }
            Console.WriteLine("Request Path Parameters:");
            foreach (KeyValuePair<string, string> kvp in localVarRequestOptions.PathParameters)
            {
                //textBox3.Text += ("Key = {0}, Value = {1}", kvp.Key, kvp.Value);
                Console.WriteLine("Key = {0}, Value = {1}", kvp.Key, kvp.Value);
            }
            Console.WriteLine("Request Data:");
            Console.WriteLine("Data being passed in for update a live call: " + localVarRequestOptions.Data);

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/Accounts/{accountId}/Calls/{callId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateALiveCall", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Live Call 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="callId">String that uniquely identifies this call resource.</param>

        /// <param name="updateCallRequest">Call details to update</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateALiveCallAsync(string callId, UpdateCallRequest updateCallRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateALiveCallWithHttpInfoAsync(callId, updateCallRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update a Live Call 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="callId">String that uniquely identifies this call resource.</param>

        /// <param name="updateCallRequest">Call details to update</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<Object>> UpdateALiveCallWithHttpInfoAsync(string callId, UpdateCallRequest updateCallRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'callId' when calling DefaultApi->UpdateALiveCall");
            }


            // verify the required parameter 'updateCallRequest' is set
            if (updateCallRequest == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'updateCallRequest' when calling DefaultApi->UpdateALiveCall");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", freeclimb.Client.ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = updateCallRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/Accounts/{accountId}/Calls/{callId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateALiveCall", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Participant 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">ID of the conference this participant is in.</param>
        /// <param name="callId">ID of the Call associated with this participant.</param>
        /// <param name="updateConferenceParticipantRequest">Conference participant details to update (optional)</param>
        /// <returns>ConferenceParticipantResult</returns>
        public ConferenceParticipantResult UpdateAParticipant(string conferenceId, string callId, UpdateConferenceParticipantRequest updateConferenceParticipantRequest = default(UpdateConferenceParticipantRequest))
        {
            freeclimb.Client.ApiResponse<ConferenceParticipantResult> localVarResponse = UpdateAParticipantWithHttpInfo(conferenceId, callId, updateConferenceParticipantRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Participant 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conferenceId">ID of the conference this participant is in.</param>
        /// <param name="callId">ID of the Call associated with this participant.</param>
        /// <param name="updateConferenceParticipantRequest">Conference participant details to update (optional)</param>
        /// <returns>ApiResponse of ConferenceParticipantResult</returns>
        public freeclimb.Client.ApiResponse<ConferenceParticipantResult> UpdateAParticipantWithHttpInfo(string conferenceId, string callId, UpdateConferenceParticipantRequest updateConferenceParticipantRequest = default(UpdateConferenceParticipantRequest))
        {

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling DefaultApi->UpdateAParticipant");
            }


            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'callId' when calling DefaultApi->UpdateAParticipant");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", freeclimb.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", freeclimb.Client.ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = updateConferenceParticipantRequest;
            Console.WriteLine("Data being passed in for update a participant: " + localVarRequestOptions.Data);

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConferenceParticipantResult>("/Accounts/{accountId}/Conferences/{conferenceId}/Participants/{callId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAParticipant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Participant 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="conferenceId">ID of the conference this participant is in.</param>

        /// <param name="callId">ID of the Call associated with this participant.</param>

        /// <param name="updateConferenceParticipantRequest">Conference participant details to update (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConferenceParticipantResult</returns>
        public async System.Threading.Tasks.Task<ConferenceParticipantResult> UpdateAParticipantAsync(string conferenceId, string callId, UpdateConferenceParticipantRequest updateConferenceParticipantRequest = default(UpdateConferenceParticipantRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<ConferenceParticipantResult> localVarResponse = await UpdateAParticipantWithHttpInfoAsync(conferenceId, callId, updateConferenceParticipantRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Participant 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="conferenceId">ID of the conference this participant is in.</param>

        /// <param name="callId">ID of the Call associated with this participant.</param>

        /// <param name="updateConferenceParticipantRequest">Conference participant details to update (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConferenceParticipantResult)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<ConferenceParticipantResult>> UpdateAParticipantWithHttpInfoAsync(string conferenceId, string callId, UpdateConferenceParticipantRequest updateConferenceParticipantRequest = default(UpdateConferenceParticipantRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling DefaultApi->UpdateAParticipant");
            }


            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'callId' when calling DefaultApi->UpdateAParticipant");
            }




            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", freeclimb.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", freeclimb.Client.ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = updateConferenceParticipantRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConferenceParticipantResult>("/Accounts/{accountId}/Conferences/{conferenceId}/Participants/{callId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAParticipant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Queue 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">A string that uniquely identifies this Queue resource.</param>
        /// <param name="queueRequest">Queue Details to update (optional)</param>
        /// <returns>QueueResult</returns>
        public QueueResult UpdateAQueue(string queueId, QueueRequest queueRequest = default(QueueRequest))
        {
            freeclimb.Client.ApiResponse<QueueResult> localVarResponse = UpdateAQueueWithHttpInfo(queueId, queueRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Queue 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queueId">A string that uniquely identifies this Queue resource.</param>
        /// <param name="queueRequest">Queue Details to update (optional)</param>
        /// <returns>ApiResponse of QueueResult</returns>
        public freeclimb.Client.ApiResponse<QueueResult> UpdateAQueueWithHttpInfo(string queueId, QueueRequest queueRequest = default(QueueRequest))
        {

            // verify the required parameter 'queueId' is set
            if (queueId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'queueId' when calling DefaultApi->UpdateAQueue");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueId", freeclimb.Client.ClientUtils.ParameterToString(queueId)); // path parameter
            localVarRequestOptions.Data = queueRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<QueueResult>("/Accounts/{accountId}/Queues/{queueId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAQueue", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Queue 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">A string that uniquely identifies this Queue resource.</param>

        /// <param name="queueRequest">Queue Details to update (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueueResult</returns>
        public async System.Threading.Tasks.Task<QueueResult> UpdateAQueueAsync(string queueId, QueueRequest queueRequest = default(QueueRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<QueueResult> localVarResponse = await UpdateAQueueWithHttpInfoAsync(queueId, queueRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Queue 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="queueId">A string that uniquely identifies this Queue resource.</param>

        /// <param name="queueRequest">Queue Details to update (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueueResult)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<QueueResult>> UpdateAQueueWithHttpInfoAsync(string queueId, QueueRequest queueRequest = default(QueueRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'queueId' is set
            if (queueId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'queueId' when calling DefaultApi->UpdateAQueue");
            }




            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("queueId", freeclimb.Client.ClientUtils.ParameterToString(queueId)); // path parameter
            localVarRequestOptions.Data = queueRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<QueueResult>("/Accounts/{accountId}/Queues/{queueId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAQueue", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage an account 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountRequest">Account details to update (optional)</param>
        /// <returns></returns>
        public void UpdateAnAccount(AccountRequest accountRequest = default(AccountRequest))
        {
            UpdateAnAccountWithHttpInfo(accountRequest);
        }

        /// <summary>
        /// Manage an account 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountRequest">Account details to update (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public freeclimb.Client.ApiResponse<Object> UpdateAnAccountWithHttpInfo(AccountRequest accountRequest = default(AccountRequest))
        {


            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = accountRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/Accounts/{accountId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAnAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage an account 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="accountRequest">Account details to update (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAnAccountAsync(AccountRequest accountRequest = default(AccountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateAnAccountWithHttpInfoAsync(accountRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage an account 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="accountRequest">Account details to update (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<Object>> UpdateAnAccountWithHttpInfoAsync(AccountRequest accountRequest = default(AccountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = accountRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/Accounts/{accountId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAnAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an application 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">A string that uniquely identifies this application resource.</param>
        /// <param name="applicationRequest">Application details to update. (optional)</param>
        /// <returns>ApplicationResult</returns>
        public ApplicationResult UpdateAnApplication(string applicationId, ApplicationRequest applicationRequest = default(ApplicationRequest))
        {
            freeclimb.Client.ApiResponse<ApplicationResult> localVarResponse = UpdateAnApplicationWithHttpInfo(applicationId, applicationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an application 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">A string that uniquely identifies this application resource.</param>
        /// <param name="applicationRequest">Application details to update. (optional)</param>
        /// <returns>ApiResponse of ApplicationResult</returns>
        public freeclimb.Client.ApiResponse<ApplicationResult> UpdateAnApplicationWithHttpInfo(string applicationId, ApplicationRequest applicationRequest = default(ApplicationRequest))
        {

            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->UpdateAnApplication");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("applicationId", freeclimb.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.Data = applicationRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApplicationResult>("/Accounts/{accountId}/Applications/{applicationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAnApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an application 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="applicationId">A string that uniquely identifies this application resource.</param>

        /// <param name="applicationRequest">Application details to update. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationResult</returns>
        public async System.Threading.Tasks.Task<ApplicationResult> UpdateAnApplicationAsync(string applicationId, ApplicationRequest applicationRequest = default(ApplicationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<ApplicationResult> localVarResponse = await UpdateAnApplicationWithHttpInfoAsync(applicationId, applicationRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an application 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="applicationId">A string that uniquely identifies this application resource.</param>

        /// <param name="applicationRequest">Application details to update. (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationResult)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<ApplicationResult>> UpdateAnApplicationWithHttpInfoAsync(string applicationId, ApplicationRequest applicationRequest = default(ApplicationRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->UpdateAnApplication");
            }




            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("applicationId", freeclimb.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            localVarRequestOptions.Data = applicationRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApplicationResult>("/Accounts/{accountId}/Applications/{applicationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAnApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Incoming Number 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource.</param>
        /// <param name="incomingNumberRequest">Incoming Number details to update (optional)</param>
        /// <returns>IncomingNumberResult</returns>
        public IncomingNumberResult UpdateAnIncomingNumber(string phoneNumberId, IncomingNumberRequest incomingNumberRequest = default(IncomingNumberRequest))
        {
            freeclimb.Client.ApiResponse<IncomingNumberResult> localVarResponse = UpdateAnIncomingNumberWithHttpInfo(phoneNumberId, incomingNumberRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Incoming Number 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource.</param>
        /// <param name="incomingNumberRequest">Incoming Number details to update (optional)</param>
        /// <returns>ApiResponse of IncomingNumberResult</returns>
        public freeclimb.Client.ApiResponse<IncomingNumberResult> UpdateAnIncomingNumberWithHttpInfo(string phoneNumberId, IncomingNumberRequest incomingNumberRequest = default(IncomingNumberRequest))
        {

            // verify the required parameter 'phoneNumberId' is set
            if (phoneNumberId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'phoneNumberId' when calling DefaultApi->UpdateAnIncomingNumber");
            }



            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("phoneNumberId", freeclimb.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter
            localVarRequestOptions.Data = incomingNumberRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IncomingNumberResult>("/Accounts/{accountId}/IncomingPhoneNumbers/{phoneNumberId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAnIncomingNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Incoming Number 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource.</param>

        /// <param name="incomingNumberRequest">Incoming Number details to update (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IncomingNumberResult</returns>
        public async System.Threading.Tasks.Task<IncomingNumberResult> UpdateAnIncomingNumberAsync(string phoneNumberId, IncomingNumberRequest incomingNumberRequest = default(IncomingNumberRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            freeclimb.Client.ApiResponse<IncomingNumberResult> localVarResponse = await UpdateAnIncomingNumberWithHttpInfoAsync(phoneNumberId, incomingNumberRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Incoming Number 
        /// </summary>
        /// <exception cref="freeclimb.Client.ApiException">Thrown when fails to make API call</exception>

        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource.</param>

        /// <param name="incomingNumberRequest">Incoming Number details to update (optional)</param>

        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IncomingNumberResult)</returns>
        public async System.Threading.Tasks.Task<freeclimb.Client.ApiResponse<IncomingNumberResult>> UpdateAnIncomingNumberWithHttpInfoAsync(string phoneNumberId, IncomingNumberRequest incomingNumberRequest = default(IncomingNumberRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            // verify the required parameter 'phoneNumberId' is set
            if (phoneNumberId == null)
            {
                throw new freeclimb.Client.ApiException(400, "Missing required parameter 'phoneNumberId' when calling DefaultApi->UpdateAnIncomingNumber");
            }




            freeclimb.Client.RequestOptions localVarRequestOptions = new freeclimb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = freeclimb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = freeclimb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", freeclimb.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("phoneNumberId", freeclimb.Client.ClientUtils.ParameterToString(phoneNumberId)); // path parameter
            localVarRequestOptions.Data = incomingNumberRequest;

            // authentication (fc) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + freeclimb.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IncomingNumberResult>("/Accounts/{accountId}/IncomingPhoneNumbers/{phoneNumberId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAnIncomingNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
