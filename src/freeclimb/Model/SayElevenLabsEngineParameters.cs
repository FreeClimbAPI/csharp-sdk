/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// The parameters to use for the TTS. The complete list of valid values for the parameters attribute is shown below.
    /// </summary>
    [DataContract(Name = "SayElevenLabsEngineParameters")]
    public partial class SayElevenLabsEngineParameters : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SayElevenLabsEngineParameters" /> class.
        /// </summary>
        /// <param name="modelId">The ID of the ElevenLabs model to use for the TTS. The complete list of valid values for the model_id attribute is shown below. (default to &quot;eleven_turbo_v2_5&quot;).</param>
        /// <param name="voiceId">The ID of the ElevenLabs voice to use for the TTS. The complete list of valid values for the voice_id attribute is shown below..</param>
        /// <param name="languageCode">The language code to use for the TTS. The complete list of valid values for the language_code attribute is shown below. (default to &quot;en&quot;).</param>
        /// <param name="voiceSettings">voiceSettings.</param>
        /// <param name="pronunciationDictionary">pronunciationDictionary.</param>
        /// <param name="seed">seed.</param>
        /// <param name="previousText">previousText.</param>
        /// <param name="nextText">nextText.</param>
        /// <param name="previousRequestIds">previousRequestIds.</param>
        /// <param name="nextRequestIds">nextRequestIds.</param>
        /// <param name="applyLanguageTextNormalization">applyLanguageTextNormalization.</param>
        public SayElevenLabsEngineParameters(
            string modelId = @"eleven_turbo_v2_5",
            string voiceId = default(string),
            string languageCode = @"en",
            SayElevenLabsEngineParametersVoiceSettings voiceSettings =
                default(SayElevenLabsEngineParametersVoiceSettings),
            List<SayElevenLabsEngineParametersPronunciationDictionaryInner> pronunciationDictionary =
                default(List<SayElevenLabsEngineParametersPronunciationDictionaryInner>),
            int seed = default(int),
            string previousText = default(string),
            string nextText = default(string),
            List<string> previousRequestIds = default(List<string>),
            List<string> nextRequestIds = default(List<string>),
            bool applyLanguageTextNormalization = default(bool)
        )
        {
            // use default value if no "modelId" provided
            this.ModelId = modelId;

            this.VoiceId = voiceId;

            // use default value if no "languageCode" provided
            this.LanguageCode = languageCode;

            this.VoiceSettings = voiceSettings;

            this.PronunciationDictionary = pronunciationDictionary;

            this.Seed = seed;

            this.PreviousText = previousText;

            this.NextText = nextText;

            this.PreviousRequestIds = previousRequestIds;

            this.NextRequestIds = nextRequestIds;

            this.ApplyLanguageTextNormalization = applyLanguageTextNormalization;
        }

        /// <summary>
        /// The ID of the ElevenLabs model to use for the TTS. The complete list of valid values for the model_id attribute is shown below.
        /// </summary>
        /// <value>The ID of the ElevenLabs model to use for the TTS. The complete list of valid values for the model_id attribute is shown below.</value>
        [DataMember(Name = "model_id", EmitDefaultValue = false)]
        public string ModelId { get; set; }

        /// <summary>
        /// The ID of the ElevenLabs voice to use for the TTS. The complete list of valid values for the voice_id attribute is shown below.
        /// </summary>
        /// <value>The ID of the ElevenLabs voice to use for the TTS. The complete list of valid values for the voice_id attribute is shown below.</value>
        [DataMember(Name = "voice_id", EmitDefaultValue = false)]
        public string VoiceId { get; set; }

        /// <summary>
        /// The language code to use for the TTS. The complete list of valid values for the language_code attribute is shown below.
        /// </summary>
        /// <value>The language code to use for the TTS. The complete list of valid values for the language_code attribute is shown below.</value>
        [DataMember(Name = "language_code", EmitDefaultValue = false)]
        public string LanguageCode { get; set; }

        /// <summary>
        /// Gets or Sets VoiceSettings
        /// </summary>
        [DataMember(Name = "voice_settings", EmitDefaultValue = false)]
        public SayElevenLabsEngineParametersVoiceSettings VoiceSettings { get; set; }

        /// <summary>
        /// Gets or Sets PronunciationDictionary
        /// </summary>
        [DataMember(Name = "pronunciation_dictionary", EmitDefaultValue = false)]
        public List<SayElevenLabsEngineParametersPronunciationDictionaryInner> PronunciationDictionary { get; set; }

        /// <summary>
        /// Gets or Sets Seed
        /// </summary>
        [DataMember(Name = "seed", EmitDefaultValue = false)]
        public int Seed { get; set; }

        /// <summary>
        /// Gets or Sets PreviousText
        /// </summary>
        [DataMember(Name = "previous_text", EmitDefaultValue = false)]
        public string PreviousText { get; set; }

        /// <summary>
        /// Gets or Sets NextText
        /// </summary>
        [DataMember(Name = "next_text", EmitDefaultValue = false)]
        public string NextText { get; set; }

        /// <summary>
        /// Gets or Sets PreviousRequestIds
        /// </summary>
        [DataMember(Name = "previous_request_ids", EmitDefaultValue = false)]
        public List<string> PreviousRequestIds { get; set; }

        /// <summary>
        /// Gets or Sets NextRequestIds
        /// </summary>
        [DataMember(Name = "next_request_ids", EmitDefaultValue = false)]
        public List<string> NextRequestIds { get; set; }

        /// <summary>
        /// Gets or Sets ApplyLanguageTextNormalization
        /// </summary>
        [DataMember(Name = "apply_language_text_normalization", EmitDefaultValue = true)]
        public bool ApplyLanguageTextNormalization { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SayElevenLabsEngineParameters {\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  VoiceId: ").Append(VoiceId).Append("\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("  VoiceSettings: ").Append(VoiceSettings).Append("\n");
            sb.Append("  PronunciationDictionary: ").Append(PronunciationDictionary).Append("\n");
            sb.Append("  Seed: ").Append(Seed).Append("\n");
            sb.Append("  PreviousText: ").Append(PreviousText).Append("\n");
            sb.Append("  NextText: ").Append(NextText).Append("\n");
            sb.Append("  PreviousRequestIds: ").Append(PreviousRequestIds).Append("\n");
            sb.Append("  NextRequestIds: ").Append(NextRequestIds).Append("\n");
            sb.Append("  ApplyLanguageTextNormalization: ")
                .Append(ApplyLanguageTextNormalization)
                .Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented,
                new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }
            );
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the SayElevenLabsEngineParameters instance.
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public virtual IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            AddToDictionary(props, "modelId", ModelId);
            AddToDictionary(props, "voiceId", VoiceId);
            AddToDictionary(props, "languageCode", LanguageCode);
            AddToDictionary(props, "voiceSettings", VoiceSettings);
            List<object> nestedPronunciationDictionary = new List<object>();
            if (PronunciationDictionary != null)
            {
                foreach (var item in PronunciationDictionary)
                {
                    nestedPronunciationDictionary.Add(item.ToKvp());
                }
            }
            AddToDictionary(props, "pronunciationDictionary", nestedPronunciationDictionary);
            AddToDictionary(props, "seed", Seed);
            AddToDictionary(props, "previousText", PreviousText);
            AddToDictionary(props, "nextText", NextText);
            List<object> nestedPreviousRequestIds = new List<object>();
            if (PreviousRequestIds != null)
            {
                nestedPreviousRequestIds.Add(PreviousRequestIds);
            }
            AddToDictionary(props, "previousRequestIds", nestedPreviousRequestIds);
            List<object> nestedNextRequestIds = new List<object>();
            if (NextRequestIds != null)
            {
                nestedNextRequestIds.Add(NextRequestIds);
            }
            AddToDictionary(props, "nextRequestIds", nestedNextRequestIds);
            AddToDictionary(
                props,
                "applyLanguageTextNormalization",
                ApplyLanguageTextNormalization
            );
            return props;
        }

        private IDictionary<string, object> AddToDictionary(
            IDictionary<string, object> dict,
            string key,
            object value
        )
        {
            if (value != null)
            {
                dict.Add(key, value);
            }
            return dict;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            yield break;
        }
    }
}
