/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// SMSTenDLCPartnerCampaign
    /// </summary>
    [DataContract(Name = "SMSTenDLCPartnerCampaign")]
    public partial class SMSTenDLCPartnerCampaign : IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public SMSTenDLCPartnerCampaignStatus? Status { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="SMSTenDLCPartnerCampaign" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SMSTenDLCPartnerCampaign() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="SMSTenDLCPartnerCampaign" /> class.
        /// </summary>
        /// <param name="accountId">ID of the account that created this Queue..</param>
        /// <param name="campaignId">Alphanumeric identifier assigned by the registry for a campaign. This identifier is required by the NetNumber OSR SMS enabling process of 10DLC. (required).</param>
        /// <param name="status">status.</param>
        /// <param name="createDate">Unix timestamp when campaign was created..</param>
        /// <param name="brandId">Alphanumeric identifier of the brand associated with this campaign. (required).</param>
        /// <param name="usecase">Campaign usecase. Must be of defined valid types. Use &#x60;/registry/enum/usecase&#x60; operation to retrieve usecases available for given brand. (required).</param>
        /// <param name="description">Summary description of this campaign. (required).</param>
        /// <param name="embeddedLink">Does message generated by the campaign include URL link in SMS? (default to false).</param>
        /// <param name="embeddedPhone">Does message generated by the campaign include phone number in SMS? (default to false).</param>
        /// <param name="affiliateMarketing">Does message content controlled by affiliate marketing other than the brand?.</param>
        /// <param name="numberPool">Does campaign utilize pool of phone nubers? (default to false).</param>
        /// <param name="ageGated">Age gated content in campaign..</param>
        /// <param name="directLending">directLending.</param>
        /// <param name="subscriberOptin">Does campaign require subscriber to opt-in before SMS is sent to subscriber? (default to false).</param>
        /// <param name="subscriberOptout">Does campaign support subscriber opt-out keyword(s)? (default to false).</param>
        /// <param name="subscriberHelp">Does campaign responds to help keyword(s)? (default to false).</param>
        /// <param name="sample1">Message sample. Some campaign tiers require 1 or more message samples..</param>
        /// <param name="sample2">Message sample. Some campaign tiers require 2 or more message samples..</param>
        /// <param name="sample3">Message sample. Some campaign tiers require 3 or more message samples..</param>
        /// <param name="sample4">Message sample. Some campaign tiers require 4 or more message samples..</param>
        /// <param name="sample5">Message sample. Some campaign tiers require 5 or more message samples..</param>
        /// <param name="messageFlow">Message flow description..</param>
        /// <param name="helpMessage">Help message of the campaign..</param>
        /// <param name="optinKeywords">Subscriber opt-in keywords. Multiple keywords are comma separated without space..</param>
        /// <param name="optoutKeywords">Subscriber opt-out keywords. Multiple keywords are comma separated without space..</param>
        /// <param name="helpKeywords">Subscriber help keywords. Multiple keywords are comma separated without space..</param>
        /// <param name="optinMessage">Subscriber opt-in message..</param>
        /// <param name="optoutMessage">Subscriber opt-out message..</param>
        /// <param name="brand">brand.</param>
        public SMSTenDLCPartnerCampaign(
            string accountId = default(string),
            string campaignId = default(string),
            SMSTenDLCPartnerCampaignStatus? status = default(SMSTenDLCPartnerCampaignStatus?),
            DateTime createDate = default(DateTime),
            string brandId = default(string),
            string usecase = default(string),
            string description = default(string),
            bool embeddedLink = false,
            bool embeddedPhone = false,
            bool affiliateMarketing = default(bool),
            bool numberPool = false,
            bool ageGated = default(bool),
            bool directLending = default(bool),
            bool subscriberOptin = false,
            bool subscriberOptout = false,
            bool subscriberHelp = false,
            string sample1 = default(string),
            string sample2 = default(string),
            string sample3 = default(string),
            string sample4 = default(string),
            string sample5 = default(string),
            string messageFlow = default(string),
            string helpMessage = default(string),
            string optinKeywords = default(string),
            string optoutKeywords = default(string),
            string helpKeywords = default(string),
            string optinMessage = default(string),
            string optoutMessage = default(string),
            SMSTenDLCPartnerCampaignBrand brand = default(SMSTenDLCPartnerCampaignBrand)
        )
        {
            // to ensure "campaignId" is required (not null)
            if (campaignId == null)
            {
                throw new ArgumentNullException(
                    "campaignId is a required property for SMSTenDLCPartnerCampaign and cannot be null"
                );
            }
            this.CampaignId = campaignId;

            // to ensure "brandId" is required (not null)
            if (brandId == null)
            {
                throw new ArgumentNullException(
                    "brandId is a required property for SMSTenDLCPartnerCampaign and cannot be null"
                );
            }
            this.BrandId = brandId;

            // to ensure "usecase" is required (not null)
            if (usecase == null)
            {
                throw new ArgumentNullException(
                    "usecase is a required property for SMSTenDLCPartnerCampaign and cannot be null"
                );
            }
            this.Usecase = usecase;

            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException(
                    "description is a required property for SMSTenDLCPartnerCampaign and cannot be null"
                );
            }
            this.Description = description;

            this.AccountId = accountId;

            this.Status = status;

            this.CreateDate = createDate;

            this.EmbeddedLink = embeddedLink;

            this.EmbeddedPhone = embeddedPhone;

            this.AffiliateMarketing = affiliateMarketing;

            this.NumberPool = numberPool;

            this.AgeGated = ageGated;

            this.DirectLending = directLending;

            this.SubscriberOptin = subscriberOptin;

            this.SubscriberOptout = subscriberOptout;

            this.SubscriberHelp = subscriberHelp;

            this.Sample1 = sample1;

            this.Sample2 = sample2;

            this.Sample3 = sample3;

            this.Sample4 = sample4;

            this.Sample5 = sample5;

            this.MessageFlow = messageFlow;

            this.HelpMessage = helpMessage;

            this.OptinKeywords = optinKeywords;

            this.OptoutKeywords = optoutKeywords;

            this.HelpKeywords = helpKeywords;

            this.OptinMessage = optinMessage;

            this.OptoutMessage = optoutMessage;

            this.Brand = brand;
        }

        /// <summary>
        /// ID of the account that created this Queue.
        /// </summary>
        /// <value>ID of the account that created this Queue.</value>
        [DataMember(Name = "accountId", EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// Alphanumeric identifier assigned by the registry for a campaign. This identifier is required by the NetNumber OSR SMS enabling process of 10DLC.
        /// </summary>
        /// <value>Alphanumeric identifier assigned by the registry for a campaign. This identifier is required by the NetNumber OSR SMS enabling process of 10DLC.</value>
        [DataMember(Name = "campaignId", IsRequired = true, EmitDefaultValue = true)]
        public string CampaignId { get; set; }

        /// <summary>
        /// Unix timestamp when campaign was created.
        /// </summary>
        /// <value>Unix timestamp when campaign was created.</value>
        [DataMember(Name = "createDate", EmitDefaultValue = false)]
        public DateTime CreateDate { get; set; }

        /// <summary>
        /// Alphanumeric identifier of the brand associated with this campaign.
        /// </summary>
        /// <value>Alphanumeric identifier of the brand associated with this campaign.</value>
        [DataMember(Name = "brandId", IsRequired = true, EmitDefaultValue = true)]
        public string BrandId { get; set; }

        /// <summary>
        /// Campaign usecase. Must be of defined valid types. Use &#x60;/registry/enum/usecase&#x60; operation to retrieve usecases available for given brand.
        /// </summary>
        /// <value>Campaign usecase. Must be of defined valid types. Use &#x60;/registry/enum/usecase&#x60; operation to retrieve usecases available for given brand.</value>
        [DataMember(Name = "usecase", IsRequired = true, EmitDefaultValue = true)]
        public string Usecase { get; set; }

        /// <summary>
        /// Summary description of this campaign.
        /// </summary>
        /// <value>Summary description of this campaign.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Does message generated by the campaign include URL link in SMS?
        /// </summary>
        /// <value>Does message generated by the campaign include URL link in SMS?</value>
        [DataMember(Name = "embeddedLink", EmitDefaultValue = true)]
        public bool EmbeddedLink { get; set; }

        /// <summary>
        /// Does message generated by the campaign include phone number in SMS?
        /// </summary>
        /// <value>Does message generated by the campaign include phone number in SMS?</value>
        [DataMember(Name = "embeddedPhone", EmitDefaultValue = true)]
        public bool EmbeddedPhone { get; set; }

        /// <summary>
        /// Does message content controlled by affiliate marketing other than the brand?
        /// </summary>
        /// <value>Does message content controlled by affiliate marketing other than the brand?</value>
        [DataMember(Name = "affiliateMarketing", EmitDefaultValue = true)]
        public bool AffiliateMarketing { get; set; }

        /// <summary>
        /// Does campaign utilize pool of phone nubers?
        /// </summary>
        /// <value>Does campaign utilize pool of phone nubers?</value>
        [DataMember(Name = "numberPool", EmitDefaultValue = true)]
        public bool NumberPool { get; set; }

        /// <summary>
        /// Age gated content in campaign.
        /// </summary>
        /// <value>Age gated content in campaign.</value>
        [DataMember(Name = "ageGated", EmitDefaultValue = true)]
        public bool AgeGated { get; set; }

        /// <summary>
        /// Gets or Sets DirectLending
        /// </summary>
        [DataMember(Name = "directLending", EmitDefaultValue = true)]
        public bool DirectLending { get; set; }

        /// <summary>
        /// Does campaign require subscriber to opt-in before SMS is sent to subscriber?
        /// </summary>
        /// <value>Does campaign require subscriber to opt-in before SMS is sent to subscriber?</value>
        [DataMember(Name = "subscriberOptin", EmitDefaultValue = true)]
        public bool SubscriberOptin { get; set; }

        /// <summary>
        /// Does campaign support subscriber opt-out keyword(s)?
        /// </summary>
        /// <value>Does campaign support subscriber opt-out keyword(s)?</value>
        [DataMember(Name = "subscriberOptout", EmitDefaultValue = true)]
        public bool SubscriberOptout { get; set; }

        /// <summary>
        /// Does campaign responds to help keyword(s)?
        /// </summary>
        /// <value>Does campaign responds to help keyword(s)?</value>
        [DataMember(Name = "subscriberHelp", EmitDefaultValue = true)]
        public bool SubscriberHelp { get; set; }

        /// <summary>
        /// Message sample. Some campaign tiers require 1 or more message samples.
        /// </summary>
        /// <value>Message sample. Some campaign tiers require 1 or more message samples.</value>
        [DataMember(Name = "sample1", EmitDefaultValue = false)]
        public string Sample1 { get; set; }

        /// <summary>
        /// Message sample. Some campaign tiers require 2 or more message samples.
        /// </summary>
        /// <value>Message sample. Some campaign tiers require 2 or more message samples.</value>
        [DataMember(Name = "sample2", EmitDefaultValue = true)]
        public string Sample2 { get; set; }

        /// <summary>
        /// Message sample. Some campaign tiers require 3 or more message samples.
        /// </summary>
        /// <value>Message sample. Some campaign tiers require 3 or more message samples.</value>
        [DataMember(Name = "sample3", EmitDefaultValue = true)]
        public string Sample3 { get; set; }

        /// <summary>
        /// Message sample. Some campaign tiers require 4 or more message samples.
        /// </summary>
        /// <value>Message sample. Some campaign tiers require 4 or more message samples.</value>
        [DataMember(Name = "sample4", EmitDefaultValue = true)]
        public string Sample4 { get; set; }

        /// <summary>
        /// Message sample. Some campaign tiers require 5 or more message samples.
        /// </summary>
        /// <value>Message sample. Some campaign tiers require 5 or more message samples.</value>
        [DataMember(Name = "sample5", EmitDefaultValue = true)]
        public string Sample5 { get; set; }

        /// <summary>
        /// Message flow description.
        /// </summary>
        /// <value>Message flow description.</value>
        [DataMember(Name = "messageFlow", EmitDefaultValue = true)]
        public string MessageFlow { get; set; }

        /// <summary>
        /// Help message of the campaign.
        /// </summary>
        /// <value>Help message of the campaign.</value>
        [DataMember(Name = "helpMessage", EmitDefaultValue = true)]
        public string HelpMessage { get; set; }

        /// <summary>
        /// Subscriber opt-in keywords. Multiple keywords are comma separated without space.
        /// </summary>
        /// <value>Subscriber opt-in keywords. Multiple keywords are comma separated without space.</value>
        [DataMember(Name = "optinKeywords", EmitDefaultValue = false)]
        public string OptinKeywords { get; set; }

        /// <summary>
        /// Subscriber opt-out keywords. Multiple keywords are comma separated without space.
        /// </summary>
        /// <value>Subscriber opt-out keywords. Multiple keywords are comma separated without space.</value>
        [DataMember(Name = "optoutKeywords", EmitDefaultValue = false)]
        public string OptoutKeywords { get; set; }

        /// <summary>
        /// Subscriber help keywords. Multiple keywords are comma separated without space.
        /// </summary>
        /// <value>Subscriber help keywords. Multiple keywords are comma separated without space.</value>
        [DataMember(Name = "helpKeywords", EmitDefaultValue = false)]
        public string HelpKeywords { get; set; }

        /// <summary>
        /// Subscriber opt-in message.
        /// </summary>
        /// <value>Subscriber opt-in message.</value>
        [DataMember(Name = "optinMessage", EmitDefaultValue = false)]
        public string OptinMessage { get; set; }

        /// <summary>
        /// Subscriber opt-out message.
        /// </summary>
        /// <value>Subscriber opt-out message.</value>
        [DataMember(Name = "optoutMessage", EmitDefaultValue = false)]
        public string OptoutMessage { get; set; }

        /// <summary>
        /// Gets or Sets Brand
        /// </summary>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        public SMSTenDLCPartnerCampaignBrand Brand { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SMSTenDLCPartnerCampaign {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  BrandId: ").Append(BrandId).Append("\n");
            sb.Append("  Usecase: ").Append(Usecase).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EmbeddedLink: ").Append(EmbeddedLink).Append("\n");
            sb.Append("  EmbeddedPhone: ").Append(EmbeddedPhone).Append("\n");
            sb.Append("  AffiliateMarketing: ").Append(AffiliateMarketing).Append("\n");
            sb.Append("  NumberPool: ").Append(NumberPool).Append("\n");
            sb.Append("  AgeGated: ").Append(AgeGated).Append("\n");
            sb.Append("  DirectLending: ").Append(DirectLending).Append("\n");
            sb.Append("  SubscriberOptin: ").Append(SubscriberOptin).Append("\n");
            sb.Append("  SubscriberOptout: ").Append(SubscriberOptout).Append("\n");
            sb.Append("  SubscriberHelp: ").Append(SubscriberHelp).Append("\n");
            sb.Append("  Sample1: ").Append(Sample1).Append("\n");
            sb.Append("  Sample2: ").Append(Sample2).Append("\n");
            sb.Append("  Sample3: ").Append(Sample3).Append("\n");
            sb.Append("  Sample4: ").Append(Sample4).Append("\n");
            sb.Append("  Sample5: ").Append(Sample5).Append("\n");
            sb.Append("  MessageFlow: ").Append(MessageFlow).Append("\n");
            sb.Append("  HelpMessage: ").Append(HelpMessage).Append("\n");
            sb.Append("  OptinKeywords: ").Append(OptinKeywords).Append("\n");
            sb.Append("  OptoutKeywords: ").Append(OptoutKeywords).Append("\n");
            sb.Append("  HelpKeywords: ").Append(HelpKeywords).Append("\n");
            sb.Append("  OptinMessage: ").Append(OptinMessage).Append("\n");
            sb.Append("  OptoutMessage: ").Append(OptoutMessage).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented,
                new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }
            );
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the SMSTenDLCPartnerCampaign instance.
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public virtual IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            AddToDictionary(props, "accountId", AccountId);
            AddToDictionary(props, "campaignId", CampaignId);
            AddToDictionary(props, "status", Status);
            AddToDictionary(props, "createDate", CreateDate);
            AddToDictionary(props, "brandId", BrandId);
            AddToDictionary(props, "usecase", Usecase);
            AddToDictionary(props, "description", Description);
            AddToDictionary(props, "embeddedLink", EmbeddedLink);
            AddToDictionary(props, "embeddedPhone", EmbeddedPhone);
            AddToDictionary(props, "affiliateMarketing", AffiliateMarketing);
            AddToDictionary(props, "numberPool", NumberPool);
            AddToDictionary(props, "ageGated", AgeGated);
            AddToDictionary(props, "directLending", DirectLending);
            AddToDictionary(props, "subscriberOptin", SubscriberOptin);
            AddToDictionary(props, "subscriberOptout", SubscriberOptout);
            AddToDictionary(props, "subscriberHelp", SubscriberHelp);
            AddToDictionary(props, "sample1", Sample1);
            AddToDictionary(props, "sample2", Sample2);
            AddToDictionary(props, "sample3", Sample3);
            AddToDictionary(props, "sample4", Sample4);
            AddToDictionary(props, "sample5", Sample5);
            AddToDictionary(props, "messageFlow", MessageFlow);
            AddToDictionary(props, "helpMessage", HelpMessage);
            AddToDictionary(props, "optinKeywords", OptinKeywords);
            AddToDictionary(props, "optoutKeywords", OptoutKeywords);
            AddToDictionary(props, "helpKeywords", HelpKeywords);
            AddToDictionary(props, "optinMessage", OptinMessage);
            AddToDictionary(props, "optoutMessage", OptoutMessage);
            AddToDictionary(props, "brand", Brand);
            return props;
        }

        private IDictionary<string, object> AddToDictionary(
            IDictionary<string, object> dict,
            string key,
            object value
        )
        {
            if (value != null)
            {
                dict.Add(key, value);
            }
            return dict;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            // BrandId (string) maxLength
            if (this.BrandId != null && this.BrandId.Length > 8)
            {
                yield return new ValidationResult(
                    "Invalid value for BrandId, length must be less than 8.",
                    new[] { "BrandId" }
                );
            }

            // Usecase (string) maxLength
            if (this.Usecase != null && this.Usecase.Length > 20)
            {
                yield return new ValidationResult(
                    "Invalid value for Usecase, length must be less than 20.",
                    new[] { "Usecase" }
                );
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 4096)
            {
                yield return new ValidationResult(
                    "Invalid value for Description, length must be less than 4096.",
                    new[] { "Description" }
                );
            }

            // Sample1 (string) maxLength
            if (this.Sample1 != null && this.Sample1.Length > 1024)
            {
                yield return new ValidationResult(
                    "Invalid value for Sample1, length must be less than 1024.",
                    new[] { "Sample1" }
                );
            }

            // Sample2 (string) maxLength
            if (this.Sample2 != null && this.Sample2.Length > 1024)
            {
                yield return new ValidationResult(
                    "Invalid value for Sample2, length must be less than 1024.",
                    new[] { "Sample2" }
                );
            }

            // Sample3 (string) maxLength
            if (this.Sample3 != null && this.Sample3.Length > 1024)
            {
                yield return new ValidationResult(
                    "Invalid value for Sample3, length must be less than 1024.",
                    new[] { "Sample3" }
                );
            }

            // Sample4 (string) maxLength
            if (this.Sample4 != null && this.Sample4.Length > 1024)
            {
                yield return new ValidationResult(
                    "Invalid value for Sample4, length must be less than 1024.",
                    new[] { "Sample4" }
                );
            }

            // Sample5 (string) maxLength
            if (this.Sample5 != null && this.Sample5.Length > 1024)
            {
                yield return new ValidationResult(
                    "Invalid value for Sample5, length must be less than 1024.",
                    new[] { "Sample5" }
                );
            }

            // MessageFlow (string) maxLength
            if (this.MessageFlow != null && this.MessageFlow.Length > 2048)
            {
                yield return new ValidationResult(
                    "Invalid value for MessageFlow, length must be less than 2048.",
                    new[] { "MessageFlow" }
                );
            }

            // HelpMessage (string) maxLength
            if (this.HelpMessage != null && this.HelpMessage.Length > 255)
            {
                yield return new ValidationResult(
                    "Invalid value for HelpMessage, length must be less than 255.",
                    new[] { "HelpMessage" }
                );
            }

            // OptinKeywords (string) maxLength
            if (this.OptinKeywords != null && this.OptinKeywords.Length > 255)
            {
                yield return new ValidationResult(
                    "Invalid value for OptinKeywords, length must be less than 255.",
                    new[] { "OptinKeywords" }
                );
            }

            // OptoutKeywords (string) maxLength
            if (this.OptoutKeywords != null && this.OptoutKeywords.Length > 255)
            {
                yield return new ValidationResult(
                    "Invalid value for OptoutKeywords, length must be less than 255.",
                    new[] { "OptoutKeywords" }
                );
            }

            // HelpKeywords (string) maxLength
            if (this.HelpKeywords != null && this.HelpKeywords.Length > 255)
            {
                yield return new ValidationResult(
                    "Invalid value for HelpKeywords, length must be less than 255.",
                    new[] { "HelpKeywords" }
                );
            }

            // OptinMessage (string) maxLength
            if (this.OptinMessage != null && this.OptinMessage.Length > 255)
            {
                yield return new ValidationResult(
                    "Invalid value for OptinMessage, length must be less than 255.",
                    new[] { "OptinMessage" }
                );
            }

            // OptoutMessage (string) maxLength
            if (this.OptoutMessage != null && this.OptoutMessage.Length > 255)
            {
                yield return new ValidationResult(
                    "Invalid value for OptoutMessage, length must be less than 255.",
                    new[] { "OptoutMessage" }
                );
            }

            yield break;
        }
    }
}
