/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using JsonSubTypes;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// TranscribeWebhook
    /// </summary>
    [DataContract(Name = "TranscribeWebhook")]
    [JsonConverter(typeof(JsonSubtypes), "RequestType")]
    public partial class TranscribeWebhook : Webhook, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets TermReason
        /// </summary>
        [DataMember(Name = "termReason", EmitDefaultValue = false)]
        public TranscribeTermReason? TermReason { get; set; }

        /// <summary>
        /// Gets or Sets RecordTermReason
        /// </summary>
        [DataMember(Name = "recordTermReason", EmitDefaultValue = false)]
        public RecordUtteranceTermReason? RecordTermReason { get; set; }

        /// <summary>
        /// Gets or Sets BargeInReason
        /// </summary>
        [DataMember(Name = "bargeInReason", EmitDefaultValue = false)]
        public BargeInReason? BargeInReason { get; set; }

        /// <summary>
        /// Gets or Sets TranscribeReason
        /// </summary>
        [DataMember(Name = "transcribeReason", EmitDefaultValue = false)]
        public TranscribeReason? TranscribeReason { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="TranscribeWebhook" /> class.
        /// </summary>
        /// <param name="requestType">The context or reason why this request is being made. Will be transcribe - The TranscribeUtterance command has completed and its actionUrl is being invoked. (default to &quot;TranscribeWebhook&quot;).</param>
        /// <param name="accountId">Account ID associated with your account..</param>
        /// <param name="callId">Unique identifier for this Call, generated by FreeClimb.</param>
        /// <param name="from">Phone number of the party that initiated the Call (in E.164 format)..</param>
        /// <param name="to">Phone number provisioned to the customer and to which this Call is directed (in E.164 format)..</param>
        /// <param name="recordingId">The ID of the recording. If no recording was made due to errors or the &#39;saveRecording&#39; flag being disabled this field will be set to null..</param>
        /// <param name="recordingUrl">The URL of the recorded audio file. This URL can be used as is in a Play command to play the recording (no authentication needed). It can also be used to download the recording file via the REST API..</param>
        /// <param name="recordingSize">The size of the recording in bytes..</param>
        /// <param name="recordingFormat">The media type of the recording..</param>
        /// <param name="recordingDurationMs">The duration of the recorded audio in milliseconds..</param>
        /// <param name="termReason">termReason.</param>
        /// <param name="recordTermReason">recordTermReason.</param>
        /// <param name="digit">If recordTermReason is digit, this will be the digit that was pressed. Otherwise it will be null..</param>
        /// <param name="privacyForLogging">Echo back of the privacyForLogging flag as specified in the transcribe utterance command – confirmation of logging protection has been applied. Can be used by application to know it should also apply protection when handling this request..</param>
        /// <param name="privacyForRecording">Echo back of the privacyForRecording flag as specified in the transcribe utterance command – confirmation of logging protection has been applied. Can be used by application to know it should also apply protection when handling this request..</param>
        /// <param name="bargeInReason">bargeInReason.</param>
        /// <param name="bargedInPromptNo">bargedInPromptNo.</param>
        /// <param name="bargedInPromptMs">duration in ms bargedInPromptNo prompt was executing until barge-in occurred..</param>
        /// <param name="bargedInPromptLoopNo">bargedInPromptLoopNo.</param>
        /// <param name="bargeInTimeMs">epoch time in ms.</param>
        /// <param name="transcript">Transcribed text of the recording. Can be empty or null. null means there was a failure in transcribing the audio, refer to transcribeReason for detailed failure reason..</param>
        /// <param name="transcribeReason">transcribeReason.</param>
        /// <param name="transcriptionDurationMs">The duration of the audio being transcribed in milliseconds.</param>
        public TranscribeWebhook(
            string requestType = @"TranscribeWebhook",
            string accountId = default(string),
            string callId = default(string),
            string from = default(string),
            string to = default(string),
            string recordingId = default(string),
            string recordingUrl = default(string),
            int recordingSize = default(int),
            string recordingFormat = default(string),
            int recordingDurationMs = default(int),
            TranscribeTermReason? termReason = default(TranscribeTermReason?),
            RecordUtteranceTermReason? recordTermReason = default(RecordUtteranceTermReason?),
            string digit = default(string),
            bool privacyForLogging = default(bool),
            bool privacyForRecording = default(bool),
            BargeInReason? bargeInReason = default(BargeInReason?),
            int bargedInPromptNo = default(int),
            int bargedInPromptMs = default(int),
            int bargedInPromptLoopNo = default(int),
            int bargeInTimeMs = default(int),
            string transcript = default(string),
            TranscribeReason? transcribeReason = default(TranscribeReason?),
            int transcriptionDurationMs = default(int)
        )
            : base()
        {
            base.RequestType = requestType;

            this.AccountId = accountId;

            this.CallId = callId;

            this.From = from;

            this.To = to;

            this.RecordingId = recordingId;

            this.RecordingUrl = recordingUrl;

            this.RecordingSize = recordingSize;

            this.RecordingFormat = recordingFormat;

            this.RecordingDurationMs = recordingDurationMs;

            this.TermReason = termReason;

            this.RecordTermReason = recordTermReason;

            this.Digit = digit;

            this.PrivacyForLogging = privacyForLogging;

            this.PrivacyForRecording = privacyForRecording;

            this.BargeInReason = bargeInReason;

            this.BargedInPromptNo = bargedInPromptNo;

            this.BargedInPromptMs = bargedInPromptMs;

            this.BargedInPromptLoopNo = bargedInPromptLoopNo;

            this.BargeInTimeMs = bargeInTimeMs;

            this.Transcript = transcript;

            this.TranscribeReason = transcribeReason;

            this.TranscriptionDurationMs = transcriptionDurationMs;
        }

        private static readonly JsonSerializerSettings _serializerSettings =
            new JsonSerializerSettings
            {
                // OpenAPI generated types generally hide default constructors.
                ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,
                ContractResolver = new DefaultContractResolver
                {
                    NamingStrategy = new CamelCaseNamingStrategy { OverrideSpecifiedNames = false },
                },
            };

        /// <summary>
        /// Deserializes json payload into instance TranscribeWebhook
        /// </summary>
        /// <param name="jsonPayload"></param>
        /// <returns>instanceof RemoveFromQueueNotificationWebhook</returns>
        public static TranscribeWebhook Deserialize(string jsonPayload)
        {
            return (TranscribeWebhook)
                JsonConvert.DeserializeObject(
                    jsonPayload,
                    typeof(TranscribeWebhook),
                    _serializerSettings
                );
        }

        /// <summary>
        /// Account ID associated with your account.
        /// </summary>
        /// <value>Account ID associated with your account.</value>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Unique identifier for this Call, generated by FreeClimb
        /// </summary>
        /// <value>Unique identifier for this Call, generated by FreeClimb</value>
        [DataMember(Name = "callId", EmitDefaultValue = false)]
        public string CallId { get; set; }

        /// <summary>
        /// Phone number of the party that initiated the Call (in E.164 format).
        /// </summary>
        /// <value>Phone number of the party that initiated the Call (in E.164 format).</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public string From { get; set; }

        /// <summary>
        /// Phone number provisioned to the customer and to which this Call is directed (in E.164 format).
        /// </summary>
        /// <value>Phone number provisioned to the customer and to which this Call is directed (in E.164 format).</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        /// The ID of the recording. If no recording was made due to errors or the &#39;saveRecording&#39; flag being disabled this field will be set to null.
        /// </summary>
        /// <value>The ID of the recording. If no recording was made due to errors or the &#39;saveRecording&#39; flag being disabled this field will be set to null.</value>
        [DataMember(Name = "recordingId", EmitDefaultValue = true)]
        public string RecordingId { get; set; }

        /// <summary>
        /// The URL of the recorded audio file. This URL can be used as is in a Play command to play the recording (no authentication needed). It can also be used to download the recording file via the REST API.
        /// </summary>
        /// <value>The URL of the recorded audio file. This URL can be used as is in a Play command to play the recording (no authentication needed). It can also be used to download the recording file via the REST API.</value>
        [DataMember(Name = "recordingUrl", EmitDefaultValue = true)]
        public string RecordingUrl { get; set; }

        /// <summary>
        /// The size of the recording in bytes.
        /// </summary>
        /// <value>The size of the recording in bytes.</value>
        [DataMember(Name = "recordingSize", EmitDefaultValue = false)]
        public int RecordingSize { get; set; }

        /// <summary>
        /// The media type of the recording.
        /// </summary>
        /// <value>The media type of the recording.</value>
        [DataMember(Name = "recordingFormat", EmitDefaultValue = true)]
        public string RecordingFormat { get; set; }

        /// <summary>
        /// The duration of the recorded audio in milliseconds.
        /// </summary>
        /// <value>The duration of the recorded audio in milliseconds.</value>
        [DataMember(Name = "recordingDurationMs", EmitDefaultValue = false)]
        public int RecordingDurationMs { get; set; }

        /// <summary>
        /// If recordTermReason is digit, this will be the digit that was pressed. Otherwise it will be null.
        /// </summary>
        /// <value>If recordTermReason is digit, this will be the digit that was pressed. Otherwise it will be null.</value>
        [DataMember(Name = "digit", EmitDefaultValue = true)]
        public string Digit { get; set; }

        /// <summary>
        /// Echo back of the privacyForLogging flag as specified in the transcribe utterance command – confirmation of logging protection has been applied. Can be used by application to know it should also apply protection when handling this request.
        /// </summary>
        /// <value>Echo back of the privacyForLogging flag as specified in the transcribe utterance command – confirmation of logging protection has been applied. Can be used by application to know it should also apply protection when handling this request.</value>
        [DataMember(Name = "privacyForLogging", EmitDefaultValue = true)]
        public bool PrivacyForLogging { get; set; }

        /// <summary>
        /// Echo back of the privacyForRecording flag as specified in the transcribe utterance command – confirmation of logging protection has been applied. Can be used by application to know it should also apply protection when handling this request.
        /// </summary>
        /// <value>Echo back of the privacyForRecording flag as specified in the transcribe utterance command – confirmation of logging protection has been applied. Can be used by application to know it should also apply protection when handling this request.</value>
        [DataMember(Name = "privacyForRecording", EmitDefaultValue = true)]
        public bool PrivacyForRecording { get; set; }

        /// <summary>
        /// Gets or Sets BargedInPromptNo
        /// </summary>
        [DataMember(Name = "bargedInPromptNo", EmitDefaultValue = false)]
        public int BargedInPromptNo { get; set; }

        /// <summary>
        /// duration in ms bargedInPromptNo prompt was executing until barge-in occurred.
        /// </summary>
        /// <value>duration in ms bargedInPromptNo prompt was executing until barge-in occurred.</value>
        [DataMember(Name = "bargedInPromptMs", EmitDefaultValue = false)]
        public int BargedInPromptMs { get; set; }

        /// <summary>
        /// Gets or Sets BargedInPromptLoopNo
        /// </summary>
        [DataMember(Name = "bargedInPromptLoopNo", EmitDefaultValue = false)]
        public int BargedInPromptLoopNo { get; set; }

        /// <summary>
        /// epoch time in ms
        /// </summary>
        /// <value>epoch time in ms</value>
        [DataMember(Name = "bargeInTimeMs", EmitDefaultValue = false)]
        public int BargeInTimeMs { get; set; }

        /// <summary>
        /// Transcribed text of the recording. Can be empty or null. null means there was a failure in transcribing the audio, refer to transcribeReason for detailed failure reason.
        /// </summary>
        /// <value>Transcribed text of the recording. Can be empty or null. null means there was a failure in transcribing the audio, refer to transcribeReason for detailed failure reason.</value>
        [DataMember(Name = "transcript", EmitDefaultValue = true)]
        public string Transcript { get; set; }

        /// <summary>
        /// The duration of the audio being transcribed in milliseconds
        /// </summary>
        /// <value>The duration of the audio being transcribed in milliseconds</value>
        [DataMember(Name = "transcriptionDurationMs", EmitDefaultValue = false)]
        public int TranscriptionDurationMs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TranscribeWebhook {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  RequestType: ").Append(RequestType).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  CallId: ").Append(CallId).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  RecordingId: ").Append(RecordingId).Append("\n");
            sb.Append("  RecordingUrl: ").Append(RecordingUrl).Append("\n");
            sb.Append("  RecordingSize: ").Append(RecordingSize).Append("\n");
            sb.Append("  RecordingFormat: ").Append(RecordingFormat).Append("\n");
            sb.Append("  RecordingDurationMs: ").Append(RecordingDurationMs).Append("\n");
            sb.Append("  TermReason: ").Append(TermReason).Append("\n");
            sb.Append("  RecordTermReason: ").Append(RecordTermReason).Append("\n");
            sb.Append("  Digit: ").Append(Digit).Append("\n");
            sb.Append("  PrivacyForLogging: ").Append(PrivacyForLogging).Append("\n");
            sb.Append("  PrivacyForRecording: ").Append(PrivacyForRecording).Append("\n");
            sb.Append("  BargeInReason: ").Append(BargeInReason).Append("\n");
            sb.Append("  BargedInPromptNo: ").Append(BargedInPromptNo).Append("\n");
            sb.Append("  BargedInPromptMs: ").Append(BargedInPromptMs).Append("\n");
            sb.Append("  BargedInPromptLoopNo: ").Append(BargedInPromptLoopNo).Append("\n");
            sb.Append("  BargeInTimeMs: ").Append(BargeInTimeMs).Append("\n");
            sb.Append("  Transcript: ").Append(Transcript).Append("\n");
            sb.Append("  TranscribeReason: ").Append(TranscribeReason).Append("\n");
            sb.Append("  TranscriptionDurationMs: ").Append(TranscriptionDurationMs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented
            );
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the TranscribeWebhook instance.
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public override IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            props.Add("requestType", RequestType);
            props.Add("accountId", AccountId);
            props.Add("callId", CallId);
            props.Add("from", From);
            props.Add("to", To);
            props.Add("recordingId", RecordingId);
            props.Add("recordingUrl", RecordingUrl);
            props.Add("recordingSize", RecordingSize);
            props.Add("recordingFormat", RecordingFormat);
            props.Add("recordingDurationMs", RecordingDurationMs);
            props.Add("termReason", TermReason);
            props.Add("recordTermReason", RecordTermReason);
            props.Add("digit", Digit);
            props.Add("privacyForLogging", PrivacyForLogging);
            props.Add("privacyForRecording", PrivacyForRecording);
            props.Add("bargeInReason", BargeInReason);
            props.Add("bargedInPromptNo", BargedInPromptNo);
            props.Add("bargedInPromptMs", BargedInPromptMs);
            props.Add("bargedInPromptLoopNo", BargedInPromptLoopNo);
            props.Add("bargeInTimeMs", BargeInTimeMs);
            props.Add("transcript", Transcript);
            props.Add("transcribeReason", TranscribeReason);
            props.Add("transcriptionDurationMs", TranscriptionDurationMs);
            return props;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }
}
