/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using JsonSubTypes;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// An outbound SMS has changed status and the notificationUrl from the Sms command or Send an SMS request is being invoked. A PerCL response will be ignored.
    /// </summary>
    [DataContract(Name = "MessageStatusWebhook")]
    [JsonConverter(typeof(JsonSubtypes), "RequestType")]
    public partial class MessageStatusWebhook : Webhook, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public MessageStatus? Status { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageStatusWebhook" /> class.
        /// </summary>
        /// <param name="requestType">Value will be messageStatus - An outbound SMS has changed status and the Sms command&#39;s notificationUrl is being invoked. (default to &quot;MessageStatusWebhook&quot;).</param>
        /// <param name="accountId">Account ID associated with your account..</param>
        /// <param name="messageId">Unique ID for this message, generated by FreeClimb..</param>
        /// <param name="callId">Unique ID for the Call in the context of which the Sms PerCL command was issued..</param>
        /// <param name="from">aPhone number used to initiate the SMS message (in E.164 format)..</param>
        /// <param name="to">Destination number of the SMS message (in E.164 format)..</param>
        /// <param name="text">Body of the SMS message..</param>
        /// <param name="direction">Value will be outbound to indicate an outgoing SMS from FreeClimb..</param>
        /// <param name="applicationId">ID of the application to which the destination number is assigned. May be null if the originating number is invalid in some way or is not registered to an application..</param>
        /// <param name="status">status.</param>
        /// <param name="phoneNumberId">ID of the destination phone number..</param>
        public MessageStatusWebhook(
            string requestType = @"MessageStatusWebhook",
            string accountId = default(string),
            string messageId = default(string),
            string callId = default(string),
            string from = default(string),
            string to = default(string),
            string text = default(string),
            string direction = default(string),
            string applicationId = default(string),
            MessageStatus? status = default(MessageStatus?),
            string phoneNumberId = default(string)
        )
            : base()
        {
            base.RequestType = requestType;

            this.AccountId = accountId;

            this.MessageId = messageId;

            this.CallId = callId;

            this.From = from;

            this.To = to;

            this.Text = text;

            this.Direction = direction;

            this.ApplicationId = applicationId;

            this.Status = status;

            this.PhoneNumberId = phoneNumberId;
        }

        private static readonly JsonSerializerSettings _serializerSettings =
            new JsonSerializerSettings
            {
                // OpenAPI generated types generally hide default constructors.
                ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,
                ContractResolver = new DefaultContractResolver
                {
                    NamingStrategy = new CamelCaseNamingStrategy { OverrideSpecifiedNames = false },
                },
            };

        /// <summary>
        /// Deserializes json payload into instance MessageStatusWebhook
        /// </summary>
        /// <param name="jsonPayload"></param>
        /// <returns>instanceof RemoveFromQueueNotificationWebhook</returns>
        public static MessageStatusWebhook Deserialize(string jsonPayload)
        {
            return (MessageStatusWebhook)
                JsonConvert.DeserializeObject(
                    jsonPayload,
                    typeof(MessageStatusWebhook),
                    _serializerSettings
                );
        }

        /// <summary>
        /// Account ID associated with your account.
        /// </summary>
        /// <value>Account ID associated with your account.</value>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Unique ID for this message, generated by FreeClimb.
        /// </summary>
        /// <value>Unique ID for this message, generated by FreeClimb.</value>
        [DataMember(Name = "messageId", EmitDefaultValue = false)]
        public string MessageId { get; set; }

        /// <summary>
        /// Unique ID for the Call in the context of which the Sms PerCL command was issued.
        /// </summary>
        /// <value>Unique ID for the Call in the context of which the Sms PerCL command was issued.</value>
        [DataMember(Name = "callId", EmitDefaultValue = false)]
        public string CallId { get; set; }

        /// <summary>
        /// aPhone number used to initiate the SMS message (in E.164 format).
        /// </summary>
        /// <value>aPhone number used to initiate the SMS message (in E.164 format).</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public string From { get; set; }

        /// <summary>
        /// Destination number of the SMS message (in E.164 format).
        /// </summary>
        /// <value>Destination number of the SMS message (in E.164 format).</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        /// Body of the SMS message.
        /// </summary>
        /// <value>Body of the SMS message.</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Value will be outbound to indicate an outgoing SMS from FreeClimb.
        /// </summary>
        /// <value>Value will be outbound to indicate an outgoing SMS from FreeClimb.</value>
        [DataMember(Name = "direction", EmitDefaultValue = false)]
        public string Direction { get; set; }

        /// <summary>
        /// ID of the application to which the destination number is assigned. May be null if the originating number is invalid in some way or is not registered to an application.
        /// </summary>
        /// <value>ID of the application to which the destination number is assigned. May be null if the originating number is invalid in some way or is not registered to an application.</value>
        [DataMember(Name = "applicationId", EmitDefaultValue = false)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// ID of the destination phone number.
        /// </summary>
        /// <value>ID of the destination phone number.</value>
        [DataMember(Name = "phoneNumberId", EmitDefaultValue = false)]
        public string PhoneNumberId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MessageStatusWebhook {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  RequestType: ").Append(RequestType).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  CallId: ").Append(CallId).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PhoneNumberId: ").Append(PhoneNumberId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented,
                new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }
            );
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the MessageStatusWebhook instance.
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public override IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            props.Add("requestType", RequestType);
            props.Add("accountId", AccountId);
            props.Add("messageId", MessageId);
            props.Add("callId", CallId);
            props.Add("from", From);
            props.Add("to", To);
            props.Add("text", Text);
            props.Add("direction", Direction);
            props.Add("applicationId", ApplicationId);
            props.Add("status", Status);
            props.Add("phoneNumberId", PhoneNumberId);
            return props;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }
}
