/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// SmsAllOf
    /// </summary>
    [DataContract(Name = "Sms_allOf")]
    public partial class SmsAllOf : IEquatable<SmsAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SmsAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SmsAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SmsAllOf" /> class.
        /// </summary>
        /// <param name="to">E.164 representation of the phone number to which the message will be sent. Must be within FreeClimb&#39;s service area and E.164 formatting (e.g., +18003608245). (required).</param>
        /// <param name="from">E.164 representation of the phone number to use as the sender. This must be an incoming phone number you have purchased from FreeClimb. (required).</param>
        /// <param name="text">Text contained in the message (maximum 160 characters). (required).</param>
        /// <param name="notificationUrl">When the message changes status, this URL will be invoked using HTTP POST with the messageStatus parameters. This is a notification only; any PerCL returned will be ignored..</param>
        public SmsAllOf(string to = default(string), string from = default(string), string text = default(string), string notificationUrl = default(string))
        {
            // to ensure "to" is required (not null)
            if (to == null) {
                throw new ArgumentNullException("to is a required property for SmsAllOf and cannot be null");
            }
            this.To = to;
            // to ensure "from" is required (not null)
            if (from == null) {
                throw new ArgumentNullException("from is a required property for SmsAllOf and cannot be null");
            }
            this.From = from;
            // to ensure "text" is required (not null)
            if (text == null) {
                throw new ArgumentNullException("text is a required property for SmsAllOf and cannot be null");
            }
            this.Text = text;
            this.NotificationUrl = notificationUrl;
        }

        /// <summary>
        /// E.164 representation of the phone number to which the message will be sent. Must be within FreeClimb&#39;s service area and E.164 formatting (e.g., +18003608245).
        /// </summary>
        /// <value>E.164 representation of the phone number to which the message will be sent. Must be within FreeClimb&#39;s service area and E.164 formatting (e.g., +18003608245).</value>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        /// E.164 representation of the phone number to use as the sender. This must be an incoming phone number you have purchased from FreeClimb.
        /// </summary>
        /// <value>E.164 representation of the phone number to use as the sender. This must be an incoming phone number you have purchased from FreeClimb.</value>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = false)]
        public string From { get; set; }

        /// <summary>
        /// Text contained in the message (maximum 160 characters).
        /// </summary>
        /// <value>Text contained in the message (maximum 160 characters).</value>
        [DataMember(Name = "text", IsRequired = true, EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// When the message changes status, this URL will be invoked using HTTP POST with the messageStatus parameters. This is a notification only; any PerCL returned will be ignored.
        /// </summary>
        /// <value>When the message changes status, this URL will be invoked using HTTP POST with the messageStatus parameters. This is a notification only; any PerCL returned will be ignored.</value>
        [DataMember(Name = "notificationUrl", EmitDefaultValue = false)]
        public string NotificationUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SmsAllOf {\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  NotificationUrl: ").Append(NotificationUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the SmsAllOf instance. 
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public virtual IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            props.Add("to", To);          
            props.Add("from", From);          
            props.Add("text", Text);          
            props.Add("notificationUrl", NotificationUrl);          
            return props;
        }
        
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SmsAllOf);
        }

        /// <summary>
        /// Returns true if SmsAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.NotificationUrl == input.NotificationUrl ||
                    (this.NotificationUrl != null &&
                    this.NotificationUrl.Equals(input.NotificationUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                if (this.From != null)
                {
                    hashCode = (hashCode * 59) + this.From.GetHashCode();
                }
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                if (this.NotificationUrl != null)
                {
                    hashCode = (hashCode * 59) + this.NotificationUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
