/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// QueueResultAllOf
    /// </summary>
    [DataContract(Name = "QueueResult_allOf")]
    public partial class QueueResultAllOf : IEquatable<QueueResultAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueueResultAllOf" /> class.
        /// </summary>
        /// <param name="accountId">ID of the account that created this Queue..</param>
        /// <param name="queueId">A string that uniquely identifies this Queue resource..</param>
        /// <param name="alias">A description for this Queue..</param>
        /// <param name="maxSize">The maximum number of Calls permitted in the Queue. Default is 100. Maximum is 1000..</param>
        /// <param name="currentSize">Count of Calls currently in the Queue..</param>
        /// <param name="averageQueueRemovalTime">The average amount of time (in seconds) for a call to be removed from the queue..</param>
        /// <param name="subresourceUris">List of subresources for this Queue (which includes Queue members)..</param>
        public QueueResultAllOf(string accountId = default(string), string queueId = default(string), string alias = default(string), int? maxSize = default(int?), int? currentSize = default(int?), int? averageQueueRemovalTime = default(int?), Object subresourceUris = default(Object))
        {
            this.AccountId = accountId;
            this.QueueId = queueId;
            this.Alias = alias;
            this.MaxSize = maxSize;
            this.CurrentSize = currentSize;
            this.AverageQueueRemovalTime = averageQueueRemovalTime;
            this.SubresourceUris = subresourceUris;
        }

        /// <summary>
        /// ID of the account that created this Queue.
        /// </summary>
        /// <value>ID of the account that created this Queue.</value>
        [DataMember(Name = "accountId", EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// A string that uniquely identifies this Queue resource.
        /// </summary>
        /// <value>A string that uniquely identifies this Queue resource.</value>
        [DataMember(Name = "queueId", EmitDefaultValue = true)]
        public string QueueId { get; set; }

        /// <summary>
        /// A description for this Queue.
        /// </summary>
        /// <value>A description for this Queue.</value>
        [DataMember(Name = "alias", EmitDefaultValue = true)]
        public string Alias { get; set; }

        /// <summary>
        /// The maximum number of Calls permitted in the Queue. Default is 100. Maximum is 1000.
        /// </summary>
        /// <value>The maximum number of Calls permitted in the Queue. Default is 100. Maximum is 1000.</value>
        [DataMember(Name = "maxSize", EmitDefaultValue = true)]
        public int? MaxSize { get; set; }

        /// <summary>
        /// Count of Calls currently in the Queue.
        /// </summary>
        /// <value>Count of Calls currently in the Queue.</value>
        [DataMember(Name = "currentSize", EmitDefaultValue = true)]
        public int? CurrentSize { get; set; }

        /// <summary>
        /// The average amount of time (in seconds) for a call to be removed from the queue.
        /// </summary>
        /// <value>The average amount of time (in seconds) for a call to be removed from the queue.</value>
        [DataMember(Name = "averageQueueRemovalTime", EmitDefaultValue = true)]
        public int? AverageQueueRemovalTime { get; set; }

        /// <summary>
        /// List of subresources for this Queue (which includes Queue members).
        /// </summary>
        /// <value>List of subresources for this Queue (which includes Queue members).</value>
        [DataMember(Name = "subresourceUris", EmitDefaultValue = true)]
        public Object SubresourceUris { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueueResultAllOf {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  QueueId: ").Append(QueueId).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  MaxSize: ").Append(MaxSize).Append("\n");
            sb.Append("  CurrentSize: ").Append(CurrentSize).Append("\n");
            sb.Append("  AverageQueueRemovalTime: ").Append(AverageQueueRemovalTime).Append("\n");
            sb.Append("  SubresourceUris: ").Append(SubresourceUris).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the QueueResultAllOf instance. 
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public virtual IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            props.Add("accountId", AccountId);          
            props.Add("queueId", QueueId);          
            props.Add("alias", Alias);          
            props.Add("maxSize", MaxSize);          
            props.Add("currentSize", CurrentSize);          
            props.Add("averageQueueRemovalTime", AverageQueueRemovalTime);          
            props.Add("subresourceUris", SubresourceUris);          
            return props;
        }
        
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueueResultAllOf);
        }

        /// <summary>
        /// Returns true if QueueResultAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of QueueResultAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueueResultAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.QueueId == input.QueueId ||
                    (this.QueueId != null &&
                    this.QueueId.Equals(input.QueueId))
                ) && 
                (
                    this.Alias == input.Alias ||
                    (this.Alias != null &&
                    this.Alias.Equals(input.Alias))
                ) && 
                (
                    this.MaxSize == input.MaxSize ||
                    (this.MaxSize != null &&
                    this.MaxSize.Equals(input.MaxSize))
                ) && 
                (
                    this.CurrentSize == input.CurrentSize ||
                    (this.CurrentSize != null &&
                    this.CurrentSize.Equals(input.CurrentSize))
                ) && 
                (
                    this.AverageQueueRemovalTime == input.AverageQueueRemovalTime ||
                    (this.AverageQueueRemovalTime != null &&
                    this.AverageQueueRemovalTime.Equals(input.AverageQueueRemovalTime))
                ) && 
                (
                    this.SubresourceUris == input.SubresourceUris ||
                    (this.SubresourceUris != null &&
                    this.SubresourceUris.Equals(input.SubresourceUris))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.QueueId != null)
                {
                    hashCode = (hashCode * 59) + this.QueueId.GetHashCode();
                }
                if (this.Alias != null)
                {
                    hashCode = (hashCode * 59) + this.Alias.GetHashCode();
                }
                if (this.MaxSize != null)
                {
                    hashCode = (hashCode * 59) + this.MaxSize.GetHashCode();
                }
                if (this.CurrentSize != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentSize.GetHashCode();
                }
                if (this.AverageQueueRemovalTime != null)
                {
                    hashCode = (hashCode * 59) + this.AverageQueueRemovalTime.GetHashCode();
                }
                if (this.SubresourceUris != null)
                {
                    hashCode = (hashCode * 59) + this.SubresourceUris.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
