/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// LogResult
    /// </summary>
    [DataContract(Name = "LogResult")]
    public partial class LogResult : IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name = "level", EmitDefaultValue = true)]
        public LogLevel? Level { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogResult" /> class.
        /// </summary>
        /// <param name="timestamp">Time that the log was generated. The time is represented as microseconds since the Unix Epoch..</param>
        /// <param name="level">level.</param>
        /// <param name="requestId">ID of the request associated with the log. The requestId is propagated across all logs generated by FreeClimb when processing a request..</param>
        /// <param name="accountId">ID of the account that this log was generated under..</param>
        /// <param name="callId">ID of the Call associated with the log. Can be set to null if the log was generated without regard to a specific Call..</param>
        /// <param name="message">A simple string describing the event being logged..</param>
        /// <param name="metadata">JSON document containing metadata about the event. Some log messages may include request and response header content in this field..</param>
        public LogResult(
            int? timestamp = default(int?),
            LogLevel? level = default(LogLevel?),
            string requestId = default(string),
            string accountId = default(string),
            string callId = default(string),
            string message = default(string),
            Object metadata = default(Object)
        )
        {
            this.Timestamp = timestamp;

            this.Level = level;

            this.RequestId = requestId;

            this.AccountId = accountId;

            this.CallId = callId;

            this.Message = message;

            this.Metadata = metadata;
        }

        /// <summary>
        /// Time that the log was generated. The time is represented as microseconds since the Unix Epoch.
        /// </summary>
        /// <value>Time that the log was generated. The time is represented as microseconds since the Unix Epoch.</value>
        [DataMember(Name = "timestamp", EmitDefaultValue = true)]
        public int? Timestamp { get; set; }

        /// <summary>
        /// ID of the request associated with the log. The requestId is propagated across all logs generated by FreeClimb when processing a request.
        /// </summary>
        /// <value>ID of the request associated with the log. The requestId is propagated across all logs generated by FreeClimb when processing a request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = true)]
        public string RequestId { get; set; }

        /// <summary>
        /// ID of the account that this log was generated under.
        /// </summary>
        /// <value>ID of the account that this log was generated under.</value>
        [DataMember(Name = "accountId", EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// ID of the Call associated with the log. Can be set to null if the log was generated without regard to a specific Call.
        /// </summary>
        /// <value>ID of the Call associated with the log. Can be set to null if the log was generated without regard to a specific Call.</value>
        [DataMember(Name = "callId", EmitDefaultValue = true)]
        public string CallId { get; set; }

        /// <summary>
        /// A simple string describing the event being logged.
        /// </summary>
        /// <value>A simple string describing the event being logged.</value>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// JSON document containing metadata about the event. Some log messages may include request and response header content in this field.
        /// </summary>
        /// <value>JSON document containing metadata about the event. Some log messages may include request and response header content in this field.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogResult {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  CallId: ").Append(CallId).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented,
                new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }
            );
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the LogResult instance.
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public virtual IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            AddToDictionary(props, "timestamp", Timestamp);
            AddToDictionary(props, "level", Level);
            AddToDictionary(props, "requestId", RequestId);
            AddToDictionary(props, "accountId", AccountId);
            AddToDictionary(props, "callId", CallId);
            AddToDictionary(props, "message", Message);
            AddToDictionary(props, "metadata", Metadata);
            return props;
        }

        private IDictionary<string, object> AddToDictionary(
            IDictionary<string, object> dict,
            string key,
            object value
        )
        {
            if (value != null)
            {
                dict.Add(key, value);
            }
            return dict;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            yield break;
        }
    }
}
