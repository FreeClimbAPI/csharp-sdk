/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// AvailableNumber
    /// </summary>
    [DataContract(Name = "AvailableNumber")]
    public partial class AvailableNumber : IEquatable<AvailableNumber>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailableNumber" /> class.
        /// </summary>
        /// <param name="capabilities">capabilities.</param>
        /// <param name="campaignId">The campaign ID generated by the campaign registry.</param>
        /// <param name="phoneNumber">The phone number, in E.164 format (+ country code and phone number: +18003608245)..</param>
        /// <param name="voiceEnabled">Typically set to true for all numbers..</param>
        /// <param name="smsEnabled">Indicates whether the phone number can send and receive SMS messages..</param>
        /// <param name="region">The state or province of this phone number..</param>
        /// <param name="country">The country of this phone number..</param>
        public AvailableNumber(Capabilities capabilities = default(Capabilities), string campaignId = default(string), string phoneNumber = default(string), bool? voiceEnabled = default(bool?), bool? smsEnabled = default(bool?), string region = default(string), string country = default(string))
        {
            this.Capabilities = capabilities;
            this.CampaignId = campaignId;
            this.PhoneNumber = phoneNumber;
            this.VoiceEnabled = voiceEnabled;
            this.SmsEnabled = smsEnabled;
            this.Region = region;
            this.Country = country;
        }

        /// <summary>
        /// Gets or Sets Capabilities
        /// </summary>
        [DataMember(Name = "capabilities", EmitDefaultValue = false)]
        public Capabilities Capabilities { get; set; }

        /// <summary>
        /// The campaign ID generated by the campaign registry
        /// </summary>
        /// <value>The campaign ID generated by the campaign registry</value>
        [DataMember(Name = "campaignId", EmitDefaultValue = true)]
        public string CampaignId { get; set; }

        /// <summary>
        /// The phone number, in E.164 format (+ country code and phone number: +18003608245).
        /// </summary>
        /// <value>The phone number, in E.164 format (+ country code and phone number: +18003608245).</value>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = true)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Typically set to true for all numbers.
        /// </summary>
        /// <value>Typically set to true for all numbers.</value>
        [DataMember(Name = "voiceEnabled", EmitDefaultValue = true)]
        [Obsolete]
        public bool? VoiceEnabled { get; set; }

        /// <summary>
        /// Indicates whether the phone number can send and receive SMS messages.
        /// </summary>
        /// <value>Indicates whether the phone number can send and receive SMS messages.</value>
        [DataMember(Name = "smsEnabled", EmitDefaultValue = true)]
        [Obsolete]
        public bool? SmsEnabled { get; set; }

        /// <summary>
        /// The state or province of this phone number.
        /// </summary>
        /// <value>The state or province of this phone number.</value>
        [DataMember(Name = "region", EmitDefaultValue = true)]
        public string Region { get; set; }

        /// <summary>
        /// The country of this phone number.
        /// </summary>
        /// <value>The country of this phone number.</value>
        [DataMember(Name = "country", EmitDefaultValue = true)]
        public string Country { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AvailableNumber {\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  VoiceEnabled: ").Append(VoiceEnabled).Append("\n");
            sb.Append("  SmsEnabled: ").Append(SmsEnabled).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the AvailableNumber instance. 
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public virtual IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            props.Add("capabilities", Capabilities);          
            props.Add("campaignId", CampaignId);          
            props.Add("phoneNumber", PhoneNumber);          
            props.Add("voiceEnabled", VoiceEnabled);          
            props.Add("smsEnabled", SmsEnabled);          
            props.Add("region", Region);          
            props.Add("country", Country);          
            return props;
        }
        
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AvailableNumber);
        }

        /// <summary>
        /// Returns true if AvailableNumber instances are equal
        /// </summary>
        /// <param name="input">Instance of AvailableNumber to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvailableNumber input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Capabilities == input.Capabilities ||
                    (this.Capabilities != null &&
                    this.Capabilities.Equals(input.Capabilities))
                ) && 
                (
                    this.CampaignId == input.CampaignId ||
                    (this.CampaignId != null &&
                    this.CampaignId.Equals(input.CampaignId))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.VoiceEnabled == input.VoiceEnabled ||
                    (this.VoiceEnabled != null &&
                    this.VoiceEnabled.Equals(input.VoiceEnabled))
                ) && 
                (
                    this.SmsEnabled == input.SmsEnabled ||
                    (this.SmsEnabled != null &&
                    this.SmsEnabled.Equals(input.SmsEnabled))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Capabilities != null)
                {
                    hashCode = (hashCode * 59) + this.Capabilities.GetHashCode();
                }
                if (this.CampaignId != null)
                {
                    hashCode = (hashCode * 59) + this.CampaignId.GetHashCode();
                }
                if (this.PhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNumber.GetHashCode();
                }
                if (this.VoiceEnabled != null)
                {
                    hashCode = (hashCode * 59) + this.VoiceEnabled.GetHashCode();
                }
                if (this.SmsEnabled != null)
                {
                    hashCode = (hashCode * 59) + this.SmsEnabled.GetHashCode();
                }
                if (this.Region != null)
                {
                    hashCode = (hashCode * 59) + this.Region.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
