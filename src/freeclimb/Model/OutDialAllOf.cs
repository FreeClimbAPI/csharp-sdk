/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// OutDialAllOf
    /// </summary>
    [DataContract(Name = "OutDial_allOf")]
    public partial class OutDialAllOf : IEquatable<OutDialAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutDialAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OutDialAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OutDialAllOf" /> class.
        /// </summary>
        /// <param name="actionUrl">URL to which FreeClimb sends an HTTP POST request.  (required).</param>
        /// <param name="callConnectUrl">URL to which FreeClimb makes an HTTP POST request informing the result of the OutDial. (required).</param>
        /// <param name="callingNumber">he caller ID to show to the called party when FreeClimb calls. This can be one of the following: The To or From number provided in the first Webhook to your webserver. Any phone number you have purchased from FreeClimb. (required).</param>
        /// <param name="destination">E.164 representation of the phone number to Call.  (required).</param>
        /// <param name="ifMachine">Specifies how FreeClimb should handle this OutDial if an answering machine answers the Call. Valid values: &#x60;redirect&#x60; invokes the ifMachineUrl for instructions. &#x60;hangup&#x60; hangs up the Call. The ifMachineUrl will not be invoked..</param>
        /// <param name="ifMachineUrl">When the &#x60;ifMachine&#x60; flag is set to &#x60;redirect&#x60;, this attribute specifies a URL to which FreeClimb makes a POST request when an answering machine or a fax machine is detected. This URL is required if the &#x60;ifMachine&#x60; flag is set to &#x60;redirect&#x60;. Otherwise, it should not be included..</param>
        /// <param name="sendDigits">DTMF tones to play to the outdialed Call. This is typically used to dial a number and then dial an extension..</param>
        /// <param name="statusCallbackUrl">When the outdialed Call leg terminates, FreeClimb sends a &#x60;callStatus&#x60; Webhook to the &#x60;statusCallbackUrl&#x60;. This is a notification only; any PerCL command returned is ignored..</param>
        /// <param name="timeout">Maximum time in seconds the &#x60;OutDial&#x60; command waits for the called party to answer the Call. When a timeout occurs, FreeClimb invokes the &#x60;callConnectUrl&#x60; Webhook to report that the out-dialed Call has ended with a status of &#x60;noAnswer&#x60;..</param>
        /// <param name="privacyMode">Parameter &#x60;privacyMode&#x60; will not log the &#x60;text&#x60; as required by PCI compliance..</param>
        public OutDialAllOf(string actionUrl = default(string), string callConnectUrl = default(string), decimal callingNumber = default(decimal), decimal destination = default(decimal), string ifMachine = default(string), string ifMachineUrl = default(string), string sendDigits = default(string), string statusCallbackUrl = default(string), int timeout = default(int), bool privacyMode = default(bool))
        {
            // to ensure "actionUrl" is required (not null)
            if (actionUrl == null) {
                throw new ArgumentNullException("actionUrl is a required property for OutDialAllOf and cannot be null");
            }
            this.ActionUrl = actionUrl;
            // to ensure "callConnectUrl" is required (not null)
            if (callConnectUrl == null) {
                throw new ArgumentNullException("callConnectUrl is a required property for OutDialAllOf and cannot be null");
            }
            this.CallConnectUrl = callConnectUrl;
            this.CallingNumber = callingNumber;
            this.Destination = destination;
            this.IfMachine = ifMachine;
            this.IfMachineUrl = ifMachineUrl;
            this.SendDigits = sendDigits;
            this.StatusCallbackUrl = statusCallbackUrl;
            this.Timeout = timeout;
            this.PrivacyMode = privacyMode;
        }

        /// <summary>
        /// URL to which FreeClimb sends an HTTP POST request. 
        /// </summary>
        /// <value>URL to which FreeClimb sends an HTTP POST request. </value>
        [DataMember(Name = "actionUrl", IsRequired = true, EmitDefaultValue = false)]
        public string ActionUrl { get; set; }

        /// <summary>
        /// URL to which FreeClimb makes an HTTP POST request informing the result of the OutDial.
        /// </summary>
        /// <value>URL to which FreeClimb makes an HTTP POST request informing the result of the OutDial.</value>
        [DataMember(Name = "callConnectUrl", IsRequired = true, EmitDefaultValue = false)]
        public string CallConnectUrl { get; set; }

        /// <summary>
        /// he caller ID to show to the called party when FreeClimb calls. This can be one of the following: The To or From number provided in the first Webhook to your webserver. Any phone number you have purchased from FreeClimb.
        /// </summary>
        /// <value>he caller ID to show to the called party when FreeClimb calls. This can be one of the following: The To or From number provided in the first Webhook to your webserver. Any phone number you have purchased from FreeClimb.</value>
        [DataMember(Name = "callingNumber", IsRequired = true, EmitDefaultValue = false)]
        public decimal CallingNumber { get; set; }

        /// <summary>
        /// E.164 representation of the phone number to Call. 
        /// </summary>
        /// <value>E.164 representation of the phone number to Call. </value>
        [DataMember(Name = "destination", IsRequired = true, EmitDefaultValue = false)]
        public decimal Destination { get; set; }

        /// <summary>
        /// Specifies how FreeClimb should handle this OutDial if an answering machine answers the Call. Valid values: &#x60;redirect&#x60; invokes the ifMachineUrl for instructions. &#x60;hangup&#x60; hangs up the Call. The ifMachineUrl will not be invoked.
        /// </summary>
        /// <value>Specifies how FreeClimb should handle this OutDial if an answering machine answers the Call. Valid values: &#x60;redirect&#x60; invokes the ifMachineUrl for instructions. &#x60;hangup&#x60; hangs up the Call. The ifMachineUrl will not be invoked.</value>
        [DataMember(Name = "ifMachine", EmitDefaultValue = false)]
        public string IfMachine { get; set; }

        /// <summary>
        /// When the &#x60;ifMachine&#x60; flag is set to &#x60;redirect&#x60;, this attribute specifies a URL to which FreeClimb makes a POST request when an answering machine or a fax machine is detected. This URL is required if the &#x60;ifMachine&#x60; flag is set to &#x60;redirect&#x60;. Otherwise, it should not be included.
        /// </summary>
        /// <value>When the &#x60;ifMachine&#x60; flag is set to &#x60;redirect&#x60;, this attribute specifies a URL to which FreeClimb makes a POST request when an answering machine or a fax machine is detected. This URL is required if the &#x60;ifMachine&#x60; flag is set to &#x60;redirect&#x60;. Otherwise, it should not be included.</value>
        [DataMember(Name = "ifMachineUrl", EmitDefaultValue = false)]
        public string IfMachineUrl { get; set; }

        /// <summary>
        /// DTMF tones to play to the outdialed Call. This is typically used to dial a number and then dial an extension.
        /// </summary>
        /// <value>DTMF tones to play to the outdialed Call. This is typically used to dial a number and then dial an extension.</value>
        [DataMember(Name = "sendDigits", EmitDefaultValue = false)]
        public string SendDigits { get; set; }

        /// <summary>
        /// When the outdialed Call leg terminates, FreeClimb sends a &#x60;callStatus&#x60; Webhook to the &#x60;statusCallbackUrl&#x60;. This is a notification only; any PerCL command returned is ignored.
        /// </summary>
        /// <value>When the outdialed Call leg terminates, FreeClimb sends a &#x60;callStatus&#x60; Webhook to the &#x60;statusCallbackUrl&#x60;. This is a notification only; any PerCL command returned is ignored.</value>
        [DataMember(Name = "statusCallbackUrl", EmitDefaultValue = false)]
        public string StatusCallbackUrl { get; set; }

        /// <summary>
        /// Maximum time in seconds the &#x60;OutDial&#x60; command waits for the called party to answer the Call. When a timeout occurs, FreeClimb invokes the &#x60;callConnectUrl&#x60; Webhook to report that the out-dialed Call has ended with a status of &#x60;noAnswer&#x60;.
        /// </summary>
        /// <value>Maximum time in seconds the &#x60;OutDial&#x60; command waits for the called party to answer the Call. When a timeout occurs, FreeClimb invokes the &#x60;callConnectUrl&#x60; Webhook to report that the out-dialed Call has ended with a status of &#x60;noAnswer&#x60;.</value>
        [DataMember(Name = "timeout", EmitDefaultValue = false)]
        public int Timeout { get; set; }

        /// <summary>
        /// Parameter &#x60;privacyMode&#x60; will not log the &#x60;text&#x60; as required by PCI compliance.
        /// </summary>
        /// <value>Parameter &#x60;privacyMode&#x60; will not log the &#x60;text&#x60; as required by PCI compliance.</value>
        [DataMember(Name = "privacyMode", EmitDefaultValue = true)]
        public bool PrivacyMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OutDialAllOf {\n");
            sb.Append("  ActionUrl: ").Append(ActionUrl).Append("\n");
            sb.Append("  CallConnectUrl: ").Append(CallConnectUrl).Append("\n");
            sb.Append("  CallingNumber: ").Append(CallingNumber).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  IfMachine: ").Append(IfMachine).Append("\n");
            sb.Append("  IfMachineUrl: ").Append(IfMachineUrl).Append("\n");
            sb.Append("  SendDigits: ").Append(SendDigits).Append("\n");
            sb.Append("  StatusCallbackUrl: ").Append(StatusCallbackUrl).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  PrivacyMode: ").Append(PrivacyMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the OutDialAllOf instance. 
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public virtual IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            props.Add("actionUrl", ActionUrl);          
            props.Add("callConnectUrl", CallConnectUrl);          
            props.Add("callingNumber", CallingNumber);          
            props.Add("destination", Destination);          
            props.Add("ifMachine", IfMachine);          
            props.Add("ifMachineUrl", IfMachineUrl);          
            props.Add("sendDigits", SendDigits);          
            props.Add("statusCallbackUrl", StatusCallbackUrl);          
            props.Add("timeout", Timeout);          
            props.Add("privacyMode", PrivacyMode);          
            return props;
        }
        
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OutDialAllOf);
        }

        /// <summary>
        /// Returns true if OutDialAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of OutDialAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutDialAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ActionUrl == input.ActionUrl ||
                    (this.ActionUrl != null &&
                    this.ActionUrl.Equals(input.ActionUrl))
                ) && 
                (
                    this.CallConnectUrl == input.CallConnectUrl ||
                    (this.CallConnectUrl != null &&
                    this.CallConnectUrl.Equals(input.CallConnectUrl))
                ) && 
                (
                    this.CallingNumber == input.CallingNumber ||
                    this.CallingNumber.Equals(input.CallingNumber)
                ) && 
                (
                    this.Destination == input.Destination ||
                    this.Destination.Equals(input.Destination)
                ) && 
                (
                    this.IfMachine == input.IfMachine ||
                    (this.IfMachine != null &&
                    this.IfMachine.Equals(input.IfMachine))
                ) && 
                (
                    this.IfMachineUrl == input.IfMachineUrl ||
                    (this.IfMachineUrl != null &&
                    this.IfMachineUrl.Equals(input.IfMachineUrl))
                ) && 
                (
                    this.SendDigits == input.SendDigits ||
                    (this.SendDigits != null &&
                    this.SendDigits.Equals(input.SendDigits))
                ) && 
                (
                    this.StatusCallbackUrl == input.StatusCallbackUrl ||
                    (this.StatusCallbackUrl != null &&
                    this.StatusCallbackUrl.Equals(input.StatusCallbackUrl))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    this.Timeout.Equals(input.Timeout)
                ) && 
                (
                    this.PrivacyMode == input.PrivacyMode ||
                    this.PrivacyMode.Equals(input.PrivacyMode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActionUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ActionUrl.GetHashCode();
                }
                if (this.CallConnectUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CallConnectUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CallingNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.Destination.GetHashCode();
                if (this.IfMachine != null)
                {
                    hashCode = (hashCode * 59) + this.IfMachine.GetHashCode();
                }
                if (this.IfMachineUrl != null)
                {
                    hashCode = (hashCode * 59) + this.IfMachineUrl.GetHashCode();
                }
                if (this.SendDigits != null)
                {
                    hashCode = (hashCode * 59) + this.SendDigits.GetHashCode();
                }
                if (this.StatusCallbackUrl != null)
                {
                    hashCode = (hashCode * 59) + this.StatusCallbackUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Timeout.GetHashCode();
                hashCode = (hashCode * 59) + this.PrivacyMode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
