/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// ExportResult
    /// </summary>
    [DataContract(Name = "ExportResult")]
    public partial class ExportResult : IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public ExportStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets ResourceType
        /// </summary>
        [DataMember(Name = "resourceType", IsRequired = true, EmitDefaultValue = true)]
        public ExportResourceType ResourceType { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExportResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExportResult() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExportResult" /> class.
        /// </summary>
        /// <param name="accountId">String that uniquely identifies this account resource. (required).</param>
        /// <param name="uri">uri (required).</param>
        /// <param name="dateCreated">dateCreated (required).</param>
        /// <param name="dateUpdated">dateUpdated (required).</param>
        /// <param name="revision">revision (required).</param>
        /// <param name="exportId">String that uniquely identifies this export resource (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="size">size (required).</param>
        /// <param name="resourceType">resourceType (required).</param>
        /// <param name="query">Query params used to filter exported documents (required).</param>
        /// <param name="format">Desired fields of exported documents (required).</param>
        /// <param name="output">output (required).</param>
        public ExportResult(
            string accountId = default(string),
            string uri = default(string),
            string dateCreated = default(string),
            string dateUpdated = default(string),
            int revision = default(int),
            string exportId = default(string),
            ExportStatus status = default(ExportStatus),
            int size = default(int),
            ExportResourceType resourceType = default(ExportResourceType),
            Object query = default(Object),
            List<string> format = default(List<string>),
            ExportResultOutput output = default(ExportResultOutput)
        )
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new ArgumentNullException(
                    "accountId is a required property for ExportResult and cannot be null"
                );
            }
            this.AccountId = accountId;

            // to ensure "uri" is required (not null)
            if (uri == null)
            {
                throw new ArgumentNullException(
                    "uri is a required property for ExportResult and cannot be null"
                );
            }
            this.Uri = uri;

            // to ensure "dateCreated" is required (not null)
            if (dateCreated == null)
            {
                throw new ArgumentNullException(
                    "dateCreated is a required property for ExportResult and cannot be null"
                );
            }
            this.DateCreated = dateCreated;

            // to ensure "dateUpdated" is required (not null)
            if (dateUpdated == null)
            {
                throw new ArgumentNullException(
                    "dateUpdated is a required property for ExportResult and cannot be null"
                );
            }
            this.DateUpdated = dateUpdated;

            this.Revision = revision;

            // to ensure "exportId" is required (not null)
            if (exportId == null)
            {
                throw new ArgumentNullException(
                    "exportId is a required property for ExportResult and cannot be null"
                );
            }
            this.ExportId = exportId;

            this.Status = status;

            this.Size = size;

            this.ResourceType = resourceType;

            // to ensure "query" is required (not null)
            if (query == null)
            {
                throw new ArgumentNullException(
                    "query is a required property for ExportResult and cannot be null"
                );
            }
            this.Query = query;

            // to ensure "format" is required (not null)
            if (format == null)
            {
                throw new ArgumentNullException(
                    "format is a required property for ExportResult and cannot be null"
                );
            }
            this.Format = format;

            // to ensure "output" is required (not null)
            if (output == null)
            {
                throw new ArgumentNullException(
                    "output is a required property for ExportResult and cannot be null"
                );
            }
            this.Output = output;
        }

        /// <summary>
        /// String that uniquely identifies this account resource.
        /// </summary>
        /// <value>String that uniquely identifies this account resource.</value>
        [DataMember(Name = "accountId", IsRequired = true, EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets Uri
        /// </summary>
        [DataMember(Name = "uri", IsRequired = true, EmitDefaultValue = true)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets DateCreated
        /// </summary>
        [DataMember(Name = "dateCreated", IsRequired = true, EmitDefaultValue = true)]
        public string DateCreated { get; set; }

        /// <summary>
        /// Gets or Sets DateUpdated
        /// </summary>
        [DataMember(Name = "dateUpdated", IsRequired = true, EmitDefaultValue = true)]
        public string DateUpdated { get; set; }

        /// <summary>
        /// Gets or Sets Revision
        /// </summary>
        [DataMember(Name = "revision", IsRequired = true, EmitDefaultValue = true)]
        public int Revision { get; set; }

        /// <summary>
        /// String that uniquely identifies this export resource
        /// </summary>
        /// <value>String that uniquely identifies this export resource</value>
        [DataMember(Name = "exportId", IsRequired = true, EmitDefaultValue = true)]
        public string ExportId { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", IsRequired = true, EmitDefaultValue = true)]
        public int Size { get; set; }

        /// <summary>
        /// Query params used to filter exported documents
        /// </summary>
        /// <value>Query params used to filter exported documents</value>
        [DataMember(Name = "query", IsRequired = true, EmitDefaultValue = true)]
        public Object Query { get; set; }

        /// <summary>
        /// Desired fields of exported documents
        /// </summary>
        /// <value>Desired fields of exported documents</value>
        [DataMember(Name = "format", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Format { get; set; }

        /// <summary>
        /// Gets or Sets Output
        /// </summary>
        [DataMember(Name = "output", IsRequired = true, EmitDefaultValue = true)]
        public ExportResultOutput Output { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExportResult {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateUpdated: ").Append(DateUpdated).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  ExportId: ").Append(ExportId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Output: ").Append(Output).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented,
                new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }
            );
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the ExportResult instance.
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public virtual IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            AddToDictionary(props, "accountId", AccountId);
            AddToDictionary(props, "uri", Uri);
            AddToDictionary(props, "dateCreated", DateCreated);
            AddToDictionary(props, "dateUpdated", DateUpdated);
            AddToDictionary(props, "revision", Revision);
            AddToDictionary(props, "exportId", ExportId);
            AddToDictionary(props, "status", Status);
            AddToDictionary(props, "size", Size);
            AddToDictionary(props, "resourceType", ResourceType);
            AddToDictionary(props, "query", Query);
            List<object> nested = new List<object>();
            if (Format != null)
            {
                nested.Add(Format);
            }
            AddToDictionary(props, "format", nested);
            AddToDictionary(props, "output", Output);
            return props;
        }

        private IDictionary<string, object> AddToDictionary(
            IDictionary<string, object> dict,
            string key,
            object value
        )
        {
            if (value != null)
            {
                dict.Add(key, value);
            }
            return dict;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            // Revision (int) minimum
            if (this.Revision < (int)0)
            {
                yield return new ValidationResult(
                    "Invalid value for Revision, must be a value greater than or equal to 0.",
                    new[] { "Revision" }
                );
            }

            yield break;
        }
    }
}
