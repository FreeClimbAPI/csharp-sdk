/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// The &#x60;SayNeural&#x60; command provides Text-To-Speech (TTS) support using the freeclimb.neural TTS engine. It converts text to speech and then renders it in a female voice back to the caller. &#x60;SayNeural&#x60; is useful in cases where it&#39;s difficult to pre-record a prompt for any reason. &#x60;SayNeural&#x60; does not allow barge-in unless nested within a &#x60;GetSpeech&#x60; command. The file will always be played to completion unless nested.
    /// </summary>
    [DataContract(Name = "SayNeural")]
    public partial class SayNeural : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SayNeural" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SayNeural() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="SayNeural" /> class.
        /// </summary>
        /// <param name="text">The message to be played to the caller using TTS. The size of the string is limited to 4 KB (or 4,096 bytes). An empty string will cause the command to be skipped. (required).</param>
        /// <param name="loop">Number of times the text is said. Specifying &#39;0&#39; causes the &#x60;SayNeural&#x60; action to loop until the Call is hung up. (default to 1).</param>
        /// <param name="privacyMode">Parameter &#x60;privacyMode&#x60; will not log the &#x60;text&#x60; as required by PCI compliance. (default to false).</param>
        /// <param name="engine">engine (required).</param>
        public SayNeural(
            string text = default(string),
            int loop = 1,
            bool privacyMode = false,
            SayNeuralEngine engine = default(SayNeuralEngine)
        )
        {
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new ArgumentNullException(
                    "text is a required property for SayNeural and cannot be null"
                );
            }
            this.Text = text;

            // to ensure "engine" is required (not null)
            if (engine == null)
            {
                throw new ArgumentNullException(
                    "engine is a required property for SayNeural and cannot be null"
                );
            }
            this.Engine = engine;

            this.Loop = loop;

            this.PrivacyMode = privacyMode;
        }

        /// <summary>
        /// The message to be played to the caller using TTS. The size of the string is limited to 4 KB (or 4,096 bytes). An empty string will cause the command to be skipped.
        /// </summary>
        /// <value>The message to be played to the caller using TTS. The size of the string is limited to 4 KB (or 4,096 bytes). An empty string will cause the command to be skipped.</value>
        [DataMember(Name = "text", IsRequired = true, EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// Number of times the text is said. Specifying &#39;0&#39; causes the &#x60;SayNeural&#x60; action to loop until the Call is hung up.
        /// </summary>
        /// <value>Number of times the text is said. Specifying &#39;0&#39; causes the &#x60;SayNeural&#x60; action to loop until the Call is hung up.</value>
        [DataMember(Name = "loop", EmitDefaultValue = false)]
        public int Loop { get; set; }

        /// <summary>
        /// Parameter &#x60;privacyMode&#x60; will not log the &#x60;text&#x60; as required by PCI compliance.
        /// </summary>
        /// <value>Parameter &#x60;privacyMode&#x60; will not log the &#x60;text&#x60; as required by PCI compliance.</value>
        [DataMember(Name = "privacyMode", EmitDefaultValue = true)]
        public bool PrivacyMode { get; set; }

        /// <summary>
        /// Gets or Sets Engine
        /// </summary>
        [DataMember(Name = "engine", IsRequired = true, EmitDefaultValue = true)]
        public SayNeuralEngine Engine { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SayNeural {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Loop: ").Append(Loop).Append("\n");
            sb.Append("  PrivacyMode: ").Append(PrivacyMode).Append("\n");
            sb.Append("  Engine: ").Append(Engine).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented,
                new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }
            );
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the SayNeural instance.
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public virtual IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            AddToDictionary(props, "text", Text);
            AddToDictionary(props, "loop", Loop);
            AddToDictionary(props, "privacyMode", PrivacyMode);
            AddToDictionary(props, "engine", Engine);
            return props;
        }

        private IDictionary<string, object> AddToDictionary(
            IDictionary<string, object> dict,
            string key,
            object value
        )
        {
            if (value != null)
            {
                dict.Add(key, value);
            }
            return dict;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            yield break;
        }
    }
}
