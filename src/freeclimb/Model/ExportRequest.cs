/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// ExportRequest
    /// </summary>
    [DataContract(Name = "ExportRequest")]
    public partial class ExportRequest : IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ResourceType
        /// </summary>
        [DataMember(Name = "resourceType", IsRequired = true, EmitDefaultValue = true)]
        public ExportResourceType ResourceType { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExportRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExportRequest() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExportRequest" /> class.
        /// </summary>
        /// <param name="resourceType">resourceType (required).</param>
        /// <param name="format">format.</param>
        /// <param name="output">output (required).</param>
        /// <param name="query">query.</param>
        public ExportRequest(
            ExportResourceType resourceType = default(ExportResourceType),
            List<string> format = default(List<string>),
            ExportRequestOutput output = default(ExportRequestOutput),
            Object query = default(Object)
        )
        {
            this.ResourceType = resourceType;

            // to ensure "output" is required (not null)
            if (output == null)
            {
                throw new ArgumentNullException(
                    "output is a required property for ExportRequest and cannot be null"
                );
            }
            this.Output = output;

            this.Format = format;

            this.Query = query;
        }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name = "format", EmitDefaultValue = false)]
        public List<string> Format { get; set; }

        /// <summary>
        /// Gets or Sets Output
        /// </summary>
        [DataMember(Name = "output", IsRequired = true, EmitDefaultValue = true)]
        public ExportRequestOutput Output { get; set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name = "query", EmitDefaultValue = false)]
        public Object Query { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExportRequest {\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Output: ").Append(Output).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented,
                new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }
            );
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the ExportRequest instance.
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public virtual IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            AddToDictionary(props, "resourceType", ResourceType);
            List<object> nested = new List<object>();
            if (Format != null)
            {
                nested.Add(Format);
            }
            AddToDictionary(props, "format", nested);
            AddToDictionary(props, "output", Output);
            AddToDictionary(props, "query", Query);
            return props;
        }

        private IDictionary<string, object> AddToDictionary(
            IDictionary<string, object> dict,
            string key,
            object value
        )
        {
            if (value != null)
            {
                dict.Add(key, value);
            }
            return dict;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            yield break;
        }
    }
}
