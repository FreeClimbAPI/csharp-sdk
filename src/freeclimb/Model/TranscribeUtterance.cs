/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using JsonSubTypes;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// The &#x60;TranscribeUtterance&#x60; command transcribes the callerâ€™s voice and returns transcription of the audio and optionally returns the recording of the audio transcribed.  &#x60;TranscribeUtterance&#x60; is blocking and is a terminal command. As such, the actionUrl property is required, and control of the Call picks up using the &#x60;PerCL&#x60; returned in response of the &#x60;actionUrl&#x60;. Recording and Transcription information is returned in the actionUrl request. If the reason this command ended was due to the call hanging up, any PerCL returned will not execute.
    /// </summary>
    [DataContract(Name = "TranscribeUtterance")]
    [JsonConverter(typeof(JsonSubtypes), "Command")]
    public partial class TranscribeUtterance : PerclCommand, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TranscribeUtterance" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TranscribeUtterance() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="TranscribeUtterance" /> class.
        /// </summary>
        /// <param name="actionUrl">actionUrl (required).</param>
        /// <param name="playBeep">playBeep (default to false).</param>
        /// <param name="record">record.</param>
        /// <param name="privacyForLogging">privacyForLogging (default to false).</param>
        /// <param name="privacyForRecording">privacyForRecording (default to false).</param>
        /// <param name="prompts">prompts.</param>
        /// <param name="command">Name of PerCL Command (this is automatically derived from mapping configuration and should not be manually supplied in any arguments) (default to &quot;TranscribeUtterance&quot;).</param>
        public TranscribeUtterance(
            string actionUrl = default(string),
            bool playBeep = false,
            TranscribeUtteranceRecord record = default(TranscribeUtteranceRecord),
            bool privacyForLogging = false,
            bool privacyForRecording = false,
            List<PerclCommand> prompts = default(List<PerclCommand>),
            string command = @"TranscribeUtterance"
        )
            : base(command)
        {
            // to ensure "actionUrl" is required (not null)
            if (actionUrl == null)
            {
                throw new ArgumentNullException(
                    "actionUrl is a required property for TranscribeUtterance and cannot be null"
                );
            }
            this.ActionUrl = actionUrl;

            this.PlayBeep = playBeep;

            this.Record = record;

            this.PrivacyForLogging = privacyForLogging;

            this.PrivacyForRecording = privacyForRecording;

            this.Prompts = prompts;
        }

        /// <summary>
        /// Gets or Sets ActionUrl
        /// </summary>
        [DataMember(Name = "actionUrl", IsRequired = true, EmitDefaultValue = true)]
        public string ActionUrl { get; set; }

        /// <summary>
        /// Gets or Sets PlayBeep
        /// </summary>
        [DataMember(Name = "playBeep", EmitDefaultValue = true)]
        public bool PlayBeep { get; set; }

        /// <summary>
        /// Gets or Sets Record
        /// </summary>
        [DataMember(Name = "record", EmitDefaultValue = false)]
        public TranscribeUtteranceRecord Record { get; set; }

        /// <summary>
        /// Gets or Sets PrivacyForLogging
        /// </summary>
        [DataMember(Name = "privacyForLogging", EmitDefaultValue = true)]
        public bool PrivacyForLogging { get; set; }

        /// <summary>
        /// Gets or Sets PrivacyForRecording
        /// </summary>
        [DataMember(Name = "privacyForRecording", EmitDefaultValue = true)]
        public bool PrivacyForRecording { get; set; }

        /// <summary>
        /// Gets or Sets Prompts
        /// </summary>
        [DataMember(Name = "prompts", EmitDefaultValue = false)]
        public List<PerclCommand> Prompts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TranscribeUtterance {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ActionUrl: ").Append(ActionUrl).Append("\n");
            sb.Append("  PlayBeep: ").Append(PlayBeep).Append("\n");
            sb.Append("  Record: ").Append(Record).Append("\n");
            sb.Append("  PrivacyForLogging: ").Append(PrivacyForLogging).Append("\n");
            sb.Append("  PrivacyForRecording: ").Append(PrivacyForRecording).Append("\n");
            sb.Append("  Prompts: ").Append(Prompts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings
            {
                NullValueHandling = NullValueHandling.Ignore,
            };
            return JsonConvert.SerializeObject(ToKvp(), settings);
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the TranscribeUtterance instance.
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public override IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            AddToDictionary(props, "actionUrl", ActionUrl);
            AddToDictionary(props, "playBeep", PlayBeep);
            AddToDictionary(props, "record", Record);
            AddToDictionary(props, "privacyForLogging", PrivacyForLogging);
            AddToDictionary(props, "privacyForRecording", PrivacyForRecording);
            List<object> nestedPrompts = new List<object>();
            if (Prompts != null)
            {
                foreach (var item in Prompts)
                {
                    nestedPrompts.Add(item.ToKvp());
                }
            }
            AddToDictionary(props, "prompts", nestedPrompts);
            IDictionary<string, object> command = new Dictionary<string, object>();
            command.Add("TranscribeUtterance", props);
            return command;
        }

        private IDictionary<string, object> AddToDictionary(
            IDictionary<string, object> dict,
            string key,
            object value
        )
        {
            if (value != null)
            {
                dict.Add(key, value);
            }
            return dict;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }
}
