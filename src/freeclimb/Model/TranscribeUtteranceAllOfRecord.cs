/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;
using freeclimb.Enums;

namespace freeclimb.Model
{
    /// <summary>
    /// TranscribeUtteranceAllOfRecord
    /// </summary>
    [DataContract(Name = "TranscribeUtterance_allOf_record")]
    public partial class TranscribeUtteranceAllOfRecord : IEquatable<TranscribeUtteranceAllOfRecord>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TranscribeUtteranceAllOfRecord" /> class.
        /// </summary>
        /// <param name="saveRecording">saveRecording (default to false).</param>
        /// <param name="maxLengthSec">maxLengthSec (default to 60).</param>
        /// <param name="rcrdTerminationSilenceTimeMs">rcrdTerminationSilenceTimeMs.</param>
        public TranscribeUtteranceAllOfRecord(bool saveRecording = false, int maxLengthSec = 60, int rcrdTerminationSilenceTimeMs = default(int))
        {
            this.SaveRecording = saveRecording;
            this.MaxLengthSec = maxLengthSec;
            this.RcrdTerminationSilenceTimeMs = rcrdTerminationSilenceTimeMs;
        }

        /// <summary>
        /// Gets or Sets SaveRecording
        /// </summary>
        [DataMember(Name = "saveRecording", EmitDefaultValue = true)]
        public bool SaveRecording { get; set; }

        /// <summary>
        /// Gets or Sets MaxLengthSec
        /// </summary>
        [DataMember(Name = "maxLengthSec", EmitDefaultValue = false)]
        public int MaxLengthSec { get; set; }

        /// <summary>
        /// Gets or Sets RcrdTerminationSilenceTimeMs
        /// </summary>
        [DataMember(Name = "rcrdTerminationSilenceTimeMs", EmitDefaultValue = false)]
        public int RcrdTerminationSilenceTimeMs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TranscribeUtteranceAllOfRecord {\n");
            sb.Append("  SaveRecording: ").Append(SaveRecording).Append("\n");
            sb.Append("  MaxLengthSec: ").Append(MaxLengthSec).Append("\n");
            sb.Append("  RcrdTerminationSilenceTimeMs: ").Append(RcrdTerminationSilenceTimeMs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the TranscribeUtteranceAllOfRecord instance. 
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public virtual IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            props.Add("saveRecording", SaveRecording);          
            props.Add("maxLengthSec", MaxLengthSec);          
            props.Add("rcrdTerminationSilenceTimeMs", RcrdTerminationSilenceTimeMs);          
            return props;
        }
        
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TranscribeUtteranceAllOfRecord);
        }

        /// <summary>
        /// Returns true if TranscribeUtteranceAllOfRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of TranscribeUtteranceAllOfRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TranscribeUtteranceAllOfRecord input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SaveRecording == input.SaveRecording ||
                    this.SaveRecording.Equals(input.SaveRecording)
                ) && 
                (
                    this.MaxLengthSec == input.MaxLengthSec ||
                    this.MaxLengthSec.Equals(input.MaxLengthSec)
                ) && 
                (
                    this.RcrdTerminationSilenceTimeMs == input.RcrdTerminationSilenceTimeMs ||
                    this.RcrdTerminationSilenceTimeMs.Equals(input.RcrdTerminationSilenceTimeMs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SaveRecording.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxLengthSec.GetHashCode();
                hashCode = (hashCode * 59) + this.RcrdTerminationSilenceTimeMs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // MaxLengthSec (int) maximum
            if (this.MaxLengthSec > (int)60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxLengthSec, must be a value less than or equal to 60.", new [] { "MaxLengthSec" });
            }

            // MaxLengthSec (int) minimum
            if (this.MaxLengthSec < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxLengthSec, must be a value greater than or equal to 1.", new [] { "MaxLengthSec" });
            }

            // RcrdTerminationSilenceTimeMs (int) maximum
            if (this.RcrdTerminationSilenceTimeMs > (int)3000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RcrdTerminationSilenceTimeMs, must be a value less than or equal to 3000.", new [] { "RcrdTerminationSilenceTimeMs" });
            }

            // RcrdTerminationSilenceTimeMs (int) minimum
            if (this.RcrdTerminationSilenceTimeMs < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RcrdTerminationSilenceTimeMs, must be a value greater than or equal to 0.", new [] { "RcrdTerminationSilenceTimeMs" });
            }

            yield break;
        }
    }

}
