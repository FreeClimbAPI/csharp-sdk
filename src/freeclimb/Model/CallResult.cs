/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// CallResult
    /// </summary>
    [DataContract(Name = "CallResult")]
    public partial class CallResult : IValidatableObject
    {
        /// <summary>
        /// Gets or Sets CallStatus
        /// </summary>
        [DataMember(Name = "callStatus", EmitDefaultValue = true)]
        public CallStatus? CallStatus { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name = "direction", EmitDefaultValue = true)]
        public CallDirection? Direction { get; set; }

        /// <summary>
        /// Gets or Sets AnsweredBy
        /// </summary>
        [DataMember(Name = "answeredBy", EmitDefaultValue = true)]
        public AnsweredBy? AnsweredBy { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallResult" /> class.
        /// </summary>
        /// <param name="uri">The URI for this resource, relative to /apiserver..</param>
        /// <param name="dateCreated">The date that this resource was created (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT)..</param>
        /// <param name="dateUpdated">The date that this resource was last updated (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT)..</param>
        /// <param name="revision">Revision count for the resource. This count is set to 1 on creation and is incremented every time it is updated..</param>
        /// <param name="callId">String that uniquely identifies this Call resource..</param>
        /// <param name="parentCallId">ID of the Call that created this leg (child Call)..</param>
        /// <param name="accountId">ID of the account that owns this Call..</param>
        /// <param name="from">Phone number that initiated this Call..</param>
        /// <param name="to">Phone number that received this Call..</param>
        /// <param name="phoneNumberId">If the Call was inbound, this is the ID of the IncomingPhoneNumber that received the Call (DNIS). If the Call was outbound, this is the ID of the phone number from which the Call was placed (ANI)..</param>
        /// <param name="callStatus">callStatus.</param>
        /// <param name="startTime">Start time of the Call (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT). Empty if the Call has not yet been dialed..</param>
        /// <param name="connectTime">Time the Call was answered (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT). Empty if the Call has not yet been dialed..</param>
        /// <param name="endTime">End time of the Call (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT). Empty if the Call did not complete successfully..</param>
        /// <param name="duration">Total length of the Call in seconds. Measures time between startTime and endTime. This value is empty for busy, failed, unanswered or ongoing Calls..</param>
        /// <param name="connectDuration">Length of time that the Call was connected in seconds. Measures time between connectTime and endTime. This value is empty for busy, failed, unanswered or ongoing Calls..</param>
        /// <param name="direction">direction.</param>
        /// <param name="answeredBy">answeredBy.</param>
        /// <param name="subresourceUris">The list of subresources for this Call. These include things like logs and recordings associated with the Call..</param>
        /// <param name="applicationId">ApplicationId associated with the Call..</param>
        public CallResult(
            string uri = default(string),
            string dateCreated = default(string),
            string dateUpdated = default(string),
            int revision = default(int),
            string callId = default(string),
            string parentCallId = default(string),
            string accountId = default(string),
            string from = default(string),
            string to = default(string),
            string phoneNumberId = default(string),
            CallStatus? callStatus = default(CallStatus?),
            string startTime = default(string),
            string connectTime = default(string),
            string endTime = default(string),
            int? duration = default(int?),
            int? connectDuration = default(int?),
            CallDirection? direction = default(CallDirection?),
            AnsweredBy? answeredBy = default(AnsweredBy?),
            Object subresourceUris = default(Object),
            string applicationId = default(string)
        )
        {
            this.Uri = uri;

            this.DateCreated = dateCreated;

            this.DateUpdated = dateUpdated;

            this.Revision = revision;

            this.CallId = callId;

            this.ParentCallId = parentCallId;

            this.AccountId = accountId;

            this.From = from;

            this.To = to;

            this.PhoneNumberId = phoneNumberId;

            this.CallStatus = callStatus;

            this.StartTime = startTime;

            this.ConnectTime = connectTime;

            this.EndTime = endTime;

            this.Duration = duration;

            this.ConnectDuration = connectDuration;

            this.Direction = direction;

            this.AnsweredBy = answeredBy;

            this.SubresourceUris = subresourceUris;

            this.ApplicationId = applicationId;
        }

        /// <summary>
        /// The URI for this resource, relative to /apiserver.
        /// </summary>
        /// <value>The URI for this resource, relative to /apiserver.</value>
        [DataMember(Name = "uri", EmitDefaultValue = false)]
        public string Uri { get; set; }

        /// <summary>
        /// The date that this resource was created (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT).
        /// </summary>
        /// <value>The date that this resource was created (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT).</value>
        [DataMember(Name = "dateCreated", EmitDefaultValue = false)]
        public string DateCreated { get; set; }

        /// <summary>
        /// The date that this resource was last updated (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT).
        /// </summary>
        /// <value>The date that this resource was last updated (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT).</value>
        [DataMember(Name = "dateUpdated", EmitDefaultValue = false)]
        public string DateUpdated { get; set; }

        /// <summary>
        /// Revision count for the resource. This count is set to 1 on creation and is incremented every time it is updated.
        /// </summary>
        /// <value>Revision count for the resource. This count is set to 1 on creation and is incremented every time it is updated.</value>
        [DataMember(Name = "revision", EmitDefaultValue = false)]
        public int Revision { get; set; }

        /// <summary>
        /// String that uniquely identifies this Call resource.
        /// </summary>
        /// <value>String that uniquely identifies this Call resource.</value>
        [DataMember(Name = "callId", EmitDefaultValue = true)]
        public string CallId { get; set; }

        /// <summary>
        /// ID of the Call that created this leg (child Call).
        /// </summary>
        /// <value>ID of the Call that created this leg (child Call).</value>
        [DataMember(Name = "parentCallId", EmitDefaultValue = true)]
        public string ParentCallId { get; set; }

        /// <summary>
        /// ID of the account that owns this Call.
        /// </summary>
        /// <value>ID of the account that owns this Call.</value>
        [DataMember(Name = "accountId", EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// Phone number that initiated this Call.
        /// </summary>
        /// <value>Phone number that initiated this Call.</value>
        [DataMember(Name = "from", EmitDefaultValue = true)]
        public string From { get; set; }

        /// <summary>
        /// Phone number that received this Call.
        /// </summary>
        /// <value>Phone number that received this Call.</value>
        [DataMember(Name = "to", EmitDefaultValue = true)]
        public string To { get; set; }

        /// <summary>
        /// If the Call was inbound, this is the ID of the IncomingPhoneNumber that received the Call (DNIS). If the Call was outbound, this is the ID of the phone number from which the Call was placed (ANI).
        /// </summary>
        /// <value>If the Call was inbound, this is the ID of the IncomingPhoneNumber that received the Call (DNIS). If the Call was outbound, this is the ID of the phone number from which the Call was placed (ANI).</value>
        [DataMember(Name = "phoneNumberId", EmitDefaultValue = true)]
        public string PhoneNumberId { get; set; }

        /// <summary>
        /// Start time of the Call (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT). Empty if the Call has not yet been dialed.
        /// </summary>
        /// <value>Start time of the Call (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT). Empty if the Call has not yet been dialed.</value>
        [DataMember(Name = "startTime", EmitDefaultValue = true)]
        public string StartTime { get; set; }

        /// <summary>
        /// Time the Call was answered (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT). Empty if the Call has not yet been dialed.
        /// </summary>
        /// <value>Time the Call was answered (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT). Empty if the Call has not yet been dialed.</value>
        [DataMember(Name = "connectTime", EmitDefaultValue = true)]
        public string ConnectTime { get; set; }

        /// <summary>
        /// End time of the Call (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT). Empty if the Call did not complete successfully.
        /// </summary>
        /// <value>End time of the Call (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT). Empty if the Call did not complete successfully.</value>
        [DataMember(Name = "endTime", EmitDefaultValue = true)]
        public string EndTime { get; set; }

        /// <summary>
        /// Total length of the Call in seconds. Measures time between startTime and endTime. This value is empty for busy, failed, unanswered or ongoing Calls.
        /// </summary>
        /// <value>Total length of the Call in seconds. Measures time between startTime and endTime. This value is empty for busy, failed, unanswered or ongoing Calls.</value>
        [DataMember(Name = "duration", EmitDefaultValue = true)]
        public int? Duration { get; set; }

        /// <summary>
        /// Length of time that the Call was connected in seconds. Measures time between connectTime and endTime. This value is empty for busy, failed, unanswered or ongoing Calls.
        /// </summary>
        /// <value>Length of time that the Call was connected in seconds. Measures time between connectTime and endTime. This value is empty for busy, failed, unanswered or ongoing Calls.</value>
        [DataMember(Name = "connectDuration", EmitDefaultValue = true)]
        public int? ConnectDuration { get; set; }

        /// <summary>
        /// The list of subresources for this Call. These include things like logs and recordings associated with the Call.
        /// </summary>
        /// <value>The list of subresources for this Call. These include things like logs and recordings associated with the Call.</value>
        [DataMember(Name = "subresourceUris", EmitDefaultValue = true)]
        public Object SubresourceUris { get; set; }

        /// <summary>
        /// ApplicationId associated with the Call.
        /// </summary>
        /// <value>ApplicationId associated with the Call.</value>
        [DataMember(Name = "applicationId", EmitDefaultValue = true)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CallResult {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateUpdated: ").Append(DateUpdated).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  CallId: ").Append(CallId).Append("\n");
            sb.Append("  ParentCallId: ").Append(ParentCallId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  PhoneNumberId: ").Append(PhoneNumberId).Append("\n");
            sb.Append("  CallStatus: ").Append(CallStatus).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  ConnectTime: ").Append(ConnectTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  ConnectDuration: ").Append(ConnectDuration).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  AnsweredBy: ").Append(AnsweredBy).Append("\n");
            sb.Append("  SubresourceUris: ").Append(SubresourceUris).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented,
                new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }
            );
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the CallResult instance.
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public virtual IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            AddToDictionary(props, "uri", Uri);
            AddToDictionary(props, "dateCreated", DateCreated);
            AddToDictionary(props, "dateUpdated", DateUpdated);
            AddToDictionary(props, "revision", Revision);
            AddToDictionary(props, "callId", CallId);
            AddToDictionary(props, "parentCallId", ParentCallId);
            AddToDictionary(props, "accountId", AccountId);
            AddToDictionary(props, "from", From);
            AddToDictionary(props, "to", To);
            AddToDictionary(props, "phoneNumberId", PhoneNumberId);
            AddToDictionary(props, "callStatus", CallStatus);
            AddToDictionary(props, "startTime", StartTime);
            AddToDictionary(props, "connectTime", ConnectTime);
            AddToDictionary(props, "endTime", EndTime);
            AddToDictionary(props, "duration", Duration);
            AddToDictionary(props, "connectDuration", ConnectDuration);
            AddToDictionary(props, "direction", Direction);
            AddToDictionary(props, "answeredBy", AnsweredBy);
            AddToDictionary(props, "subresourceUris", SubresourceUris);
            AddToDictionary(props, "applicationId", ApplicationId);
            return props;
        }

        private IDictionary<string, object> AddToDictionary(
            IDictionary<string, object> dict,
            string key,
            object value
        )
        {
            if (value != null)
            {
                dict.Add(key, value);
            }
            return dict;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            yield break;
        }
    }
}
