/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using JsonSubTypes;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// The &#x60;AddToConference&#x60; command adds a Participant to a Conference. Two Call legs can be bridged together by creating a Conference and adding both Call legs to it via &#x60;AddToConference&#x60;.
    /// </summary>
    [DataContract(Name = "AddToConference")]
    [JsonConverter(typeof(JsonSubtypes), "Command")]
    public partial class AddToConference : PerclCommand, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddToConference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddToConference() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddToConference" /> class.
        /// </summary>
        /// <param name="allowCallControl">If &#x60;true&#x60;, Call control will be enabled for this Participant&#39;s Call leg..</param>
        /// <param name="callControlSequence">Defines a sequence of digits that, when entered by this caller, invokes the &#x60;callControlUrl&#x60;. Only digits plus &#39;*&#39;, and &#39;#&#39; may be used..</param>
        /// <param name="callControlUrl">URL to be invoked when this Participant enters the digit sequence defined in the &#x60;callControlSequence&#x60; attribute..</param>
        /// <param name="conferenceId">ID of the Conference to which to add the Participant (Call leg). Conference must exist or an error will result. (required).</param>
        /// <param name="leaveConferenceUrl">URL to be invoked when the Participant leaves the Conference. .</param>
        /// <param name="listen">If &#x60;true&#x60;, the Participant joins the Conference with listen privileges. This may be modified later via the REST API or &#x60;SetListen&#x60; PerCL command..</param>
        /// <param name="notificationUrl">When the Participant enters the Conference, this URL will be invoked using an HTTP POST request with the standard request parameters..</param>
        /// <param name="startConfOnEnter">Flag that indicates whether a Conference starts upon entry of this particular Participant. This is usually set to &#x60;true&#x60; for moderators and &#x60;false&#x60; for all other Participants..</param>
        /// <param name="talk">If &#x60;true&#x60;, the Participant joins the Conference with talk privileges. This may be modified later via the REST API or &#x60;SetTalk&#x60; PerCL command. .</param>
        /// <param name="dtmfPassThrough">If &#x60;true&#x60;, the Participant joins the Conference with dtmfPassThrough privileges. This may be modified later via the REST API or &#x60;SetDTMFPassThrough&#x60; PerCL command. .</param>
        /// <param name="command">Name of PerCL Command (this is automatically derived from mapping configuration and should not be manually supplied in any arguments) (default to &quot;AddToConference&quot;).</param>
        public AddToConference(
            bool allowCallControl = default(bool),
            string callControlSequence = default(string),
            string callControlUrl = default(string),
            string conferenceId = default(string),
            string leaveConferenceUrl = default(string),
            bool listen = default(bool),
            string notificationUrl = default(string),
            bool startConfOnEnter = default(bool),
            bool talk = default(bool),
            bool dtmfPassThrough = default(bool),
            string command = @"AddToConference"
        )
            : base(command)
        {
            // to ensure "conferenceId" is required (not null)
            if (conferenceId == null)
            {
                throw new ArgumentNullException(
                    "conferenceId is a required property for AddToConference and cannot be null"
                );
            }
            this.ConferenceId = conferenceId;

            this.AllowCallControl = allowCallControl;

            this.CallControlSequence = callControlSequence;

            this.CallControlUrl = callControlUrl;

            this.LeaveConferenceUrl = leaveConferenceUrl;

            this.Listen = listen;

            this.NotificationUrl = notificationUrl;

            this.StartConfOnEnter = startConfOnEnter;

            this.Talk = talk;

            this.DtmfPassThrough = dtmfPassThrough;
        }

        /// <summary>
        /// If &#x60;true&#x60;, Call control will be enabled for this Participant&#39;s Call leg.
        /// </summary>
        /// <value>If &#x60;true&#x60;, Call control will be enabled for this Participant&#39;s Call leg.</value>
        [DataMember(Name = "allowCallControl", EmitDefaultValue = true)]
        public bool AllowCallControl { get; set; }

        /// <summary>
        /// Defines a sequence of digits that, when entered by this caller, invokes the &#x60;callControlUrl&#x60;. Only digits plus &#39;*&#39;, and &#39;#&#39; may be used.
        /// </summary>
        /// <value>Defines a sequence of digits that, when entered by this caller, invokes the &#x60;callControlUrl&#x60;. Only digits plus &#39;*&#39;, and &#39;#&#39; may be used.</value>
        [DataMember(Name = "callControlSequence", EmitDefaultValue = false)]
        public string CallControlSequence { get; set; }

        /// <summary>
        /// URL to be invoked when this Participant enters the digit sequence defined in the &#x60;callControlSequence&#x60; attribute.
        /// </summary>
        /// <value>URL to be invoked when this Participant enters the digit sequence defined in the &#x60;callControlSequence&#x60; attribute.</value>
        [DataMember(Name = "callControlUrl", EmitDefaultValue = false)]
        public string CallControlUrl { get; set; }

        /// <summary>
        /// ID of the Conference to which to add the Participant (Call leg). Conference must exist or an error will result.
        /// </summary>
        /// <value>ID of the Conference to which to add the Participant (Call leg). Conference must exist or an error will result.</value>
        [DataMember(Name = "conferenceId", IsRequired = true, EmitDefaultValue = true)]
        public string ConferenceId { get; set; }

        /// <summary>
        /// URL to be invoked when the Participant leaves the Conference.
        /// </summary>
        /// <value>URL to be invoked when the Participant leaves the Conference. </value>
        [DataMember(Name = "leaveConferenceUrl", EmitDefaultValue = false)]
        public string LeaveConferenceUrl { get; set; }

        /// <summary>
        /// If &#x60;true&#x60;, the Participant joins the Conference with listen privileges. This may be modified later via the REST API or &#x60;SetListen&#x60; PerCL command.
        /// </summary>
        /// <value>If &#x60;true&#x60;, the Participant joins the Conference with listen privileges. This may be modified later via the REST API or &#x60;SetListen&#x60; PerCL command.</value>
        [DataMember(Name = "listen", EmitDefaultValue = true)]
        public bool Listen { get; set; }

        /// <summary>
        /// When the Participant enters the Conference, this URL will be invoked using an HTTP POST request with the standard request parameters.
        /// </summary>
        /// <value>When the Participant enters the Conference, this URL will be invoked using an HTTP POST request with the standard request parameters.</value>
        [DataMember(Name = "notificationUrl", EmitDefaultValue = false)]
        public string NotificationUrl { get; set; }

        /// <summary>
        /// Flag that indicates whether a Conference starts upon entry of this particular Participant. This is usually set to &#x60;true&#x60; for moderators and &#x60;false&#x60; for all other Participants.
        /// </summary>
        /// <value>Flag that indicates whether a Conference starts upon entry of this particular Participant. This is usually set to &#x60;true&#x60; for moderators and &#x60;false&#x60; for all other Participants.</value>
        [DataMember(Name = "startConfOnEnter", EmitDefaultValue = true)]
        public bool StartConfOnEnter { get; set; }

        /// <summary>
        /// If &#x60;true&#x60;, the Participant joins the Conference with talk privileges. This may be modified later via the REST API or &#x60;SetTalk&#x60; PerCL command.
        /// </summary>
        /// <value>If &#x60;true&#x60;, the Participant joins the Conference with talk privileges. This may be modified later via the REST API or &#x60;SetTalk&#x60; PerCL command. </value>
        [DataMember(Name = "talk", EmitDefaultValue = true)]
        public bool Talk { get; set; }

        /// <summary>
        /// If &#x60;true&#x60;, the Participant joins the Conference with dtmfPassThrough privileges. This may be modified later via the REST API or &#x60;SetDTMFPassThrough&#x60; PerCL command.
        /// </summary>
        /// <value>If &#x60;true&#x60;, the Participant joins the Conference with dtmfPassThrough privileges. This may be modified later via the REST API or &#x60;SetDTMFPassThrough&#x60; PerCL command. </value>
        [DataMember(Name = "dtmfPassThrough", EmitDefaultValue = true)]
        public bool DtmfPassThrough { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddToConference {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AllowCallControl: ").Append(AllowCallControl).Append("\n");
            sb.Append("  CallControlSequence: ").Append(CallControlSequence).Append("\n");
            sb.Append("  CallControlUrl: ").Append(CallControlUrl).Append("\n");
            sb.Append("  ConferenceId: ").Append(ConferenceId).Append("\n");
            sb.Append("  LeaveConferenceUrl: ").Append(LeaveConferenceUrl).Append("\n");
            sb.Append("  Listen: ").Append(Listen).Append("\n");
            sb.Append("  NotificationUrl: ").Append(NotificationUrl).Append("\n");
            sb.Append("  StartConfOnEnter: ").Append(StartConfOnEnter).Append("\n");
            sb.Append("  Talk: ").Append(Talk).Append("\n");
            sb.Append("  DtmfPassThrough: ").Append(DtmfPassThrough).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            JsonSerializerSettings settings = new JsonSerializerSettings
            {
                NullValueHandling = NullValueHandling.Ignore,
            };
            return JsonConvert.SerializeObject(ToKvp(), settings);
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the AddToConference instance.
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public override IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            AddToDictionary(props, "allowCallControl", AllowCallControl);
            AddToDictionary(props, "callControlSequence", CallControlSequence);
            AddToDictionary(props, "callControlUrl", CallControlUrl);
            AddToDictionary(props, "conferenceId", ConferenceId);
            AddToDictionary(props, "leaveConferenceUrl", LeaveConferenceUrl);
            AddToDictionary(props, "listen", Listen);
            AddToDictionary(props, "notificationUrl", NotificationUrl);
            AddToDictionary(props, "startConfOnEnter", StartConfOnEnter);
            AddToDictionary(props, "talk", Talk);
            AddToDictionary(props, "dtmfPassThrough", DtmfPassThrough);
            IDictionary<string, object> command = new Dictionary<string, object>();
            command.Add("AddToConference", props);
            return command;
        }

        private IDictionary<string, object> AddToDictionary(
            IDictionary<string, object> dict,
            string key,
            object value
        )
        {
            if (value != null)
            {
                dict.Add(key, value);
            }
            return dict;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }
}
