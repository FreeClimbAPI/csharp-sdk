/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;
using freeclimb.Enums;

namespace freeclimb.Model
{
    /// <summary>
    /// The &#x60;AddToConference&#x60; command adds a Participant to a Conference. If this Participant currently is in another Conference, the Participant is first removed from that Conference. Two Call legs can be bridged together by creating a Conference and adding both Call legs to it via &#x60;AddToConference&#x60;.
    /// </summary>
    [DataContract(Name = "AddToConference")]
    [JsonConverter(typeof(JsonSubtypes), "Command")]
    [JsonSubtypes.KnownSubType(typeof(AddToConference), "AddToConference")]
    [JsonSubtypes.KnownSubType(typeof(CreateConference), "CreateConference")]
    [JsonSubtypes.KnownSubType(typeof(Dequeue), "Dequeue")]
    [JsonSubtypes.KnownSubType(typeof(Enqueue), "Enqueue")]
    [JsonSubtypes.KnownSubType(typeof(GetDigits), "GetDigits")]
    [JsonSubtypes.KnownSubType(typeof(GetSpeech), "GetSpeech")]
    [JsonSubtypes.KnownSubType(typeof(Hangup), "Hangup")]
    [JsonSubtypes.KnownSubType(typeof(OutDial), "OutDial")]
    [JsonSubtypes.KnownSubType(typeof(Park), "Park")]
    [JsonSubtypes.KnownSubType(typeof(Pause), "Pause")]
    [JsonSubtypes.KnownSubType(typeof(Play), "Play")]
    [JsonSubtypes.KnownSubType(typeof(PlayEarlyMedia), "PlayEarlyMedia")]
    [JsonSubtypes.KnownSubType(typeof(RecordUtterance), "RecordUtterance")]
    [JsonSubtypes.KnownSubType(typeof(Redirect), "Redirect")]
    [JsonSubtypes.KnownSubType(typeof(Reject), "Reject")]
    [JsonSubtypes.KnownSubType(typeof(RemoveFromConference), "RemoveFromConference")]
    [JsonSubtypes.KnownSubType(typeof(Say), "Say")]
    [JsonSubtypes.KnownSubType(typeof(SendDigits), "SendDigits")]
    [JsonSubtypes.KnownSubType(typeof(SetListen), "SetListen")]
    [JsonSubtypes.KnownSubType(typeof(SetTalk), "SetTalk")]
    [JsonSubtypes.KnownSubType(typeof(Sms), "Sms")]
    [JsonSubtypes.KnownSubType(typeof(StartRecordCall), "StartRecordCall")]
    [JsonSubtypes.KnownSubType(typeof(TerminateConference), "TerminateConference")]
    [JsonSubtypes.KnownSubType(typeof(Unpark), "Unpark")]
    public partial class AddToConference : PerclCommand, IEquatable<AddToConference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddToConference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddToConference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddToConference" /> class.
        /// </summary>
        /// <param name="allowCallControl">If &#x60;true&#x60;, Call control will be enabled for this Participant&#39;s Call leg..</param>
        /// <param name="callControlSequence">Defines a sequence of digits that, when entered by this caller, invokes the &#x60;callControlUrl&#x60;. Only digits plus &#39;*&#39;, and &#39;#&#39; may be used..</param>
        /// <param name="callControlUrl">URL to be invoked when this Participant enters the digit sequence defined in the &#x60;callControlSequence&#x60; attribute..</param>
        /// <param name="conferenceId">ID of the Conference to which to add the Participant (Call leg). Conference must exist or an error will result. (required).</param>
        /// <param name="callId">ID of the Call that will be added to the specified Conference. The Call must be in progress or an error will result. If the Call is part of an existing Conference, it is first removed from that Conference and is then moved to the new one..</param>
        /// <param name="leaveConferenceUrl">URL to be invoked when the Participant leaves the Conference. .</param>
        /// <param name="listen">If &#x60;true&#x60;, the Participant joins the Conference with listen privileges. This may be modified later via the REST API or &#x60;SetListen&#x60; PerCL command..</param>
        /// <param name="notificationUrl">When the Participant enters the Conference, this URL will be invoked using an HTTP POST request with the standard request parameters..</param>
        /// <param name="startConfOnEnter">Flag that indicates whether a Conference starts upon entry of this particular Participant. This is usually set to &#x60;true&#x60; for moderators and &#x60;false&#x60; for all other Participants..</param>
        /// <param name="talk">If &#x60;true&#x60;, the Participant joins the Conference with talk privileges. This may be modified later via the REST API or &#x60;SetTalk&#x60; PerCL command. .</param>
        /// <param name="command">Name of PerCL Command (this is automatically derived from mapping configuration and should not be manually supplied in any arguments) (default to &quot;AddToConference&quot;).</param>
        public AddToConference(bool allowCallControl = default(bool), string callControlSequence = default(string), string callControlUrl = default(string), string conferenceId = default(string), bool callId = default(bool), string leaveConferenceUrl = default(string), bool listen = default(bool), string notificationUrl = default(string), bool startConfOnEnter = default(bool), bool talk = default(bool), string command = "AddToConference") : base(command)
        {
            // to ensure "conferenceId" is required (not null)
            if (conferenceId == null) {
                throw new ArgumentNullException("conferenceId is a required property for AddToConference and cannot be null");
            }
            this.ConferenceId = conferenceId;
            this.AllowCallControl = allowCallControl;
            this.CallControlSequence = callControlSequence;
            this.CallControlUrl = callControlUrl;
            this.CallId = callId;
            this.LeaveConferenceUrl = leaveConferenceUrl;
            this.Listen = listen;
            this.NotificationUrl = notificationUrl;
            this.StartConfOnEnter = startConfOnEnter;
            this.Talk = talk;
        }

        /// <summary>
        /// If &#x60;true&#x60;, Call control will be enabled for this Participant&#39;s Call leg.
        /// </summary>
        /// <value>If &#x60;true&#x60;, Call control will be enabled for this Participant&#39;s Call leg.</value>
        [DataMember(Name = "allowCallControl", EmitDefaultValue = true)]
        public bool AllowCallControl { get; set; }

        /// <summary>
        /// Defines a sequence of digits that, when entered by this caller, invokes the &#x60;callControlUrl&#x60;. Only digits plus &#39;*&#39;, and &#39;#&#39; may be used.
        /// </summary>
        /// <value>Defines a sequence of digits that, when entered by this caller, invokes the &#x60;callControlUrl&#x60;. Only digits plus &#39;*&#39;, and &#39;#&#39; may be used.</value>
        [DataMember(Name = "callControlSequence", EmitDefaultValue = false)]
        public string CallControlSequence { get; set; }

        /// <summary>
        /// URL to be invoked when this Participant enters the digit sequence defined in the &#x60;callControlSequence&#x60; attribute.
        /// </summary>
        /// <value>URL to be invoked when this Participant enters the digit sequence defined in the &#x60;callControlSequence&#x60; attribute.</value>
        [DataMember(Name = "callControlUrl", EmitDefaultValue = false)]
        public string CallControlUrl { get; set; }

        /// <summary>
        /// ID of the Conference to which to add the Participant (Call leg). Conference must exist or an error will result.
        /// </summary>
        /// <value>ID of the Conference to which to add the Participant (Call leg). Conference must exist or an error will result.</value>
        [DataMember(Name = "conferenceId", IsRequired = true, EmitDefaultValue = false)]
        public string ConferenceId { get; set; }

        /// <summary>
        /// ID of the Call that will be added to the specified Conference. The Call must be in progress or an error will result. If the Call is part of an existing Conference, it is first removed from that Conference and is then moved to the new one.
        /// </summary>
        /// <value>ID of the Call that will be added to the specified Conference. The Call must be in progress or an error will result. If the Call is part of an existing Conference, it is first removed from that Conference and is then moved to the new one.</value>
        [DataMember(Name = "callId", EmitDefaultValue = true)]
        public bool CallId { get; set; }

        /// <summary>
        /// URL to be invoked when the Participant leaves the Conference. 
        /// </summary>
        /// <value>URL to be invoked when the Participant leaves the Conference. </value>
        [DataMember(Name = "leaveConferenceUrl", EmitDefaultValue = false)]
        public string LeaveConferenceUrl { get; set; }

        /// <summary>
        /// If &#x60;true&#x60;, the Participant joins the Conference with listen privileges. This may be modified later via the REST API or &#x60;SetListen&#x60; PerCL command.
        /// </summary>
        /// <value>If &#x60;true&#x60;, the Participant joins the Conference with listen privileges. This may be modified later via the REST API or &#x60;SetListen&#x60; PerCL command.</value>
        [DataMember(Name = "listen", EmitDefaultValue = true)]
        public bool Listen { get; set; }

        /// <summary>
        /// When the Participant enters the Conference, this URL will be invoked using an HTTP POST request with the standard request parameters.
        /// </summary>
        /// <value>When the Participant enters the Conference, this URL will be invoked using an HTTP POST request with the standard request parameters.</value>
        [DataMember(Name = "notificationUrl", EmitDefaultValue = false)]
        public string NotificationUrl { get; set; }

        /// <summary>
        /// Flag that indicates whether a Conference starts upon entry of this particular Participant. This is usually set to &#x60;true&#x60; for moderators and &#x60;false&#x60; for all other Participants.
        /// </summary>
        /// <value>Flag that indicates whether a Conference starts upon entry of this particular Participant. This is usually set to &#x60;true&#x60; for moderators and &#x60;false&#x60; for all other Participants.</value>
        [DataMember(Name = "startConfOnEnter", EmitDefaultValue = true)]
        public bool StartConfOnEnter { get; set; }

        /// <summary>
        /// If &#x60;true&#x60;, the Participant joins the Conference with talk privileges. This may be modified later via the REST API or &#x60;SetTalk&#x60; PerCL command. 
        /// </summary>
        /// <value>If &#x60;true&#x60;, the Participant joins the Conference with talk privileges. This may be modified later via the REST API or &#x60;SetTalk&#x60; PerCL command. </value>
        [DataMember(Name = "talk", EmitDefaultValue = true)]
        public bool Talk { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddToConference {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AllowCallControl: ").Append(AllowCallControl).Append("\n");
            sb.Append("  CallControlSequence: ").Append(CallControlSequence).Append("\n");
            sb.Append("  CallControlUrl: ").Append(CallControlUrl).Append("\n");
            sb.Append("  ConferenceId: ").Append(ConferenceId).Append("\n");
            sb.Append("  CallId: ").Append(CallId).Append("\n");
            sb.Append("  LeaveConferenceUrl: ").Append(LeaveConferenceUrl).Append("\n");
            sb.Append("  Listen: ").Append(Listen).Append("\n");
            sb.Append("  NotificationUrl: ").Append(NotificationUrl).Append("\n");
            sb.Append("  StartConfOnEnter: ").Append(StartConfOnEnter).Append("\n");
            sb.Append("  Talk: ").Append(Talk).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            JsonSerializer jsonSerializer = JsonSerializer.Create();
            jsonSerializer.NullValueHandling = NullValueHandling.Ignore;

            StringBuilder strb = new StringBuilder();
            jsonSerializer.Serialize(new StringWriter(strb), ToKvp());

            return strb.ToString();
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the AddToConference instance. 
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public override IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            props.Add("allowCallControl", AllowCallControl);          
            props.Add("callControlSequence", CallControlSequence);          
            props.Add("callControlUrl", CallControlUrl);          
            props.Add("conferenceId", ConferenceId);          
            props.Add("callId", CallId);          
            props.Add("leaveConferenceUrl", LeaveConferenceUrl);          
            props.Add("listen", Listen);          
            props.Add("notificationUrl", NotificationUrl);          
            props.Add("startConfOnEnter", StartConfOnEnter);          
            props.Add("talk", Talk);          
            IDictionary<string, object> command = new Dictionary<string, object>();
            command.Add("AddToConference",props);
            return command;
        }
        
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddToConference);
        }

        /// <summary>
        /// Returns true if AddToConference instances are equal
        /// </summary>
        /// <param name="input">Instance of AddToConference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddToConference input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.AllowCallControl == input.AllowCallControl ||
                    this.AllowCallControl.Equals(input.AllowCallControl)
                ) && base.Equals(input) && 
                (
                    this.CallControlSequence == input.CallControlSequence ||
                    (this.CallControlSequence != null &&
                    this.CallControlSequence.Equals(input.CallControlSequence))
                ) && base.Equals(input) && 
                (
                    this.CallControlUrl == input.CallControlUrl ||
                    (this.CallControlUrl != null &&
                    this.CallControlUrl.Equals(input.CallControlUrl))
                ) && base.Equals(input) && 
                (
                    this.ConferenceId == input.ConferenceId ||
                    (this.ConferenceId != null &&
                    this.ConferenceId.Equals(input.ConferenceId))
                ) && base.Equals(input) && 
                (
                    this.CallId == input.CallId ||
                    this.CallId.Equals(input.CallId)
                ) && base.Equals(input) && 
                (
                    this.LeaveConferenceUrl == input.LeaveConferenceUrl ||
                    (this.LeaveConferenceUrl != null &&
                    this.LeaveConferenceUrl.Equals(input.LeaveConferenceUrl))
                ) && base.Equals(input) && 
                (
                    this.Listen == input.Listen ||
                    this.Listen.Equals(input.Listen)
                ) && base.Equals(input) && 
                (
                    this.NotificationUrl == input.NotificationUrl ||
                    (this.NotificationUrl != null &&
                    this.NotificationUrl.Equals(input.NotificationUrl))
                ) && base.Equals(input) && 
                (
                    this.StartConfOnEnter == input.StartConfOnEnter ||
                    this.StartConfOnEnter.Equals(input.StartConfOnEnter)
                ) && base.Equals(input) && 
                (
                    this.Talk == input.Talk ||
                    this.Talk.Equals(input.Talk)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowCallControl.GetHashCode();
                if (this.CallControlSequence != null)
                {
                    hashCode = (hashCode * 59) + this.CallControlSequence.GetHashCode();
                }
                if (this.CallControlUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CallControlUrl.GetHashCode();
                }
                if (this.ConferenceId != null)
                {
                    hashCode = (hashCode * 59) + this.ConferenceId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CallId.GetHashCode();
                if (this.LeaveConferenceUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LeaveConferenceUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Listen.GetHashCode();
                if (this.NotificationUrl != null)
                {
                    hashCode = (hashCode * 59) + this.NotificationUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StartConfOnEnter.GetHashCode();
                hashCode = (hashCode * 59) + this.Talk.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public override IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected override IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
