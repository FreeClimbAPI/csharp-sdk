/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// ApplicationRequest
    /// </summary>
    [DataContract(Name = "ApplicationRequest")]
    public partial class ApplicationRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationRequest" /> class.
        /// </summary>
        /// <param name="alias">A human readable description of the application, with maximum length 64 characters..</param>
        /// <param name="voiceUrl">The URL that FreeClimb will request when an inbound call arrives on a phone number assigned to this application. Used only for inbound calls..</param>
        /// <param name="voiceFallbackUrl">The URL that FreeClimb will request if it times out waiting for a response from the voiceUrl. Used for inbound calls only. Note: A PerCL response is expected to control the inbound call..</param>
        /// <param name="callConnectUrl">The URL that FreeClimb will request when an outbound call request is complete. Used for outbound calls only.  Note: A PerCL response is expected if the outbound call is connected (status&#x3D;InProgress) to control the call..</param>
        /// <param name="statusCallbackUrl">The URL that FreeClimb will request to pass call status (such as call ended) to the application.  Note: This is a notification only; any PerCL returned will be ignored..</param>
        /// <param name="smsUrl">The URL that FreeClimb will request when a phone number assigned to this application receives an incoming SMS message. Used for inbound SMS only.  Note: Any PerCL returned will be ignored..</param>
        /// <param name="smsFallbackUrl">The URL that FreeClimb will request if it times out waiting for a response from the smsUrl. Used for inbound SMS only.  Note: Any PerCL returned will be ignored..</param>
        public ApplicationRequest(
            string alias = default(string),
            string voiceUrl = default(string),
            string voiceFallbackUrl = default(string),
            string callConnectUrl = default(string),
            string statusCallbackUrl = default(string),
            string smsUrl = default(string),
            string smsFallbackUrl = default(string)
        )
        {
            this.Alias = alias;

            this.VoiceUrl = voiceUrl;

            this.VoiceFallbackUrl = voiceFallbackUrl;

            this.CallConnectUrl = callConnectUrl;

            this.StatusCallbackUrl = statusCallbackUrl;

            this.SmsUrl = smsUrl;

            this.SmsFallbackUrl = smsFallbackUrl;
        }

        /// <summary>
        /// A human readable description of the application, with maximum length 64 characters.
        /// </summary>
        /// <value>A human readable description of the application, with maximum length 64 characters.</value>
        [DataMember(Name = "alias", EmitDefaultValue = false)]
        public string Alias { get; set; }

        /// <summary>
        /// The URL that FreeClimb will request when an inbound call arrives on a phone number assigned to this application. Used only for inbound calls.
        /// </summary>
        /// <value>The URL that FreeClimb will request when an inbound call arrives on a phone number assigned to this application. Used only for inbound calls.</value>
        [DataMember(Name = "voiceUrl", EmitDefaultValue = true)]
        public string VoiceUrl { get; set; }

        /// <summary>
        /// The URL that FreeClimb will request if it times out waiting for a response from the voiceUrl. Used for inbound calls only. Note: A PerCL response is expected to control the inbound call.
        /// </summary>
        /// <value>The URL that FreeClimb will request if it times out waiting for a response from the voiceUrl. Used for inbound calls only. Note: A PerCL response is expected to control the inbound call.</value>
        [DataMember(Name = "voiceFallbackUrl", EmitDefaultValue = true)]
        public string VoiceFallbackUrl { get; set; }

        /// <summary>
        /// The URL that FreeClimb will request when an outbound call request is complete. Used for outbound calls only.  Note: A PerCL response is expected if the outbound call is connected (status&#x3D;InProgress) to control the call.
        /// </summary>
        /// <value>The URL that FreeClimb will request when an outbound call request is complete. Used for outbound calls only.  Note: A PerCL response is expected if the outbound call is connected (status&#x3D;InProgress) to control the call.</value>
        [DataMember(Name = "callConnectUrl", EmitDefaultValue = true)]
        public string CallConnectUrl { get; set; }

        /// <summary>
        /// The URL that FreeClimb will request to pass call status (such as call ended) to the application.  Note: This is a notification only; any PerCL returned will be ignored.
        /// </summary>
        /// <value>The URL that FreeClimb will request to pass call status (such as call ended) to the application.  Note: This is a notification only; any PerCL returned will be ignored.</value>
        [DataMember(Name = "statusCallbackUrl", EmitDefaultValue = true)]
        public string StatusCallbackUrl { get; set; }

        /// <summary>
        /// The URL that FreeClimb will request when a phone number assigned to this application receives an incoming SMS message. Used for inbound SMS only.  Note: Any PerCL returned will be ignored.
        /// </summary>
        /// <value>The URL that FreeClimb will request when a phone number assigned to this application receives an incoming SMS message. Used for inbound SMS only.  Note: Any PerCL returned will be ignored.</value>
        [DataMember(Name = "smsUrl", EmitDefaultValue = true)]
        public string SmsUrl { get; set; }

        /// <summary>
        /// The URL that FreeClimb will request if it times out waiting for a response from the smsUrl. Used for inbound SMS only.  Note: Any PerCL returned will be ignored.
        /// </summary>
        /// <value>The URL that FreeClimb will request if it times out waiting for a response from the smsUrl. Used for inbound SMS only.  Note: Any PerCL returned will be ignored.</value>
        [DataMember(Name = "smsFallbackUrl", EmitDefaultValue = true)]
        public string SmsFallbackUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApplicationRequest {\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  VoiceUrl: ").Append(VoiceUrl).Append("\n");
            sb.Append("  VoiceFallbackUrl: ").Append(VoiceFallbackUrl).Append("\n");
            sb.Append("  CallConnectUrl: ").Append(CallConnectUrl).Append("\n");
            sb.Append("  StatusCallbackUrl: ").Append(StatusCallbackUrl).Append("\n");
            sb.Append("  SmsUrl: ").Append(SmsUrl).Append("\n");
            sb.Append("  SmsFallbackUrl: ").Append(SmsFallbackUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented,
                new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }
            );
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the ApplicationRequest instance.
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public virtual IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            AddToDictionary(props, "alias", Alias);
            AddToDictionary(props, "voiceUrl", VoiceUrl);
            AddToDictionary(props, "voiceFallbackUrl", VoiceFallbackUrl);
            AddToDictionary(props, "callConnectUrl", CallConnectUrl);
            AddToDictionary(props, "statusCallbackUrl", StatusCallbackUrl);
            AddToDictionary(props, "smsUrl", SmsUrl);
            AddToDictionary(props, "smsFallbackUrl", SmsFallbackUrl);
            return props;
        }

        private IDictionary<string, object> AddToDictionary(
            IDictionary<string, object> dict,
            string key,
            object value
        )
        {
            if (value != null)
            {
                dict.Add(key, value);
            }
            return dict;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            yield break;
        }
    }
}
