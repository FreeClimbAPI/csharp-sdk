/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// MakeCallRequest
    /// </summary>
    [DataContract(Name = "MakeCallRequest")]
    public partial class MakeCallRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MakeCallRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MakeCallRequest() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="MakeCallRequest" /> class.
        /// </summary>
        /// <param name="from">Phone number to use as the caller ID. This can be: (a) The To or From number provided in FreeClimb&#39;s initial request to your app or (b) Any incoming phone number you have purchased from FreeClimb. (required).</param>
        /// <param name="to">Phone number to place the Call to. (required).</param>
        /// <param name="applicationId">Required if no &#x60;parentCallId&#x60; or &#x60;callConnectUrl&#x60; has been provided. ID of the application FreeClimb should use to handle this phone call. FreeClimb will use the &#x60;callConnectUrl&#x60; and &#x60;statusCallbackUrl&#x60; set on the application unless the &#x60;callConnectUrl&#x60; attribute is also provided with the request. In this case, the URL specified in that &#x60;callConnectUrl&#x60; attribute will be used as a replacement of the &#x60;callConnectUrl&#x60; originally assigned in the application. If the &#x60;callConnectUrl&#x60; is not set as either an attribute of the request or as part of the specified application, an error will be provided. The application’s voiceUrl parameter is not used for outbound calls..</param>
        /// <param name="sendDigits">String of digits to dial after connecting to the number. It can include digits &#x60;0-9&#x60;, &#x60;*&#x60;, and &#x60;#&#x60;, and allows embedding a pause between the output of individual digits. The default pause is 500 milliseconds. So, a string such as *1234#* will be played in 2 seconds because of the 4 standard pauses implied within the string. A custom pause is specified by including a positive integer wrapped in curly braces: {n}. For more information, see **sendDigits examples** below..</param>
        /// <param name="ifMachine">Specifies how FreeClimb should handle this Call if an answering machine answers it..</param>
        /// <param name="ifMachineUrl">This attribute specifies a URL to which FreeClimb will make a POST request when an answering machine or a fax machine is detected. This URL is required if the ifMachine flag is set to redirect. When ifMachine is set to hangup, ifMachineUrl must not be included in the request. For more information, see **ifMachineUrl example** below..</param>
        /// <param name="timeout">Number of seconds that FreeClimb should allow the phone to ring before assuming there is no answer. Default is 30 seconds. Maximum allowed ring-time is determined by the target phone&#39;s provider. Note that most providers limit ring-time to 120 seconds. (default to 30).</param>
        /// <param name="parentCallId">Required if no &#x60;applicationId&#x60; or &#x60;callConnectUrl&#x60; has been provided. The ID of the parent Call in the case that this new Call is meant to be treated as a child of an existing Call. This attribute should be included when possible to reduce latency when adding child calls to Conferences containing the parent Call. A call can only be used as a parent once the call is in progress or as an inbound call that is still ringing. An outbound call is considered to be in progress once the &#x60;outdialConnect&#x60; or &#x60;outdialApiConnect&#x60; webhook is invoked. An inbound call is ringing when the inbound webhook is invoked. If a &#x60;callConnectUrl&#x60; attribute is also included with the &#x60;parentCallId&#x60; in the request, this URL will be used as a replacement of the &#x60;callConnectUrl&#x60; originally assigned in the parent call..</param>
        /// <param name="privacyMode">Activate privacy mode in order to obscure log data that can potentially expose private information..</param>
        /// <param name="callConnectUrl">The URL that FreeClimb should use to handle this phone call. If an applicationId or parentCallId have already been provided, this callConnectUrl attribute will be used as a replacement of the callConnectUrl originally assigned in the application or parent call..</param>
        public MakeCallRequest(
            string from = default(string),
            string to = default(string),
            string applicationId = default(string),
            string sendDigits = default(string),
            string ifMachine = default(string),
            string ifMachineUrl = default(string),
            int timeout = 30,
            string parentCallId = default(string),
            bool privacyMode = default(bool),
            string callConnectUrl = default(string)
        )
        {
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new ArgumentNullException(
                    "from is a required property for MakeCallRequest and cannot be null"
                );
            }
            this.From = from;

            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException(
                    "to is a required property for MakeCallRequest and cannot be null"
                );
            }
            this.To = to;

            this.ApplicationId = applicationId;

            this.SendDigits = sendDigits;

            this.IfMachine = ifMachine;

            this.IfMachineUrl = ifMachineUrl;

            this.Timeout = timeout;

            this.ParentCallId = parentCallId;

            this.PrivacyMode = privacyMode;

            this.CallConnectUrl = callConnectUrl;
        }

        /// <summary>
        /// Phone number to use as the caller ID. This can be: (a) The To or From number provided in FreeClimb&#39;s initial request to your app or (b) Any incoming phone number you have purchased from FreeClimb.
        /// </summary>
        /// <value>Phone number to use as the caller ID. This can be: (a) The To or From number provided in FreeClimb&#39;s initial request to your app or (b) Any incoming phone number you have purchased from FreeClimb.</value>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = true)]
        public string From { get; set; }

        /// <summary>
        /// Phone number to place the Call to.
        /// </summary>
        /// <value>Phone number to place the Call to.</value>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public string To { get; set; }

        /// <summary>
        /// Required if no &#x60;parentCallId&#x60; or &#x60;callConnectUrl&#x60; has been provided. ID of the application FreeClimb should use to handle this phone call. FreeClimb will use the &#x60;callConnectUrl&#x60; and &#x60;statusCallbackUrl&#x60; set on the application unless the &#x60;callConnectUrl&#x60; attribute is also provided with the request. In this case, the URL specified in that &#x60;callConnectUrl&#x60; attribute will be used as a replacement of the &#x60;callConnectUrl&#x60; originally assigned in the application. If the &#x60;callConnectUrl&#x60; is not set as either an attribute of the request or as part of the specified application, an error will be provided. The application’s voiceUrl parameter is not used for outbound calls.
        /// </summary>
        /// <value>Required if no &#x60;parentCallId&#x60; or &#x60;callConnectUrl&#x60; has been provided. ID of the application FreeClimb should use to handle this phone call. FreeClimb will use the &#x60;callConnectUrl&#x60; and &#x60;statusCallbackUrl&#x60; set on the application unless the &#x60;callConnectUrl&#x60; attribute is also provided with the request. In this case, the URL specified in that &#x60;callConnectUrl&#x60; attribute will be used as a replacement of the &#x60;callConnectUrl&#x60; originally assigned in the application. If the &#x60;callConnectUrl&#x60; is not set as either an attribute of the request or as part of the specified application, an error will be provided. The application’s voiceUrl parameter is not used for outbound calls.</value>
        [DataMember(Name = "applicationId", EmitDefaultValue = false)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// String of digits to dial after connecting to the number. It can include digits &#x60;0-9&#x60;, &#x60;*&#x60;, and &#x60;#&#x60;, and allows embedding a pause between the output of individual digits. The default pause is 500 milliseconds. So, a string such as *1234#* will be played in 2 seconds because of the 4 standard pauses implied within the string. A custom pause is specified by including a positive integer wrapped in curly braces: {n}. For more information, see **sendDigits examples** below.
        /// </summary>
        /// <value>String of digits to dial after connecting to the number. It can include digits &#x60;0-9&#x60;, &#x60;*&#x60;, and &#x60;#&#x60;, and allows embedding a pause between the output of individual digits. The default pause is 500 milliseconds. So, a string such as *1234#* will be played in 2 seconds because of the 4 standard pauses implied within the string. A custom pause is specified by including a positive integer wrapped in curly braces: {n}. For more information, see **sendDigits examples** below.</value>
        [DataMember(Name = "sendDigits", EmitDefaultValue = false)]
        public string SendDigits { get; set; }

        /// <summary>
        /// Specifies how FreeClimb should handle this Call if an answering machine answers it.
        /// </summary>
        /// <value>Specifies how FreeClimb should handle this Call if an answering machine answers it.</value>
        [DataMember(Name = "ifMachine", EmitDefaultValue = false)]
        public string IfMachine { get; set; }

        /// <summary>
        /// This attribute specifies a URL to which FreeClimb will make a POST request when an answering machine or a fax machine is detected. This URL is required if the ifMachine flag is set to redirect. When ifMachine is set to hangup, ifMachineUrl must not be included in the request. For more information, see **ifMachineUrl example** below.
        /// </summary>
        /// <value>This attribute specifies a URL to which FreeClimb will make a POST request when an answering machine or a fax machine is detected. This URL is required if the ifMachine flag is set to redirect. When ifMachine is set to hangup, ifMachineUrl must not be included in the request. For more information, see **ifMachineUrl example** below.</value>
        [DataMember(Name = "ifMachineUrl", EmitDefaultValue = false)]
        public string IfMachineUrl { get; set; }

        /// <summary>
        /// Number of seconds that FreeClimb should allow the phone to ring before assuming there is no answer. Default is 30 seconds. Maximum allowed ring-time is determined by the target phone&#39;s provider. Note that most providers limit ring-time to 120 seconds.
        /// </summary>
        /// <value>Number of seconds that FreeClimb should allow the phone to ring before assuming there is no answer. Default is 30 seconds. Maximum allowed ring-time is determined by the target phone&#39;s provider. Note that most providers limit ring-time to 120 seconds.</value>
        [DataMember(Name = "timeout", EmitDefaultValue = false)]
        public int Timeout { get; set; }

        /// <summary>
        /// Required if no &#x60;applicationId&#x60; or &#x60;callConnectUrl&#x60; has been provided. The ID of the parent Call in the case that this new Call is meant to be treated as a child of an existing Call. This attribute should be included when possible to reduce latency when adding child calls to Conferences containing the parent Call. A call can only be used as a parent once the call is in progress or as an inbound call that is still ringing. An outbound call is considered to be in progress once the &#x60;outdialConnect&#x60; or &#x60;outdialApiConnect&#x60; webhook is invoked. An inbound call is ringing when the inbound webhook is invoked. If a &#x60;callConnectUrl&#x60; attribute is also included with the &#x60;parentCallId&#x60; in the request, this URL will be used as a replacement of the &#x60;callConnectUrl&#x60; originally assigned in the parent call.
        /// </summary>
        /// <value>Required if no &#x60;applicationId&#x60; or &#x60;callConnectUrl&#x60; has been provided. The ID of the parent Call in the case that this new Call is meant to be treated as a child of an existing Call. This attribute should be included when possible to reduce latency when adding child calls to Conferences containing the parent Call. A call can only be used as a parent once the call is in progress or as an inbound call that is still ringing. An outbound call is considered to be in progress once the &#x60;outdialConnect&#x60; or &#x60;outdialApiConnect&#x60; webhook is invoked. An inbound call is ringing when the inbound webhook is invoked. If a &#x60;callConnectUrl&#x60; attribute is also included with the &#x60;parentCallId&#x60; in the request, this URL will be used as a replacement of the &#x60;callConnectUrl&#x60; originally assigned in the parent call.</value>
        [DataMember(Name = "parentCallId", EmitDefaultValue = false)]
        public string ParentCallId { get; set; }

        /// <summary>
        /// Activate privacy mode in order to obscure log data that can potentially expose private information.
        /// </summary>
        /// <value>Activate privacy mode in order to obscure log data that can potentially expose private information.</value>
        [DataMember(Name = "privacyMode", EmitDefaultValue = true)]
        public bool PrivacyMode { get; set; }

        /// <summary>
        /// The URL that FreeClimb should use to handle this phone call. If an applicationId or parentCallId have already been provided, this callConnectUrl attribute will be used as a replacement of the callConnectUrl originally assigned in the application or parent call.
        /// </summary>
        /// <value>The URL that FreeClimb should use to handle this phone call. If an applicationId or parentCallId have already been provided, this callConnectUrl attribute will be used as a replacement of the callConnectUrl originally assigned in the application or parent call.</value>
        [DataMember(Name = "callConnectUrl", EmitDefaultValue = false)]
        public string CallConnectUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MakeCallRequest {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  SendDigits: ").Append(SendDigits).Append("\n");
            sb.Append("  IfMachine: ").Append(IfMachine).Append("\n");
            sb.Append("  IfMachineUrl: ").Append(IfMachineUrl).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  ParentCallId: ").Append(ParentCallId).Append("\n");
            sb.Append("  PrivacyMode: ").Append(PrivacyMode).Append("\n");
            sb.Append("  CallConnectUrl: ").Append(CallConnectUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented
            );
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the MakeCallRequest instance.
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public virtual IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            props.Add("from", From);
            props.Add("to", To);
            props.Add("applicationId", ApplicationId);
            props.Add("sendDigits", SendDigits);
            props.Add("ifMachine", IfMachine);
            props.Add("ifMachineUrl", IfMachineUrl);
            props.Add("timeout", Timeout);
            props.Add("parentCallId", ParentCallId);
            props.Add("privacyMode", PrivacyMode);
            props.Add("callConnectUrl", CallConnectUrl);
            return props;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            yield break;
        }
    }
}
