/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;
using freeclimb.Enums;

namespace freeclimb.Model
{
    /// <summary>
    /// A brand is a business identity behind the campaign.
    /// </summary>
    [DataContract(Name = "SMSTenDLCBrand")]
    public partial class SMSTenDLCBrand : IEquatable<SMSTenDLCBrand>, IValidatableObject
    {
        /// <summary>
        /// Entity type behind the brand. This is the form of business establishment.
        /// </summary>
        /// <value>Entity type behind the brand. This is the form of business establishment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EntityTypeEnum
        {
            /// <summary>
            /// Enum PRIVATEPROFIT for value: PRIVATE_PROFIT
            /// </summary>
            [EnumMember(Value = "PRIVATE_PROFIT")]
            PRIVATEPROFIT = 1,

            /// <summary>
            /// Enum PUBLICPROFIT for value: PUBLIC_PROFIT
            /// </summary>
            [EnumMember(Value = "PUBLIC_PROFIT")]
            PUBLICPROFIT = 2,

            /// <summary>
            /// Enum NONPROFIT for value: NON_PROFIT
            /// </summary>
            [EnumMember(Value = "NON_PROFIT")]
            NONPROFIT = 3,

            /// <summary>
            /// Enum GOVERNMENT for value: GOVERNMENT
            /// </summary>
            [EnumMember(Value = "GOVERNMENT")]
            GOVERNMENT = 4,

            /// <summary>
            /// Enum SOLEPROPRIETOR for value: SOLE_PROPRIETOR
            /// </summary>
            [EnumMember(Value = "SOLE_PROPRIETOR")]
            SOLEPROPRIETOR = 5

        }


        /// <summary>
        /// Entity type behind the brand. This is the form of business establishment.
        /// </summary>
        /// <value>Entity type behind the brand. This is the form of business establishment.</value>
        [DataMember(Name = "entityType", IsRequired = true, EmitDefaultValue = false)]
        public EntityTypeEnum EntityType { get; set; }
        /// <summary>
        /// (Required for public company) stock exchange.
        /// </summary>
        /// <value>(Required for public company) stock exchange.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StockExchangeEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum NASDAQ for value: NASDAQ
            /// </summary>
            [EnumMember(Value = "NASDAQ")]
            NASDAQ = 2,

            /// <summary>
            /// Enum NYSE for value: NYSE
            /// </summary>
            [EnumMember(Value = "NYSE")]
            NYSE = 3,

            /// <summary>
            /// Enum AMEX for value: AMEX
            /// </summary>
            [EnumMember(Value = "AMEX")]
            AMEX = 4,

            /// <summary>
            /// Enum AMX for value: AMX
            /// </summary>
            [EnumMember(Value = "AMX")]
            AMX = 5,

            /// <summary>
            /// Enum ASX for value: ASX
            /// </summary>
            [EnumMember(Value = "ASX")]
            ASX = 6,

            /// <summary>
            /// Enum B3 for value: B3
            /// </summary>
            [EnumMember(Value = "B3")]
            B3 = 7,

            /// <summary>
            /// Enum BME for value: BME
            /// </summary>
            [EnumMember(Value = "BME")]
            BME = 8,

            /// <summary>
            /// Enum BSE for value: BSE
            /// </summary>
            [EnumMember(Value = "BSE")]
            BSE = 9,

            /// <summary>
            /// Enum FRA for value: FRA
            /// </summary>
            [EnumMember(Value = "FRA")]
            FRA = 10,

            /// <summary>
            /// Enum ICEX for value: ICEX
            /// </summary>
            [EnumMember(Value = "ICEX")]
            ICEX = 11,

            /// <summary>
            /// Enum JPX for value: JPX
            /// </summary>
            [EnumMember(Value = "JPX")]
            JPX = 12,

            /// <summary>
            /// Enum JSE for value: JSE
            /// </summary>
            [EnumMember(Value = "JSE")]
            JSE = 13,

            /// <summary>
            /// Enum KRX for value: KRX
            /// </summary>
            [EnumMember(Value = "KRX")]
            KRX = 14,

            /// <summary>
            /// Enum LON for value: LON
            /// </summary>
            [EnumMember(Value = "LON")]
            LON = 15,

            /// <summary>
            /// Enum NSE for value: NSE
            /// </summary>
            [EnumMember(Value = "NSE")]
            NSE = 16,

            /// <summary>
            /// Enum OMX for value: OMX
            /// </summary>
            [EnumMember(Value = "OMX")]
            OMX = 17,

            /// <summary>
            /// Enum SEHK for value: SEHK
            /// </summary>
            [EnumMember(Value = "SEHK")]
            SEHK = 18,

            /// <summary>
            /// Enum SGX for value: SGX
            /// </summary>
            [EnumMember(Value = "SGX")]
            SGX = 19,

            /// <summary>
            /// Enum SSE for value: SSE
            /// </summary>
            [EnumMember(Value = "SSE")]
            SSE = 20,

            /// <summary>
            /// Enum STO for value: STO
            /// </summary>
            [EnumMember(Value = "STO")]
            STO = 21,

            /// <summary>
            /// Enum SWX for value: SWX
            /// </summary>
            [EnumMember(Value = "SWX")]
            SWX = 22,

            /// <summary>
            /// Enum SZSE for value: SZSE
            /// </summary>
            [EnumMember(Value = "SZSE")]
            SZSE = 23,

            /// <summary>
            /// Enum TSX for value: TSX
            /// </summary>
            [EnumMember(Value = "TSX")]
            TSX = 24,

            /// <summary>
            /// Enum TWSE for value: TWSE
            /// </summary>
            [EnumMember(Value = "TWSE")]
            TWSE = 25,

            /// <summary>
            /// Enum VSE for value: VSE
            /// </summary>
            [EnumMember(Value = "VSE")]
            VSE = 26,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 27

        }


        /// <summary>
        /// (Required for public company) stock exchange.
        /// </summary>
        /// <value>(Required for public company) stock exchange.</value>
        [DataMember(Name = "stockExchange", EmitDefaultValue = false)]
        public StockExchangeEnum? StockExchange { get; set; }
        /// <summary>
        /// Brand relationship to the CSP
        /// </summary>
        /// <value>Brand relationship to the CSP</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BrandRelationshipEnum
        {
            /// <summary>
            /// Enum BASICACCOUNT for value: BASIC_ACCOUNT
            /// </summary>
            [EnumMember(Value = "BASIC_ACCOUNT")]
            BASICACCOUNT = 1,

            /// <summary>
            /// Enum SMALLACCOUNT for value: SMALL_ACCOUNT
            /// </summary>
            [EnumMember(Value = "SMALL_ACCOUNT")]
            SMALLACCOUNT = 2,

            /// <summary>
            /// Enum MEDIUMACCOUNT for value: MEDIUM_ACCOUNT
            /// </summary>
            [EnumMember(Value = "MEDIUM_ACCOUNT")]
            MEDIUMACCOUNT = 3,

            /// <summary>
            /// Enum LARGEACCOUNT for value: LARGE_ACCOUNT
            /// </summary>
            [EnumMember(Value = "LARGE_ACCOUNT")]
            LARGEACCOUNT = 4,

            /// <summary>
            /// Enum KEYACCOUNT for value: KEY_ACCOUNT
            /// </summary>
            [EnumMember(Value = "KEY_ACCOUNT")]
            KEYACCOUNT = 5

        }


        /// <summary>
        /// Brand relationship to the CSP
        /// </summary>
        /// <value>Brand relationship to the CSP</value>
        [DataMember(Name = "brandRelationship", IsRequired = true, EmitDefaultValue = false)]
        public BrandRelationshipEnum BrandRelationship { get; set; }
        /// <summary>
        /// The type of the Alternative business identifier
        /// </summary>
        /// <value>The type of the Alternative business identifier</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AltBusinessIdTypeEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum DUNS for value: DUNS
            /// </summary>
            [EnumMember(Value = "DUNS")]
            DUNS = 2,

            /// <summary>
            /// Enum GIIN for value: GIIN
            /// </summary>
            [EnumMember(Value = "GIIN")]
            GIIN = 3,

            /// <summary>
            /// Enum LEI for value: LEI
            /// </summary>
            [EnumMember(Value = "LEI")]
            LEI = 4

        }


        /// <summary>
        /// The type of the Alternative business identifier
        /// </summary>
        /// <value>The type of the Alternative business identifier</value>
        [DataMember(Name = "altBusinessIdType", EmitDefaultValue = false)]
        public AltBusinessIdTypeEnum? AltBusinessIdType { get; set; }
        /// <summary>
        /// TCR assessment of the brand identification status.
        /// </summary>
        /// <value>TCR assessment of the brand identification status.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IdentityStatusEnum
        {
            /// <summary>
            /// Enum SELFDECLARED for value: SELF_DECLARED
            /// </summary>
            [EnumMember(Value = "SELF_DECLARED")]
            SELFDECLARED = 1,

            /// <summary>
            /// Enum UNVERIFIED for value: UNVERIFIED
            /// </summary>
            [EnumMember(Value = "UNVERIFIED")]
            UNVERIFIED = 2,

            /// <summary>
            /// Enum VERIFIED for value: VERIFIED
            /// </summary>
            [EnumMember(Value = "VERIFIED")]
            VERIFIED = 3,

            /// <summary>
            /// Enum VETTEDVERIFIED for value: VETTED_VERIFIED
            /// </summary>
            [EnumMember(Value = "VETTED_VERIFIED")]
            VETTEDVERIFIED = 4

        }


        /// <summary>
        /// TCR assessment of the brand identification status.
        /// </summary>
        /// <value>TCR assessment of the brand identification status.</value>
        [DataMember(Name = "identityStatus", IsRequired = true, EmitDefaultValue = false)]
        public IdentityStatusEnum IdentityStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SMSTenDLCBrand" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SMSTenDLCBrand() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SMSTenDLCBrand" /> class.
        /// </summary>
        /// <param name="accountId">ID of the account that created this Queue..</param>
        /// <param name="entityType">Entity type behind the brand. This is the form of business establishment. (required).</param>
        /// <param name="firstName">First or given name. .</param>
        /// <param name="lastName">Last or Surname..</param>
        /// <param name="displayName">Display or marketing name of the brand. (required).</param>
        /// <param name="companyName">(Required for Non-profit/private/public) Legal company name..</param>
        /// <param name="ein">(Required for Non-profit) Government assigned corporate tax ID. EIN is 9-digits in U.S..</param>
        /// <param name="einIssuingCountry">ISO2 2 characters country code. Example: US - United States.</param>
        /// <param name="phone">Valid phone number in e.164 international format. (required).</param>
        /// <param name="street">Street number and name..</param>
        /// <param name="city">City name.</param>
        /// <param name="state">State. Must be 2 letters code for United States..</param>
        /// <param name="postalCode">Postal codes. Use 5 digit zipcode for United States.</param>
        /// <param name="country">ISO2 2 characters country code. Example: US - United States (required).</param>
        /// <param name="email">Valid email address of brand support contact. (required).</param>
        /// <param name="stockSymbol">(Required for public company) stock symbol..</param>
        /// <param name="stockExchange">(Required for public company) stock exchange..</param>
        /// <param name="ipAddress">IP address of the browser requesting to create brand identity..</param>
        /// <param name="website">Brand website URL..</param>
        /// <param name="brandRelationship">Brand relationship to the CSP (required).</param>
        /// <param name="vertical">Vertical or industry segment of the brand. (required).</param>
        /// <param name="altBusinessId">Alternate business identifier such as DUNS, LEI, or GIIN.</param>
        /// <param name="altBusinessIdType">The type of the Alternative business identifier.</param>
        /// <param name="referenceId">Caller supplied brand reference ID. If supplied, the value must be unique across all submitted brands. Can be used to prevent duplicate brand registrations..</param>
        /// <param name="optionalAttributes">Optional brand attributes. Please refer to GET /enum/optionalAttributeNames for dictionary of optional attribute names..</param>
        /// <param name="mock">Test brand. (required).</param>
        /// <param name="identityStatus">TCR assessment of the brand identification status. (required).</param>
        /// <param name="createDate">Unix timestamp when brand was created..</param>
        public SMSTenDLCBrand(string accountId = default(string), EntityTypeEnum entityType = default(EntityTypeEnum), string firstName = default(string), string lastName = default(string), string displayName = default(string), string companyName = default(string), string ein = default(string), string einIssuingCountry = default(string), string phone = default(string), string street = default(string), string city = default(string), string state = default(string), string postalCode = default(string), string country = default(string), string email = default(string), string stockSymbol = default(string), StockExchangeEnum? stockExchange = default(StockExchangeEnum?), string ipAddress = default(string), string website = default(string), BrandRelationshipEnum brandRelationship = default(BrandRelationshipEnum), string vertical = default(string), string altBusinessId = default(string), AltBusinessIdTypeEnum? altBusinessIdType = default(AltBusinessIdTypeEnum?), string referenceId = default(string), Dictionary<string, Object> optionalAttributes = default(Dictionary<string, Object>), bool mock = default(bool), IdentityStatusEnum identityStatus = default(IdentityStatusEnum), DateTime createDate = default(DateTime))
        {
            this.EntityType = entityType;
            // to ensure "displayName" is required (not null)
            if (displayName == null) {
                throw new ArgumentNullException("displayName is a required property for SMSTenDLCBrand and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "phone" is required (not null)
            if (phone == null) {
                throw new ArgumentNullException("phone is a required property for SMSTenDLCBrand and cannot be null");
            }
            this.Phone = phone;
            // to ensure "country" is required (not null)
            if (country == null) {
                throw new ArgumentNullException("country is a required property for SMSTenDLCBrand and cannot be null");
            }
            this.Country = country;
            // to ensure "email" is required (not null)
            if (email == null) {
                throw new ArgumentNullException("email is a required property for SMSTenDLCBrand and cannot be null");
            }
            this.Email = email;
            this.BrandRelationship = brandRelationship;
            // to ensure "vertical" is required (not null)
            if (vertical == null) {
                throw new ArgumentNullException("vertical is a required property for SMSTenDLCBrand and cannot be null");
            }
            this.Vertical = vertical;
            this.Mock = mock;
            this.IdentityStatus = identityStatus;
            this.AccountId = accountId;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.CompanyName = companyName;
            this.Ein = ein;
            this.EinIssuingCountry = einIssuingCountry;
            this.Street = street;
            this.City = city;
            this.State = state;
            this.PostalCode = postalCode;
            this.StockSymbol = stockSymbol;
            this.StockExchange = stockExchange;
            this.IpAddress = ipAddress;
            this.Website = website;
            this.AltBusinessId = altBusinessId;
            this.AltBusinessIdType = altBusinessIdType;
            this.ReferenceId = referenceId;
            this.OptionalAttributes = optionalAttributes;
            this.CreateDate = createDate;
        }

        /// <summary>
        /// ID of the account that created this Queue.
        /// </summary>
        /// <value>ID of the account that created this Queue.</value>
        [DataMember(Name = "accountId", EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// Unique identifier assigned to the csp by the registry.
        /// </summary>
        /// <value>Unique identifier assigned to the csp by the registry.</value>
        [DataMember(Name = "cspId", EmitDefaultValue = false)]
        public string CspId { get; private set; }

        /// <summary>
        /// Returns false as CspId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCspId()
        {
            return false;
        }
        /// <summary>
        /// Unique identifier assigned to the brand by the registry.
        /// </summary>
        /// <value>Unique identifier assigned to the brand by the registry.</value>
        [DataMember(Name = "brandId", EmitDefaultValue = false)]
        public string BrandId { get; private set; }

        /// <summary>
        /// Returns false as BrandId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBrandId()
        {
            return false;
        }
        /// <summary>
        /// First or given name. 
        /// </summary>
        /// <value>First or given name. </value>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last or Surname.
        /// </summary>
        /// <value>Last or Surname.</value>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Display or marketing name of the brand.
        /// </summary>
        /// <value>Display or marketing name of the brand.</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// (Required for Non-profit/private/public) Legal company name.
        /// </summary>
        /// <value>(Required for Non-profit/private/public) Legal company name.</value>
        [DataMember(Name = "companyName", EmitDefaultValue = false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// (Required for Non-profit) Government assigned corporate tax ID. EIN is 9-digits in U.S.
        /// </summary>
        /// <value>(Required for Non-profit) Government assigned corporate tax ID. EIN is 9-digits in U.S.</value>
        [DataMember(Name = "ein", EmitDefaultValue = false)]
        public string Ein { get; set; }

        /// <summary>
        /// ISO2 2 characters country code. Example: US - United States
        /// </summary>
        /// <value>ISO2 2 characters country code. Example: US - United States</value>
        [DataMember(Name = "einIssuingCountry", EmitDefaultValue = false)]
        public string EinIssuingCountry { get; set; }

        /// <summary>
        /// Valid phone number in e.164 international format.
        /// </summary>
        /// <value>Valid phone number in e.164 international format.</value>
        [DataMember(Name = "phone", IsRequired = true, EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// Street number and name.
        /// </summary>
        /// <value>Street number and name.</value>
        [DataMember(Name = "street", EmitDefaultValue = false)]
        public string Street { get; set; }

        /// <summary>
        /// City name
        /// </summary>
        /// <value>City name</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// State. Must be 2 letters code for United States.
        /// </summary>
        /// <value>State. Must be 2 letters code for United States.</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Postal codes. Use 5 digit zipcode for United States
        /// </summary>
        /// <value>Postal codes. Use 5 digit zipcode for United States</value>
        [DataMember(Name = "postalCode", EmitDefaultValue = false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// ISO2 2 characters country code. Example: US - United States
        /// </summary>
        /// <value>ISO2 2 characters country code. Example: US - United States</value>
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Valid email address of brand support contact.
        /// </summary>
        /// <value>Valid email address of brand support contact.</value>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// (Required for public company) stock symbol.
        /// </summary>
        /// <value>(Required for public company) stock symbol.</value>
        [DataMember(Name = "stockSymbol", EmitDefaultValue = false)]
        public string StockSymbol { get; set; }

        /// <summary>
        /// IP address of the browser requesting to create brand identity.
        /// </summary>
        /// <value>IP address of the browser requesting to create brand identity.</value>
        [DataMember(Name = "ipAddress", EmitDefaultValue = false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Brand website URL.
        /// </summary>
        /// <value>Brand website URL.</value>
        [DataMember(Name = "website", EmitDefaultValue = false)]
        public string Website { get; set; }

        /// <summary>
        /// Vertical or industry segment of the brand.
        /// </summary>
        /// <value>Vertical or industry segment of the brand.</value>
        [DataMember(Name = "vertical", IsRequired = true, EmitDefaultValue = false)]
        public string Vertical { get; set; }

        /// <summary>
        /// Alternate business identifier such as DUNS, LEI, or GIIN
        /// </summary>
        /// <value>Alternate business identifier such as DUNS, LEI, or GIIN</value>
        [DataMember(Name = "altBusinessId", EmitDefaultValue = false)]
        public string AltBusinessId { get; set; }

        /// <summary>
        /// Universal EIN of Brand, Read Only.
        /// </summary>
        /// <value>Universal EIN of Brand, Read Only.</value>
        [DataMember(Name = "universalEin", EmitDefaultValue = false)]
        public string UniversalEin { get; private set; }

        /// <summary>
        /// Returns false as UniversalEin should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUniversalEin()
        {
            return false;
        }
        /// <summary>
        /// Caller supplied brand reference ID. If supplied, the value must be unique across all submitted brands. Can be used to prevent duplicate brand registrations.
        /// </summary>
        /// <value>Caller supplied brand reference ID. If supplied, the value must be unique across all submitted brands. Can be used to prevent duplicate brand registrations.</value>
        [DataMember(Name = "referenceId", EmitDefaultValue = false)]
        public string ReferenceId { get; set; }

        /// <summary>
        /// Optional brand attributes. Please refer to GET /enum/optionalAttributeNames for dictionary of optional attribute names.
        /// </summary>
        /// <value>Optional brand attributes. Please refer to GET /enum/optionalAttributeNames for dictionary of optional attribute names.</value>
        [DataMember(Name = "optionalAttributes", EmitDefaultValue = false)]
        public Dictionary<string, Object> OptionalAttributes { get; set; }

        /// <summary>
        /// Test brand.
        /// </summary>
        /// <value>Test brand.</value>
        [DataMember(Name = "mock", IsRequired = true, EmitDefaultValue = true)]
        public bool Mock { get; set; }

        /// <summary>
        /// Unix timestamp when brand was created.
        /// </summary>
        /// <value>Unix timestamp when brand was created.</value>
        [DataMember(Name = "createDate", EmitDefaultValue = false)]
        public DateTime CreateDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SMSTenDLCBrand {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  CspId: ").Append(CspId).Append("\n");
            sb.Append("  BrandId: ").Append(BrandId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  Ein: ").Append(Ein).Append("\n");
            sb.Append("  EinIssuingCountry: ").Append(EinIssuingCountry).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  StockSymbol: ").Append(StockSymbol).Append("\n");
            sb.Append("  StockExchange: ").Append(StockExchange).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  BrandRelationship: ").Append(BrandRelationship).Append("\n");
            sb.Append("  Vertical: ").Append(Vertical).Append("\n");
            sb.Append("  AltBusinessId: ").Append(AltBusinessId).Append("\n");
            sb.Append("  AltBusinessIdType: ").Append(AltBusinessIdType).Append("\n");
            sb.Append("  UniversalEin: ").Append(UniversalEin).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  OptionalAttributes: ").Append(OptionalAttributes).Append("\n");
            sb.Append("  Mock: ").Append(Mock).Append("\n");
            sb.Append("  IdentityStatus: ").Append(IdentityStatus).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the SMSTenDLCBrand instance. 
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public virtual IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            props.Add("accountId", AccountId);          
            props.Add("entityType", EntityType);          
            props.Add("cspId", CspId);          
            props.Add("brandId", BrandId);          
            props.Add("firstName", FirstName);          
            props.Add("lastName", LastName);          
            props.Add("displayName", DisplayName);          
            props.Add("companyName", CompanyName);          
            props.Add("ein", Ein);          
            props.Add("einIssuingCountry", EinIssuingCountry);          
            props.Add("phone", Phone);          
            props.Add("street", Street);          
            props.Add("city", City);          
            props.Add("state", State);          
            props.Add("postalCode", PostalCode);          
            props.Add("country", Country);          
            props.Add("email", Email);          
            props.Add("stockSymbol", StockSymbol);          
            props.Add("stockExchange", StockExchange);          
            props.Add("ipAddress", IpAddress);          
            props.Add("website", Website);          
            props.Add("brandRelationship", BrandRelationship);          
            props.Add("vertical", Vertical);          
            props.Add("altBusinessId", AltBusinessId);          
            props.Add("altBusinessIdType", AltBusinessIdType);          
            props.Add("universalEin", UniversalEin);          
            props.Add("referenceId", ReferenceId);          
            props.Add("optionalAttributes", OptionalAttributes);          
            props.Add("mock", Mock);          
            props.Add("identityStatus", IdentityStatus);          
            props.Add("createDate", CreateDate);          
            return props;
        }
        
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SMSTenDLCBrand);
        }

        /// <summary>
        /// Returns true if SMSTenDLCBrand instances are equal
        /// </summary>
        /// <param name="input">Instance of SMSTenDLCBrand to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SMSTenDLCBrand input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    this.EntityType.Equals(input.EntityType)
                ) && 
                (
                    this.CspId == input.CspId ||
                    (this.CspId != null &&
                    this.CspId.Equals(input.CspId))
                ) && 
                (
                    this.BrandId == input.BrandId ||
                    (this.BrandId != null &&
                    this.BrandId.Equals(input.BrandId))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.Ein == input.Ein ||
                    (this.Ein != null &&
                    this.Ein.Equals(input.Ein))
                ) && 
                (
                    this.EinIssuingCountry == input.EinIssuingCountry ||
                    (this.EinIssuingCountry != null &&
                    this.EinIssuingCountry.Equals(input.EinIssuingCountry))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.StockSymbol == input.StockSymbol ||
                    (this.StockSymbol != null &&
                    this.StockSymbol.Equals(input.StockSymbol))
                ) && 
                (
                    this.StockExchange == input.StockExchange ||
                    this.StockExchange.Equals(input.StockExchange)
                ) && 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                ) && 
                (
                    this.BrandRelationship == input.BrandRelationship ||
                    this.BrandRelationship.Equals(input.BrandRelationship)
                ) && 
                (
                    this.Vertical == input.Vertical ||
                    (this.Vertical != null &&
                    this.Vertical.Equals(input.Vertical))
                ) && 
                (
                    this.AltBusinessId == input.AltBusinessId ||
                    (this.AltBusinessId != null &&
                    this.AltBusinessId.Equals(input.AltBusinessId))
                ) && 
                (
                    this.AltBusinessIdType == input.AltBusinessIdType ||
                    this.AltBusinessIdType.Equals(input.AltBusinessIdType)
                ) && 
                (
                    this.UniversalEin == input.UniversalEin ||
                    (this.UniversalEin != null &&
                    this.UniversalEin.Equals(input.UniversalEin))
                ) && 
                (
                    this.ReferenceId == input.ReferenceId ||
                    (this.ReferenceId != null &&
                    this.ReferenceId.Equals(input.ReferenceId))
                ) && 
                (
                    this.OptionalAttributes == input.OptionalAttributes ||
                    this.OptionalAttributes != null &&
                    input.OptionalAttributes != null &&
                    this.OptionalAttributes.SequenceEqual(input.OptionalAttributes)
                ) && 
                (
                    this.Mock == input.Mock ||
                    this.Mock.Equals(input.Mock)
                ) && 
                (
                    this.IdentityStatus == input.IdentityStatus ||
                    this.IdentityStatus.Equals(input.IdentityStatus)
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EntityType.GetHashCode();
                if (this.CspId != null)
                {
                    hashCode = (hashCode * 59) + this.CspId.GetHashCode();
                }
                if (this.BrandId != null)
                {
                    hashCode = (hashCode * 59) + this.BrandId.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.CompanyName != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyName.GetHashCode();
                }
                if (this.Ein != null)
                {
                    hashCode = (hashCode * 59) + this.Ein.GetHashCode();
                }
                if (this.EinIssuingCountry != null)
                {
                    hashCode = (hashCode * 59) + this.EinIssuingCountry.GetHashCode();
                }
                if (this.Phone != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                }
                if (this.Street != null)
                {
                    hashCode = (hashCode * 59) + this.Street.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.PostalCode != null)
                {
                    hashCode = (hashCode * 59) + this.PostalCode.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.StockSymbol != null)
                {
                    hashCode = (hashCode * 59) + this.StockSymbol.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StockExchange.GetHashCode();
                if (this.IpAddress != null)
                {
                    hashCode = (hashCode * 59) + this.IpAddress.GetHashCode();
                }
                if (this.Website != null)
                {
                    hashCode = (hashCode * 59) + this.Website.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BrandRelationship.GetHashCode();
                if (this.Vertical != null)
                {
                    hashCode = (hashCode * 59) + this.Vertical.GetHashCode();
                }
                if (this.AltBusinessId != null)
                {
                    hashCode = (hashCode * 59) + this.AltBusinessId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AltBusinessIdType.GetHashCode();
                if (this.UniversalEin != null)
                {
                    hashCode = (hashCode * 59) + this.UniversalEin.GetHashCode();
                }
                if (this.ReferenceId != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceId.GetHashCode();
                }
                if (this.OptionalAttributes != null)
                {
                    hashCode = (hashCode * 59) + this.OptionalAttributes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Mock.GetHashCode();
                hashCode = (hashCode * 59) + this.IdentityStatus.GetHashCode();
                if (this.CreateDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreateDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 100.", new [] { "FirstName" });
            }

            // LastName (string) maxLength
            if (this.LastName != null && this.LastName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be less than 100.", new [] { "LastName" });
            }

            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 255.", new [] { "DisplayName" });
            }

            // CompanyName (string) maxLength
            if (this.CompanyName != null && this.CompanyName.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyName, length must be less than 255.", new [] { "CompanyName" });
            }

            // Ein (string) maxLength
            if (this.Ein != null && this.Ein.Length > 21)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Ein, length must be less than 21.", new [] { "Ein" });
            }

            // EinIssuingCountry (string) maxLength
            if (this.EinIssuingCountry != null && this.EinIssuingCountry.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EinIssuingCountry, length must be less than 2.", new [] { "EinIssuingCountry" });
            }

            // Phone (string) maxLength
            if (this.Phone != null && this.Phone.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Phone, length must be less than 20.", new [] { "Phone" });
            }

            // Street (string) maxLength
            if (this.Street != null && this.Street.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Street, length must be less than 100.", new [] { "Street" });
            }

            // City (string) maxLength
            if (this.City != null && this.City.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for City, length must be less than 100.", new [] { "City" });
            }

            // State (string) maxLength
            if (this.State != null && this.State.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for State, length must be less than 20.", new [] { "State" });
            }

            // PostalCode (string) maxLength
            if (this.PostalCode != null && this.PostalCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PostalCode, length must be less than 10.", new [] { "PostalCode" });
            }

            // Country (string) maxLength
            if (this.Country != null && this.Country.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Country, length must be less than 2.", new [] { "Country" });
            }

            // Email (string) maxLength
            if (this.Email != null && this.Email.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 100.", new [] { "Email" });
            }

            // StockSymbol (string) maxLength
            if (this.StockSymbol != null && this.StockSymbol.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StockSymbol, length must be less than 10.", new [] { "StockSymbol" });
            }

            // IpAddress (string) maxLength
            if (this.IpAddress != null && this.IpAddress.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IpAddress, length must be less than 50.", new [] { "IpAddress" });
            }

            // Website (string) maxLength
            if (this.Website != null && this.Website.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Website, length must be less than 100.", new [] { "Website" });
            }

            // Vertical (string) maxLength
            if (this.Vertical != null && this.Vertical.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Vertical, length must be less than 50.", new [] { "Vertical" });
            }

            // AltBusinessId (string) maxLength
            if (this.AltBusinessId != null && this.AltBusinessId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AltBusinessId, length must be less than 50.", new [] { "AltBusinessId" });
            }

            // ReferenceId (string) maxLength
            if (this.ReferenceId != null && this.ReferenceId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReferenceId, length must be less than 50.", new [] { "ReferenceId" });
            }

            yield break;
        }
    }

}
