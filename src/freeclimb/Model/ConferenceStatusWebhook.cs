/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using JsonSubTypes;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// The context or reason why this request is being made. Will be conferenceStatus - A Conference&#39;s status changed and its statusCallbackUrl is being invoked.
    /// </summary>
    [DataContract(Name = "ConferenceStatusWebhook")]
    [JsonConverter(typeof(JsonSubtypes), "RequestType")]
    public partial class ConferenceStatusWebhook : Webhook, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets CallStatus
        /// </summary>
        [DataMember(Name = "callStatus", EmitDefaultValue = true)]
        public CallStatus? CallStatus { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name = "direction", EmitDefaultValue = true)]
        public CallDirection? Direction { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public ConferenceStatus? Status { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConferenceStatusWebhook" /> class.
        /// </summary>
        /// <param name="requestType">Context or reason why this request is being made. Will be conferenceRecordingStatus - The statusCallbackUrl request includes Recording information for a Conference that ended. (default to &quot;ConferenceStatusWebhook&quot;).</param>
        /// <param name="callId">Unique ID for this Call, generated by FreeClimb..</param>
        /// <param name="accountId">Account ID associated with your account..</param>
        /// <param name="from">Phone number of the party that initiated the Call (in E.164 format)..</param>
        /// <param name="to">Phone number provisioned to you and to which this Call is directed (in E.164 format)..</param>
        /// <param name="callStatus">callStatus.</param>
        /// <param name="direction">direction.</param>
        /// <param name="conferenceId">Unique ID of the Conference..</param>
        /// <param name="queueId">This is only populated if the request pertains to a Queue. Otherwise, it is set to null..</param>
        /// <param name="status">status.</param>
        /// <param name="recordingUrl">The URL of the Conference’s recorded audio. Populated only if a Recording exists and the Conference was emptied. Present only if statusCallbackUrl is being invoked..</param>
        /// <param name="recordingId">The unique ID of the Recording from this Conference. Populated only if a Recording exists and the Conference was emptied. Present only if statusCallbackUrl is being invoked..</param>
        /// <param name="recordingDurationSec">The duration of the recorded audio rounded up to the nearest second (in seconds). Populated only if a Recording exists and the Conference was emptied. Present only if statusCallbackUrl is being invoked..</param>
        public ConferenceStatusWebhook(
            string requestType = @"ConferenceStatusWebhook",
            string callId = default(string),
            string accountId = default(string),
            string from = default(string),
            string to = default(string),
            CallStatus? callStatus = default(CallStatus?),
            CallDirection? direction = default(CallDirection?),
            string conferenceId = default(string),
            string queueId = default(string),
            ConferenceStatus? status = default(ConferenceStatus?),
            string recordingUrl = default(string),
            string recordingId = default(string),
            int? recordingDurationSec = default(int?)
        )
            : base()
        {
            base.RequestType = requestType;

            this.CallId = callId;

            this.AccountId = accountId;

            this.From = from;

            this.To = to;

            this.CallStatus = callStatus;

            this.Direction = direction;

            this.ConferenceId = conferenceId;

            this.QueueId = queueId;

            this.Status = status;

            this.RecordingUrl = recordingUrl;

            this.RecordingId = recordingId;

            this.RecordingDurationSec = recordingDurationSec;
        }

        private static readonly JsonSerializerSettings _serializerSettings =
            new JsonSerializerSettings
            {
                // OpenAPI generated types generally hide default constructors.
                ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,
                ContractResolver = new DefaultContractResolver
                {
                    NamingStrategy = new CamelCaseNamingStrategy { OverrideSpecifiedNames = false },
                },
            };

        /// <summary>
        /// Deserializes json payload into instance ConferenceStatusWebhook
        /// </summary>
        /// <param name="jsonPayload"></param>
        /// <returns>instanceof RemoveFromQueueNotificationWebhook</returns>
        public static ConferenceStatusWebhook Deserialize(string jsonPayload)
        {
            return (ConferenceStatusWebhook)
                JsonConvert.DeserializeObject(
                    jsonPayload,
                    typeof(ConferenceStatusWebhook),
                    _serializerSettings
                );
        }

        /// <summary>
        /// Unique ID for this Call, generated by FreeClimb.
        /// </summary>
        /// <value>Unique ID for this Call, generated by FreeClimb.</value>
        [DataMember(Name = "callId", EmitDefaultValue = false)]
        public string CallId { get; set; }

        /// <summary>
        /// Account ID associated with your account.
        /// </summary>
        /// <value>Account ID associated with your account.</value>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Phone number of the party that initiated the Call (in E.164 format).
        /// </summary>
        /// <value>Phone number of the party that initiated the Call (in E.164 format).</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public string From { get; set; }

        /// <summary>
        /// Phone number provisioned to you and to which this Call is directed (in E.164 format).
        /// </summary>
        /// <value>Phone number provisioned to you and to which this Call is directed (in E.164 format).</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        /// Unique ID of the Conference.
        /// </summary>
        /// <value>Unique ID of the Conference.</value>
        [DataMember(Name = "conferenceId", EmitDefaultValue = false)]
        public string ConferenceId { get; set; }

        /// <summary>
        /// This is only populated if the request pertains to a Queue. Otherwise, it is set to null.
        /// </summary>
        /// <value>This is only populated if the request pertains to a Queue. Otherwise, it is set to null.</value>
        [DataMember(Name = "queueId", EmitDefaultValue = true)]
        public string QueueId { get; set; }

        /// <summary>
        /// The URL of the Conference’s recorded audio. Populated only if a Recording exists and the Conference was emptied. Present only if statusCallbackUrl is being invoked.
        /// </summary>
        /// <value>The URL of the Conference’s recorded audio. Populated only if a Recording exists and the Conference was emptied. Present only if statusCallbackUrl is being invoked.</value>
        [DataMember(Name = "recordingUrl", EmitDefaultValue = true)]
        public string RecordingUrl { get; set; }

        /// <summary>
        /// The unique ID of the Recording from this Conference. Populated only if a Recording exists and the Conference was emptied. Present only if statusCallbackUrl is being invoked.
        /// </summary>
        /// <value>The unique ID of the Recording from this Conference. Populated only if a Recording exists and the Conference was emptied. Present only if statusCallbackUrl is being invoked.</value>
        [DataMember(Name = "recordingId", EmitDefaultValue = true)]
        public string RecordingId { get; set; }

        /// <summary>
        /// The duration of the recorded audio rounded up to the nearest second (in seconds). Populated only if a Recording exists and the Conference was emptied. Present only if statusCallbackUrl is being invoked.
        /// </summary>
        /// <value>The duration of the recorded audio rounded up to the nearest second (in seconds). Populated only if a Recording exists and the Conference was emptied. Present only if statusCallbackUrl is being invoked.</value>
        [DataMember(Name = "recordingDurationSec", EmitDefaultValue = true)]
        public int? RecordingDurationSec { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConferenceStatusWebhook {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  RequestType: ").Append(RequestType).Append("\n");
            sb.Append("  CallId: ").Append(CallId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  CallStatus: ").Append(CallStatus).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  ConferenceId: ").Append(ConferenceId).Append("\n");
            sb.Append("  QueueId: ").Append(QueueId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  RecordingUrl: ").Append(RecordingUrl).Append("\n");
            sb.Append("  RecordingId: ").Append(RecordingId).Append("\n");
            sb.Append("  RecordingDurationSec: ").Append(RecordingDurationSec).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented,
                new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }
            );
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the ConferenceStatusWebhook instance.
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public override IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            AddToDictionary(props, "requestType", RequestType);
            AddToDictionary(props, "callId", CallId);
            AddToDictionary(props, "accountId", AccountId);
            AddToDictionary(props, "from", From);
            AddToDictionary(props, "to", To);
            AddToDictionary(props, "callStatus", CallStatus);
            AddToDictionary(props, "direction", Direction);
            AddToDictionary(props, "conferenceId", ConferenceId);
            AddToDictionary(props, "queueId", QueueId);
            AddToDictionary(props, "status", Status);
            AddToDictionary(props, "recordingUrl", RecordingUrl);
            AddToDictionary(props, "recordingId", RecordingId);
            AddToDictionary(props, "recordingDurationSec", RecordingDurationSec);
            return props;
        }

        private IDictionary<string, object> AddToDictionary(
            IDictionary<string, object> dict,
            string key,
            object value
        )
        {
            if (value != null)
            {
                dict.Add(key, value);
            }
            return dict;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }
}
