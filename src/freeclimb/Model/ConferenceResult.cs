/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// ConferenceResult
    /// </summary>
    [DataContract(Name = "ConferenceResult")]
    public partial class ConferenceResult : IValidatableObject
    {
        /// <summary>
        /// Gets or Sets PlayBeep
        /// </summary>
        [DataMember(Name = "playBeep", EmitDefaultValue = true)]
        public PlayBeep? PlayBeep { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public ConferenceStatus? Status { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConferenceResult" /> class.
        /// </summary>
        /// <param name="uri">The URI for this resource, relative to /apiserver..</param>
        /// <param name="dateCreated">The date that this resource was created (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT)..</param>
        /// <param name="dateUpdated">The date that this resource was last updated (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT)..</param>
        /// <param name="revision">Revision count for the resource. This count is set to 1 on creation and is incremented every time it is updated..</param>
        /// <param name="conferenceId">A string that uniquely identifies this Conference resource..</param>
        /// <param name="accountId">ID of the account that created this Conference..</param>
        /// <param name="alias">A description for this Conference..</param>
        /// <param name="playBeep">playBeep.</param>
        /// <param name="record">Flag indicating whether recording is enabled for this Conference..</param>
        /// <param name="status">status.</param>
        /// <param name="waitUrl">URL referencing the audio file to be used as default wait music for the Conference when it is in the populated state..</param>
        /// <param name="actionUrl">URL invoked once the Conference is successfully created..</param>
        /// <param name="statusCallbackUrl">URL to inform that the Conference status has changed..</param>
        /// <param name="subresourceUris">The list of subresources for this Conference. This includes participants and/or recordings..</param>
        public ConferenceResult(
            string uri = default(string),
            string dateCreated = default(string),
            string dateUpdated = default(string),
            int revision = default(int),
            string conferenceId = default(string),
            string accountId = default(string),
            string alias = default(string),
            PlayBeep? playBeep = default(PlayBeep?),
            bool? record = default(bool?),
            ConferenceStatus? status = default(ConferenceStatus?),
            string waitUrl = default(string),
            string actionUrl = default(string),
            string statusCallbackUrl = default(string),
            Object subresourceUris = default(Object)
        )
        {
            this.Uri = uri;

            this.DateCreated = dateCreated;

            this.DateUpdated = dateUpdated;

            this.Revision = revision;

            this.ConferenceId = conferenceId;

            this.AccountId = accountId;

            this.Alias = alias;

            this.PlayBeep = playBeep;

            this.Record = record;

            this.Status = status;

            this.WaitUrl = waitUrl;

            this.ActionUrl = actionUrl;

            this.StatusCallbackUrl = statusCallbackUrl;

            this.SubresourceUris = subresourceUris;
        }

        /// <summary>
        /// The URI for this resource, relative to /apiserver.
        /// </summary>
        /// <value>The URI for this resource, relative to /apiserver.</value>
        [DataMember(Name = "uri", EmitDefaultValue = false)]
        public string Uri { get; set; }

        /// <summary>
        /// The date that this resource was created (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT).
        /// </summary>
        /// <value>The date that this resource was created (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT).</value>
        [DataMember(Name = "dateCreated", EmitDefaultValue = false)]
        public string DateCreated { get; set; }

        /// <summary>
        /// The date that this resource was last updated (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT).
        /// </summary>
        /// <value>The date that this resource was last updated (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT).</value>
        [DataMember(Name = "dateUpdated", EmitDefaultValue = false)]
        public string DateUpdated { get; set; }

        /// <summary>
        /// Revision count for the resource. This count is set to 1 on creation and is incremented every time it is updated.
        /// </summary>
        /// <value>Revision count for the resource. This count is set to 1 on creation and is incremented every time it is updated.</value>
        [DataMember(Name = "revision", EmitDefaultValue = false)]
        public int Revision { get; set; }

        /// <summary>
        /// A string that uniquely identifies this Conference resource.
        /// </summary>
        /// <value>A string that uniquely identifies this Conference resource.</value>
        [DataMember(Name = "conferenceId", EmitDefaultValue = true)]
        public string ConferenceId { get; set; }

        /// <summary>
        /// ID of the account that created this Conference.
        /// </summary>
        /// <value>ID of the account that created this Conference.</value>
        [DataMember(Name = "accountId", EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// A description for this Conference.
        /// </summary>
        /// <value>A description for this Conference.</value>
        [DataMember(Name = "alias", EmitDefaultValue = true)]
        public string Alias { get; set; }

        /// <summary>
        /// Flag indicating whether recording is enabled for this Conference.
        /// </summary>
        /// <value>Flag indicating whether recording is enabled for this Conference.</value>
        [DataMember(Name = "record", EmitDefaultValue = true)]
        public bool? Record { get; set; }

        /// <summary>
        /// URL referencing the audio file to be used as default wait music for the Conference when it is in the populated state.
        /// </summary>
        /// <value>URL referencing the audio file to be used as default wait music for the Conference when it is in the populated state.</value>
        [DataMember(Name = "waitUrl", EmitDefaultValue = true)]
        public string WaitUrl { get; set; }

        /// <summary>
        /// URL invoked once the Conference is successfully created.
        /// </summary>
        /// <value>URL invoked once the Conference is successfully created.</value>
        [DataMember(Name = "actionUrl", EmitDefaultValue = true)]
        public string ActionUrl { get; set; }

        /// <summary>
        /// URL to inform that the Conference status has changed.
        /// </summary>
        /// <value>URL to inform that the Conference status has changed.</value>
        [DataMember(Name = "statusCallbackUrl", EmitDefaultValue = true)]
        public string StatusCallbackUrl { get; set; }

        /// <summary>
        /// The list of subresources for this Conference. This includes participants and/or recordings.
        /// </summary>
        /// <value>The list of subresources for this Conference. This includes participants and/or recordings.</value>
        [DataMember(Name = "subresourceUris", EmitDefaultValue = true)]
        public Object SubresourceUris { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConferenceResult {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateUpdated: ").Append(DateUpdated).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  ConferenceId: ").Append(ConferenceId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  PlayBeep: ").Append(PlayBeep).Append("\n");
            sb.Append("  Record: ").Append(Record).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  WaitUrl: ").Append(WaitUrl).Append("\n");
            sb.Append("  ActionUrl: ").Append(ActionUrl).Append("\n");
            sb.Append("  StatusCallbackUrl: ").Append(StatusCallbackUrl).Append("\n");
            sb.Append("  SubresourceUris: ").Append(SubresourceUris).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented,
                new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }
            );
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the ConferenceResult instance.
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public virtual IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            AddToDictionary(props, "uri", Uri);
            AddToDictionary(props, "dateCreated", DateCreated);
            AddToDictionary(props, "dateUpdated", DateUpdated);
            AddToDictionary(props, "revision", Revision);
            AddToDictionary(props, "conferenceId", ConferenceId);
            AddToDictionary(props, "accountId", AccountId);
            AddToDictionary(props, "alias", Alias);
            AddToDictionary(props, "playBeep", PlayBeep);
            AddToDictionary(props, "record", Record);
            AddToDictionary(props, "status", Status);
            AddToDictionary(props, "waitUrl", WaitUrl);
            AddToDictionary(props, "actionUrl", ActionUrl);
            AddToDictionary(props, "statusCallbackUrl", StatusCallbackUrl);
            AddToDictionary(props, "subresourceUris", SubresourceUris);
            return props;
        }

        private IDictionary<string, object> AddToDictionary(
            IDictionary<string, object> dict,
            string key,
            object value
        )
        {
            if (value != null)
            {
                dict.Add(key, value);
            }
            return dict;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            yield break;
        }
    }
}
