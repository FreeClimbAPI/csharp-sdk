/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// CreateConferenceRequest
    /// </summary>
    [DataContract(Name = "CreateConferenceRequest")]
    public partial class CreateConferenceRequest : IValidatableObject
    {
        /// <summary>
        /// Gets or Sets PlayBeep
        /// </summary>
        [DataMember(Name = "playBeep", EmitDefaultValue = true)]
        public PlayBeep? PlayBeep { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreateConferenceRequest" /> class.
        /// </summary>
        /// <param name="alias">A description for this Conference. Maximum 64 characters..</param>
        /// <param name="playBeep">playBeep.</param>
        /// <param name="record">Setting to &#x60;true&#x60; records the entire Conference..</param>
        /// <param name="waitUrl">If specified, a URL for the audio file that provides custom hold music for the Conference when it is in the populated state. Otherwise, FreeClimb uses a system default audio file. This is always fetched using HTTP GET and is fetched just once &amp;mdash; when the Conference is created..</param>
        /// <param name="statusCallbackUrl">This URL is invoked when the status of the Conference changes. For more information, see **statusCallbackUrl** (below)..</param>
        public CreateConferenceRequest(
            string alias = default(string),
            PlayBeep? playBeep = default(PlayBeep?),
            bool record = default(bool),
            string waitUrl = default(string),
            string statusCallbackUrl = default(string)
        )
        {
            this.Alias = alias;

            this.PlayBeep = playBeep;

            this.Record = record;

            this.WaitUrl = waitUrl;

            this.StatusCallbackUrl = statusCallbackUrl;
        }

        /// <summary>
        /// A description for this Conference. Maximum 64 characters.
        /// </summary>
        /// <value>A description for this Conference. Maximum 64 characters.</value>
        [DataMember(Name = "alias", EmitDefaultValue = false)]
        public string Alias { get; set; }

        /// <summary>
        /// Setting to &#x60;true&#x60; records the entire Conference.
        /// </summary>
        /// <value>Setting to &#x60;true&#x60; records the entire Conference.</value>
        [DataMember(Name = "record", EmitDefaultValue = true)]
        public bool Record { get; set; }

        /// <summary>
        /// If specified, a URL for the audio file that provides custom hold music for the Conference when it is in the populated state. Otherwise, FreeClimb uses a system default audio file. This is always fetched using HTTP GET and is fetched just once &amp;mdash; when the Conference is created.
        /// </summary>
        /// <value>If specified, a URL for the audio file that provides custom hold music for the Conference when it is in the populated state. Otherwise, FreeClimb uses a system default audio file. This is always fetched using HTTP GET and is fetched just once &amp;mdash; when the Conference is created.</value>
        [DataMember(Name = "waitUrl", EmitDefaultValue = false)]
        public string WaitUrl { get; set; }

        /// <summary>
        /// This URL is invoked when the status of the Conference changes. For more information, see **statusCallbackUrl** (below).
        /// </summary>
        /// <value>This URL is invoked when the status of the Conference changes. For more information, see **statusCallbackUrl** (below).</value>
        [DataMember(Name = "statusCallbackUrl", EmitDefaultValue = false)]
        public string StatusCallbackUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateConferenceRequest {\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  PlayBeep: ").Append(PlayBeep).Append("\n");
            sb.Append("  Record: ").Append(Record).Append("\n");
            sb.Append("  WaitUrl: ").Append(WaitUrl).Append("\n");
            sb.Append("  StatusCallbackUrl: ").Append(StatusCallbackUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented
            );
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the CreateConferenceRequest instance.
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public virtual IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            props.Add("alias", Alias);
            props.Add("playBeep", PlayBeep);
            props.Add("record", Record);
            props.Add("waitUrl", WaitUrl);
            props.Add("statusCallbackUrl", StatusCallbackUrl);
            return props;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            yield break;
        }
    }
}
