/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// Details for which features this number may be used.
    /// </summary>
    [DataContract(Name = "Capabilities")]
    public partial class Capabilities : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Capabilities" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Capabilities() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="Capabilities" /> class.
        /// </summary>
        /// <param name="voice">Indicates whether a number can be used for voice calls. Replaces voiceEnabled. (required).</param>
        /// <param name="sms">Indicates whether a number can be used SMS messaging. Replaces smsEnabled. (required).</param>
        /// <param name="tollFree">Indicates that a number is toll-free and will make toll-free calls, and when enabled, toll-free messages. (required).</param>
        /// <param name="tenDLC">Indicates that a number, if sms is true, will be used for 10DLC messaging (required).</param>
        /// <param name="shortCode">Indicates that a number is a short code and can be used for short code messaging (required).</param>
        public Capabilities(
            bool? voice = default(bool?),
            bool? sms = default(bool?),
            bool? tollFree = default(bool?),
            bool? tenDLC = default(bool?),
            bool? shortCode = default(bool?)
        )
        {
            // to ensure "voice" is required (not null)
            if (voice == null)
            {
                throw new ArgumentNullException(
                    "voice is a required property for Capabilities and cannot be null"
                );
            }
            this.Voice = voice;

            // to ensure "sms" is required (not null)
            if (sms == null)
            {
                throw new ArgumentNullException(
                    "sms is a required property for Capabilities and cannot be null"
                );
            }
            this.Sms = sms;

            // to ensure "tollFree" is required (not null)
            if (tollFree == null)
            {
                throw new ArgumentNullException(
                    "tollFree is a required property for Capabilities and cannot be null"
                );
            }
            this.TollFree = tollFree;

            // to ensure "tenDLC" is required (not null)
            if (tenDLC == null)
            {
                throw new ArgumentNullException(
                    "tenDLC is a required property for Capabilities and cannot be null"
                );
            }
            this.TenDLC = tenDLC;

            // to ensure "shortCode" is required (not null)
            if (shortCode == null)
            {
                throw new ArgumentNullException(
                    "shortCode is a required property for Capabilities and cannot be null"
                );
            }
            this.ShortCode = shortCode;
        }

        /// <summary>
        /// Indicates whether a number can be used for voice calls. Replaces voiceEnabled.
        /// </summary>
        /// <value>Indicates whether a number can be used for voice calls. Replaces voiceEnabled.</value>
        [DataMember(Name = "voice", IsRequired = true, EmitDefaultValue = true)]
        public bool? Voice { get; set; }

        /// <summary>
        /// Indicates whether a number can be used SMS messaging. Replaces smsEnabled.
        /// </summary>
        /// <value>Indicates whether a number can be used SMS messaging. Replaces smsEnabled.</value>
        [DataMember(Name = "sms", IsRequired = true, EmitDefaultValue = true)]
        public bool? Sms { get; set; }

        /// <summary>
        /// Indicates that a number is toll-free and will make toll-free calls, and when enabled, toll-free messages.
        /// </summary>
        /// <value>Indicates that a number is toll-free and will make toll-free calls, and when enabled, toll-free messages.</value>
        [DataMember(Name = "tollFree", IsRequired = true, EmitDefaultValue = true)]
        public bool? TollFree { get; set; }

        /// <summary>
        /// Indicates that a number, if sms is true, will be used for 10DLC messaging
        /// </summary>
        /// <value>Indicates that a number, if sms is true, will be used for 10DLC messaging</value>
        [DataMember(Name = "tenDLC", IsRequired = true, EmitDefaultValue = true)]
        public bool? TenDLC { get; set; }

        /// <summary>
        /// Indicates that a number is a short code and can be used for short code messaging
        /// </summary>
        /// <value>Indicates that a number is a short code and can be used for short code messaging</value>
        [DataMember(Name = "shortCode", IsRequired = true, EmitDefaultValue = true)]
        public bool? ShortCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Capabilities {\n");
            sb.Append("  Voice: ").Append(Voice).Append("\n");
            sb.Append("  Sms: ").Append(Sms).Append("\n");
            sb.Append("  TollFree: ").Append(TollFree).Append("\n");
            sb.Append("  TenDLC: ").Append(TenDLC).Append("\n");
            sb.Append("  ShortCode: ").Append(ShortCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented
            );
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the Capabilities instance.
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public virtual IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            props.Add("voice", Voice);
            props.Add("sms", Sms);
            props.Add("tollFree", TollFree);
            props.Add("tenDLC", TenDLC);
            props.Add("shortCode", ShortCode);
            return props;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            yield break;
        }
    }
}
