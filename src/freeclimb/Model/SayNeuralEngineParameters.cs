/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// The parameters to use for the TTS. The complete list of valid values for the parameters attribute is shown below.
    /// </summary>
    [DataContract(Name = "SayNeural_engine_parameters")]
    public partial class SayNeuralEngineParameters : IValidatableObject
    {
        /// <summary>
        /// Gets or Sets TextType
        /// </summary>
        [DataMember(Name = "textType", EmitDefaultValue = false)]
        public SayNeuralTextType? TextType { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="SayNeuralEngineParameters" /> class.
        /// </summary>
        /// <param name="voice">The voice to use for the TTS. The complete list of valid values for the voice attribute is shown below. (default to &quot;Eve&quot;).</param>
        /// <param name="textType">textType.</param>
        /// <param name="language">The language to use for the TTS. The complete list of valid values for the language attribute is shown below. (default to &quot;en-US&quot;).</param>
        public SayNeuralEngineParameters(
            string voice = @"Eve",
            SayNeuralTextType? textType = default(SayNeuralTextType?),
            string language = @"en-US"
        )
        {
            // use default value if no "voice" provided
            this.Voice = voice;

            this.TextType = textType;

            // use default value if no "language" provided
            this.Language = language;
        }

        /// <summary>
        /// The voice to use for the TTS. The complete list of valid values for the voice attribute is shown below.
        /// </summary>
        /// <value>The voice to use for the TTS. The complete list of valid values for the voice attribute is shown below.</value>
        [DataMember(Name = "voice", EmitDefaultValue = false)]
        public string Voice { get; set; }

        /// <summary>
        /// The language to use for the TTS. The complete list of valid values for the language attribute is shown below.
        /// </summary>
        /// <value>The language to use for the TTS. The complete list of valid values for the language attribute is shown below.</value>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SayNeuralEngineParameters {\n");
            sb.Append("  Voice: ").Append(Voice).Append("\n");
            sb.Append("  TextType: ").Append(TextType).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented,
                new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }
            );
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the SayNeuralEngineParameters instance.
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public virtual IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            AddToDictionary(props, "voice", Voice);
            AddToDictionary(props, "textType", TextType);
            AddToDictionary(props, "language", Language);
            return props;
        }

        private IDictionary<string, object> AddToDictionary(
            IDictionary<string, object> dict,
            string key,
            object value
        )
        {
            if (value != null)
            {
                dict.Add(key, value);
            }
            return dict;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            yield break;
        }
    }
}
