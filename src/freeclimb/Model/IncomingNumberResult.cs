/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// IncomingNumberResult
    /// </summary>
    [DataContract(Name = "IncomingNumberResult")]
    public partial class IncomingNumberResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IncomingNumberResult" /> class.
        /// </summary>
        /// <param name="uri">The URI for this resource, relative to /apiserver..</param>
        /// <param name="dateCreated">The date that this resource was created (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT)..</param>
        /// <param name="dateUpdated">The date that this resource was last updated (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT)..</param>
        /// <param name="revision">Revision count for the resource. This count is set to 1 on creation and is incremented every time it is updated..</param>
        /// <param name="capabilities">capabilities.</param>
        /// <param name="campaignId">The campaign ID generated by the campaign registry.</param>
        /// <param name="phoneNumberId">String that uniquely identifies this phone number resource..</param>
        /// <param name="accountId">ID of the account that owns this phone number..</param>
        /// <param name="applicationId">ID of the Application that FreeClimb should contact if a Call or SMS arrives for this phone number or a Call from this number is placed. An incoming phone number is not useful until associated with an applicationId..</param>
        /// <param name="phoneNumber">Phone number in E.164 format..</param>
        /// <param name="alias">Description for this phone number. Typically the conventionally-formatted version of the phone number..</param>
        /// <param name="region">State or province of this phone number..</param>
        /// <param name="country">Country of this phone number..</param>
        /// <param name="offnet">The offnet field is a boolean representing whether the number is offnet registered or not. This field will be rendered only for requests to the IncomingPhone number resource..</param>
        /// <param name="tfn">tfn.</param>
        public IncomingNumberResult(
            string uri = default(string),
            string dateCreated = default(string),
            string dateUpdated = default(string),
            int revision = default(int),
            Capabilities capabilities = default(Capabilities),
            string campaignId = default(string),
            string phoneNumberId = default(string),
            string accountId = default(string),
            string applicationId = default(string),
            string phoneNumber = default(string),
            string alias = default(string),
            string region = default(string),
            string country = default(string),
            bool? offnet = default(bool?),
            TFN tfn = default(TFN)
        )
        {
            this.Uri = uri;

            this.DateCreated = dateCreated;

            this.DateUpdated = dateUpdated;

            this.Revision = revision;

            this.Capabilities = capabilities;

            this.CampaignId = campaignId;

            this.PhoneNumberId = phoneNumberId;

            this.AccountId = accountId;

            this.ApplicationId = applicationId;

            this.PhoneNumber = phoneNumber;

            this.Alias = alias;

            this.Region = region;

            this.Country = country;

            this.Offnet = offnet;

            this.Tfn = tfn;
        }

        /// <summary>
        /// The URI for this resource, relative to /apiserver.
        /// </summary>
        /// <value>The URI for this resource, relative to /apiserver.</value>
        [DataMember(Name = "uri", EmitDefaultValue = false)]
        public string Uri { get; set; }

        /// <summary>
        /// The date that this resource was created (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT).
        /// </summary>
        /// <value>The date that this resource was created (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT).</value>
        [DataMember(Name = "dateCreated", EmitDefaultValue = false)]
        public string DateCreated { get; set; }

        /// <summary>
        /// The date that this resource was last updated (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT).
        /// </summary>
        /// <value>The date that this resource was last updated (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT).</value>
        [DataMember(Name = "dateUpdated", EmitDefaultValue = false)]
        public string DateUpdated { get; set; }

        /// <summary>
        /// Revision count for the resource. This count is set to 1 on creation and is incremented every time it is updated.
        /// </summary>
        /// <value>Revision count for the resource. This count is set to 1 on creation and is incremented every time it is updated.</value>
        [DataMember(Name = "revision", EmitDefaultValue = false)]
        public int Revision { get; set; }

        /// <summary>
        /// Gets or Sets Capabilities
        /// </summary>
        [DataMember(Name = "capabilities", EmitDefaultValue = false)]
        public Capabilities Capabilities { get; set; }

        /// <summary>
        /// The campaign ID generated by the campaign registry
        /// </summary>
        /// <value>The campaign ID generated by the campaign registry</value>
        [DataMember(Name = "campaignId", EmitDefaultValue = true)]
        public string CampaignId { get; set; }

        /// <summary>
        /// String that uniquely identifies this phone number resource.
        /// </summary>
        /// <value>String that uniquely identifies this phone number resource.</value>
        [DataMember(Name = "phoneNumberId", EmitDefaultValue = true)]
        public string PhoneNumberId { get; set; }

        /// <summary>
        /// ID of the account that owns this phone number.
        /// </summary>
        /// <value>ID of the account that owns this phone number.</value>
        [DataMember(Name = "accountId", EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// ID of the Application that FreeClimb should contact if a Call or SMS arrives for this phone number or a Call from this number is placed. An incoming phone number is not useful until associated with an applicationId.
        /// </summary>
        /// <value>ID of the Application that FreeClimb should contact if a Call or SMS arrives for this phone number or a Call from this number is placed. An incoming phone number is not useful until associated with an applicationId.</value>
        [DataMember(Name = "applicationId", EmitDefaultValue = true)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// Phone number in E.164 format.
        /// </summary>
        /// <value>Phone number in E.164 format.</value>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = true)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Description for this phone number. Typically the conventionally-formatted version of the phone number.
        /// </summary>
        /// <value>Description for this phone number. Typically the conventionally-formatted version of the phone number.</value>
        [DataMember(Name = "alias", EmitDefaultValue = true)]
        public string Alias { get; set; }

        /// <summary>
        /// State or province of this phone number.
        /// </summary>
        /// <value>State or province of this phone number.</value>
        [DataMember(Name = "region", EmitDefaultValue = true)]
        public string Region { get; set; }

        /// <summary>
        /// Country of this phone number.
        /// </summary>
        /// <value>Country of this phone number.</value>
        [DataMember(Name = "country", EmitDefaultValue = true)]
        public string Country { get; set; }

        /// <summary>
        /// The offnet field is a boolean representing whether the number is offnet registered or not. This field will be rendered only for requests to the IncomingPhone number resource.
        /// </summary>
        /// <value>The offnet field is a boolean representing whether the number is offnet registered or not. This field will be rendered only for requests to the IncomingPhone number resource.</value>
        [DataMember(Name = "offnet", EmitDefaultValue = true)]
        public bool? Offnet { get; set; }

        /// <summary>
        /// Gets or Sets Tfn
        /// </summary>
        [DataMember(Name = "tfn", EmitDefaultValue = false)]
        public TFN Tfn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IncomingNumberResult {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateUpdated: ").Append(DateUpdated).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  PhoneNumberId: ").Append(PhoneNumberId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Offnet: ").Append(Offnet).Append("\n");
            sb.Append("  Tfn: ").Append(Tfn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented,
                new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }
            );
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the IncomingNumberResult instance.
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public virtual IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            AddToDictionary(props, "uri", Uri);
            AddToDictionary(props, "dateCreated", DateCreated);
            AddToDictionary(props, "dateUpdated", DateUpdated);
            AddToDictionary(props, "revision", Revision);
            AddToDictionary(props, "capabilities", Capabilities);
            AddToDictionary(props, "campaignId", CampaignId);
            AddToDictionary(props, "phoneNumberId", PhoneNumberId);
            AddToDictionary(props, "accountId", AccountId);
            AddToDictionary(props, "applicationId", ApplicationId);
            AddToDictionary(props, "phoneNumber", PhoneNumber);
            AddToDictionary(props, "alias", Alias);
            AddToDictionary(props, "region", Region);
            AddToDictionary(props, "country", Country);
            AddToDictionary(props, "offnet", Offnet);
            AddToDictionary(props, "tfn", Tfn);
            return props;
        }

        private IDictionary<string, object> AddToDictionary(
            IDictionary<string, object> dict,
            string key,
            object value
        )
        {
            if (value != null)
            {
                dict.Add(key, value);
            }
            return dict;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            yield break;
        }
    }
}
