/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// SMSTenDLCPartnerCampaignBrand
    /// </summary>
    [DataContract(Name = "SMSTenDLCPartnerCampaignBrand")]
    public partial class SMSTenDLCPartnerCampaignBrand : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SMSTenDLCPartnerCampaignBrand" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SMSTenDLCPartnerCampaignBrand() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="SMSTenDLCPartnerCampaignBrand" /> class.
        /// </summary>
        /// <param name="accountId">ID of the account that created this Queue..</param>
        /// <param name="firstName">First or given name. .</param>
        /// <param name="lastName">Last or Surname..</param>
        /// <param name="displayName">Display or marketing name of the brand..</param>
        /// <param name="companyName">(Required for Non-profit/private/public) Legal company name..</param>
        /// <param name="phone">Valid phone number in e.164 international format. (required).</param>
        /// <param name="email">Valid email address of brand support contact. (required).</param>
        /// <param name="website">Brand website URL..</param>
        /// <param name="optionalAttributes">Optional brand attributes. Please refer to GET /enum/optionalAttributeNames for dictionary of optional attribute names..</param>
        /// <param name="evpVettingScore">External vetting score..</param>
        public SMSTenDLCPartnerCampaignBrand(
            string accountId = default(string),
            string firstName = default(string),
            string lastName = default(string),
            string displayName = default(string),
            string companyName = default(string),
            string phone = default(string),
            string email = default(string),
            string website = default(string),
            Dictionary<string, Object> optionalAttributes = default(Dictionary<string, Object>),
            int evpVettingScore = default(int)
        )
        {
            // to ensure "phone" is required (not null)
            if (phone == null)
            {
                throw new ArgumentNullException(
                    "phone is a required property for SMSTenDLCPartnerCampaignBrand and cannot be null"
                );
            }
            this.Phone = phone;

            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException(
                    "email is a required property for SMSTenDLCPartnerCampaignBrand and cannot be null"
                );
            }
            this.Email = email;

            this.AccountId = accountId;

            this.FirstName = firstName;

            this.LastName = lastName;

            this.DisplayName = displayName;

            this.CompanyName = companyName;

            this.Website = website;

            this.OptionalAttributes = optionalAttributes;

            this.EvpVettingScore = evpVettingScore;
        }

        /// <summary>
        /// ID of the account that created this Queue.
        /// </summary>
        /// <value>ID of the account that created this Queue.</value>
        [DataMember(Name = "accountId", EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// Unique identifier assigned to the brand by the registry.
        /// </summary>
        /// <value>Unique identifier assigned to the brand by the registry.</value>
        [DataMember(Name = "brandId", EmitDefaultValue = false)]
        public string BrandId { get; private set; }

        /// <summary>
        /// Returns false as BrandId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBrandId()
        {
            return false;
        }

        /// <summary>
        /// First or given name.
        /// </summary>
        /// <value>First or given name. </value>
        /*
        <example>John</example>
        */
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last or Surname.
        /// </summary>
        /// <value>Last or Surname.</value>
        /*
        <example>Doe</example>
        */
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Display or marketing name of the brand.
        /// </summary>
        /// <value>Display or marketing name of the brand.</value>
        /*
        <example>ABC Mobile</example>
        */
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// (Required for Non-profit/private/public) Legal company name.
        /// </summary>
        /// <value>(Required for Non-profit/private/public) Legal company name.</value>
        /*
        <example>ABC Inc.</example>
        */
        [DataMember(Name = "companyName", EmitDefaultValue = false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Valid phone number in e.164 international format.
        /// </summary>
        /// <value>Valid phone number in e.164 international format.</value>
        /*
        <example>+12024567890</example>
        */
        [DataMember(Name = "phone", IsRequired = true, EmitDefaultValue = true)]
        public string Phone { get; set; }

        /// <summary>
        /// Valid email address of brand support contact.
        /// </summary>
        /// <value>Valid email address of brand support contact.</value>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Brand website URL.
        /// </summary>
        /// <value>Brand website URL.</value>
        /*
        <example>http://www.abcmobile.com</example>
        */
        [DataMember(Name = "website", EmitDefaultValue = false)]
        public string Website { get; set; }

        /// <summary>
        /// Optional brand attributes. Please refer to GET /enum/optionalAttributeNames for dictionary of optional attribute names.
        /// </summary>
        /// <value>Optional brand attributes. Please refer to GET /enum/optionalAttributeNames for dictionary of optional attribute names.</value>
        [DataMember(Name = "optionalAttributes", EmitDefaultValue = false)]
        public Dictionary<string, Object> OptionalAttributes { get; set; }

        /// <summary>
        /// External vetting score.
        /// </summary>
        /// <value>External vetting score.</value>
        [DataMember(Name = "evpVettingScore", EmitDefaultValue = false)]
        public int EvpVettingScore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SMSTenDLCPartnerCampaignBrand {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  BrandId: ").Append(BrandId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  OptionalAttributes: ").Append(OptionalAttributes).Append("\n");
            sb.Append("  EvpVettingScore: ").Append(EvpVettingScore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented,
                new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }
            );
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the SMSTenDLCPartnerCampaignBrand instance.
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public virtual IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            props.Add("accountId", AccountId);
            props.Add("brandId", BrandId);
            props.Add("firstName", FirstName);
            props.Add("lastName", LastName);
            props.Add("displayName", DisplayName);
            props.Add("companyName", CompanyName);
            props.Add("phone", Phone);
            props.Add("email", Email);
            props.Add("website", Website);
            props.Add("optionalAttributes", OptionalAttributes);
            props.Add("evpVettingScore", EvpVettingScore);
            return props;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 100)
            {
                yield return new ValidationResult(
                    "Invalid value for FirstName, length must be less than 100.",
                    new[] { "FirstName" }
                );
            }

            // LastName (string) maxLength
            if (this.LastName != null && this.LastName.Length > 100)
            {
                yield return new ValidationResult(
                    "Invalid value for LastName, length must be less than 100.",
                    new[] { "LastName" }
                );
            }

            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 255)
            {
                yield return new ValidationResult(
                    "Invalid value for DisplayName, length must be less than 255.",
                    new[] { "DisplayName" }
                );
            }

            // CompanyName (string) maxLength
            if (this.CompanyName != null && this.CompanyName.Length > 255)
            {
                yield return new ValidationResult(
                    "Invalid value for CompanyName, length must be less than 255.",
                    new[] { "CompanyName" }
                );
            }

            // Phone (string) maxLength
            if (this.Phone != null && this.Phone.Length > 20)
            {
                yield return new ValidationResult(
                    "Invalid value for Phone, length must be less than 20.",
                    new[] { "Phone" }
                );
            }

            // Email (string) maxLength
            if (this.Email != null && this.Email.Length > 100)
            {
                yield return new ValidationResult(
                    "Invalid value for Email, length must be less than 100.",
                    new[] { "Email" }
                );
            }

            // Website (string) maxLength
            if (this.Website != null && this.Website.Length > 100)
            {
                yield return new ValidationResult(
                    "Invalid value for Website, length must be less than 100.",
                    new[] { "Website" }
                );
            }

            yield break;
        }
    }
}
