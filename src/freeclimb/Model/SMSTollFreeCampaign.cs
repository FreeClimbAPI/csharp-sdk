/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;
using freeclimb.Enums;

namespace freeclimb.Model
{
    /// <summary>
    /// SMSTollFreeCampaign
    /// </summary>
    [DataContract(Name = "SMSTollFreeCampaign")]
    public partial class SMSTollFreeCampaign : IEquatable<SMSTollFreeCampaign>, IValidatableObject
    {
        /// <summary>
        /// Current toll-free campaign registration status.Possible values: UNREGISTERED,INITIATED,PENDING,DECLINED,REGISTERED. A newly created campaign defaults to INITIATED status. 
        /// </summary>
        /// <value>Current toll-free campaign registration status.Possible values: UNREGISTERED,INITIATED,PENDING,DECLINED,REGISTERED. A newly created campaign defaults to INITIATED status. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RegistrationStatusEnum
        {
            /// <summary>
            /// Enum UNREGISTERED for value: UNREGISTERED
            /// </summary>
            [EnumMember(Value = "UNREGISTERED")]
            UNREGISTERED = 1,

            /// <summary>
            /// Enum INITIATED for value: INITIATED
            /// </summary>
            [EnumMember(Value = "INITIATED")]
            INITIATED = 2,

            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 3,

            /// <summary>
            /// Enum DECLINED for value: DECLINED
            /// </summary>
            [EnumMember(Value = "DECLINED")]
            DECLINED = 4,

            /// <summary>
            /// Enum REGISTERED for value: REGISTERED
            /// </summary>
            [EnumMember(Value = "REGISTERED")]
            REGISTERED = 5

        }


        /// <summary>
        /// Current toll-free campaign registration status.Possible values: UNREGISTERED,INITIATED,PENDING,DECLINED,REGISTERED. A newly created campaign defaults to INITIATED status. 
        /// </summary>
        /// <value>Current toll-free campaign registration status.Possible values: UNREGISTERED,INITIATED,PENDING,DECLINED,REGISTERED. A newly created campaign defaults to INITIATED status. </value>
        [DataMember(Name = "registrationStatus", IsRequired = true, EmitDefaultValue = false)]
        public RegistrationStatusEnum RegistrationStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SMSTollFreeCampaign" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SMSTollFreeCampaign() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SMSTollFreeCampaign" /> class.
        /// </summary>
        /// <param name="accountId">ID of the account that created this toll-free campaign (required).</param>
        /// <param name="campaignId">Alphanumeric identifier used by the platform to identify this toll-free campaign (required).</param>
        /// <param name="useCase">useCase (required).</param>
        /// <param name="registrationStatus">Current toll-free campaign registration status.Possible values: UNREGISTERED,INITIATED,PENDING,DECLINED,REGISTERED. A newly created campaign defaults to INITIATED status.  (required).</param>
        /// <param name="dateCreated">dateCreated (required).</param>
        /// <param name="dateUpdated">dateUpdated (required).</param>
        /// <param name="revision">revision (required).</param>
        public SMSTollFreeCampaign(string accountId = default(string), string campaignId = default(string), string useCase = default(string), RegistrationStatusEnum registrationStatus = default(RegistrationStatusEnum), string dateCreated = default(string), string dateUpdated = default(string), int revision = default(int))
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null) {
                throw new ArgumentNullException("accountId is a required property for SMSTollFreeCampaign and cannot be null");
            }
            this.AccountId = accountId;
            // to ensure "campaignId" is required (not null)
            if (campaignId == null) {
                throw new ArgumentNullException("campaignId is a required property for SMSTollFreeCampaign and cannot be null");
            }
            this.CampaignId = campaignId;
            // to ensure "useCase" is required (not null)
            if (useCase == null) {
                throw new ArgumentNullException("useCase is a required property for SMSTollFreeCampaign and cannot be null");
            }
            this.UseCase = useCase;
            this.RegistrationStatus = registrationStatus;
            // to ensure "dateCreated" is required (not null)
            if (dateCreated == null) {
                throw new ArgumentNullException("dateCreated is a required property for SMSTollFreeCampaign and cannot be null");
            }
            this.DateCreated = dateCreated;
            // to ensure "dateUpdated" is required (not null)
            if (dateUpdated == null) {
                throw new ArgumentNullException("dateUpdated is a required property for SMSTollFreeCampaign and cannot be null");
            }
            this.DateUpdated = dateUpdated;
            this.Revision = revision;
        }

        /// <summary>
        /// ID of the account that created this toll-free campaign
        /// </summary>
        /// <value>ID of the account that created this toll-free campaign</value>
        [DataMember(Name = "accountId", IsRequired = true, EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// Alphanumeric identifier used by the platform to identify this toll-free campaign
        /// </summary>
        /// <value>Alphanumeric identifier used by the platform to identify this toll-free campaign</value>
        [DataMember(Name = "campaignId", IsRequired = true, EmitDefaultValue = false)]
        public string CampaignId { get; set; }

        /// <summary>
        /// Gets or Sets UseCase
        /// </summary>
        [DataMember(Name = "useCase", IsRequired = true, EmitDefaultValue = false)]
        public string UseCase { get; set; }

        /// <summary>
        /// Gets or Sets DateCreated
        /// </summary>
        [DataMember(Name = "dateCreated", IsRequired = true, EmitDefaultValue = false)]
        public string DateCreated { get; set; }

        /// <summary>
        /// Gets or Sets DateUpdated
        /// </summary>
        [DataMember(Name = "dateUpdated", IsRequired = true, EmitDefaultValue = false)]
        public string DateUpdated { get; set; }

        /// <summary>
        /// Gets or Sets Revision
        /// </summary>
        [DataMember(Name = "revision", IsRequired = true, EmitDefaultValue = false)]
        public int Revision { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SMSTollFreeCampaign {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  UseCase: ").Append(UseCase).Append("\n");
            sb.Append("  RegistrationStatus: ").Append(RegistrationStatus).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateUpdated: ").Append(DateUpdated).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the SMSTollFreeCampaign instance. 
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public virtual IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            props.Add("accountId", AccountId);          
            props.Add("campaignId", CampaignId);          
            props.Add("useCase", UseCase);          
            props.Add("registrationStatus", RegistrationStatus);          
            props.Add("dateCreated", DateCreated);          
            props.Add("dateUpdated", DateUpdated);          
            props.Add("revision", Revision);          
            return props;
        }
        
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SMSTollFreeCampaign);
        }

        /// <summary>
        /// Returns true if SMSTollFreeCampaign instances are equal
        /// </summary>
        /// <param name="input">Instance of SMSTollFreeCampaign to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SMSTollFreeCampaign input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.CampaignId == input.CampaignId ||
                    (this.CampaignId != null &&
                    this.CampaignId.Equals(input.CampaignId))
                ) && 
                (
                    this.UseCase == input.UseCase ||
                    (this.UseCase != null &&
                    this.UseCase.Equals(input.UseCase))
                ) && 
                (
                    this.RegistrationStatus == input.RegistrationStatus ||
                    this.RegistrationStatus.Equals(input.RegistrationStatus)
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.DateUpdated == input.DateUpdated ||
                    (this.DateUpdated != null &&
                    this.DateUpdated.Equals(input.DateUpdated))
                ) && 
                (
                    this.Revision == input.Revision ||
                    this.Revision.Equals(input.Revision)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.CampaignId != null)
                {
                    hashCode = (hashCode * 59) + this.CampaignId.GetHashCode();
                }
                if (this.UseCase != null)
                {
                    hashCode = (hashCode * 59) + this.UseCase.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RegistrationStatus.GetHashCode();
                if (this.DateCreated != null)
                {
                    hashCode = (hashCode * 59) + this.DateCreated.GetHashCode();
                }
                if (this.DateUpdated != null)
                {
                    hashCode = (hashCode * 59) + this.DateUpdated.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Revision.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
