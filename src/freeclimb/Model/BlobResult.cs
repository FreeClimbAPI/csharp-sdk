/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// BlobResult
    /// </summary>
    [DataContract(Name = "BlobResult")]
    public partial class BlobResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BlobResult" /> class.
        /// </summary>
        /// <param name="blobId">Identifier which can be used to reference this blob in future interations..</param>
        /// <param name="accountId">accountId.</param>
        /// <param name="alias">Custom identifier for this blob that is unique for the owning account. It will be set to the blobId by default if not provided in the creation request..</param>
        /// <param name="revision">revision.</param>
        /// <param name="dateCreated">An RFC3339 timestamp with millisecond resolution. It represents the time this blob was created..</param>
        /// <param name="dateUpdated">An RFC3339 timestamp with millisecond resolution. It represents the time this blob was last modified, which at creation will always equal dateCreated..</param>
        /// <param name="expiresAt">An RFC3339 timestamp with millisecond resolution. It represents the time at which this blob will expire and self delete..</param>
        /// <param name="blob">Blob content.</param>
        public BlobResult(
            string blobId = default(string),
            string accountId = default(string),
            string alias = default(string),
            int revision = default(int),
            DateTime dateCreated = default(DateTime),
            DateTime dateUpdated = default(DateTime),
            DateTime expiresAt = default(DateTime),
            Object blob = default(Object)
        )
        {
            this.BlobId = blobId;

            this.AccountId = accountId;

            this.Alias = alias;

            this.Revision = revision;

            this.DateCreated = dateCreated;

            this.DateUpdated = dateUpdated;

            this.ExpiresAt = expiresAt;

            this.Blob = blob;
        }

        /// <summary>
        /// Identifier which can be used to reference this blob in future interations.
        /// </summary>
        /// <value>Identifier which can be used to reference this blob in future interations.</value>
        /*
        <example>BL88615a9b4ca7e9aad57d9057773fc74268b9caf7</example>
        */
        [DataMember(Name = "blobId", EmitDefaultValue = false)]
        public string BlobId { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        /*
        <example>AC0534faec6b32da45f36166674d65b3903f784141</example>
        */
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Custom identifier for this blob that is unique for the owning account. It will be set to the blobId by default if not provided in the creation request.
        /// </summary>
        /// <value>Custom identifier for this blob that is unique for the owning account. It will be set to the blobId by default if not provided in the creation request.</value>
        [DataMember(Name = "alias", EmitDefaultValue = false)]
        public string Alias { get; set; }

        /// <summary>
        /// Gets or Sets Revision
        /// </summary>
        [DataMember(Name = "revision", EmitDefaultValue = false)]
        public int Revision { get; set; }

        /// <summary>
        /// An RFC3339 timestamp with millisecond resolution. It represents the time this blob was created.
        /// </summary>
        /// <value>An RFC3339 timestamp with millisecond resolution. It represents the time this blob was created.</value>
        [DataMember(Name = "dateCreated", EmitDefaultValue = false)]
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// An RFC3339 timestamp with millisecond resolution. It represents the time this blob was last modified, which at creation will always equal dateCreated.
        /// </summary>
        /// <value>An RFC3339 timestamp with millisecond resolution. It represents the time this blob was last modified, which at creation will always equal dateCreated.</value>
        [DataMember(Name = "dateUpdated", EmitDefaultValue = false)]
        public DateTime DateUpdated { get; set; }

        /// <summary>
        /// An RFC3339 timestamp with millisecond resolution. It represents the time at which this blob will expire and self delete.
        /// </summary>
        /// <value>An RFC3339 timestamp with millisecond resolution. It represents the time at which this blob will expire and self delete.</value>
        [DataMember(Name = "expiresAt", EmitDefaultValue = false)]
        public DateTime ExpiresAt { get; set; }

        /// <summary>
        /// Blob content
        /// </summary>
        /// <value>Blob content</value>
        [DataMember(Name = "blob", EmitDefaultValue = false)]
        public Object Blob { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BlobResult {\n");
            sb.Append("  BlobId: ").Append(BlobId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateUpdated: ").Append(DateUpdated).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Blob: ").Append(Blob).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented,
                new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }
            );
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the BlobResult instance.
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public virtual IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            AddToDictionary(props, "blobId", BlobId);
            AddToDictionary(props, "accountId", AccountId);
            AddToDictionary(props, "alias", Alias);
            AddToDictionary(props, "revision", Revision);
            AddToDictionary(props, "dateCreated", DateCreated);
            AddToDictionary(props, "dateUpdated", DateUpdated);
            AddToDictionary(props, "expiresAt", ExpiresAt);
            AddToDictionary(props, "blob", Blob);
            return props;
        }

        private IDictionary<string, object> AddToDictionary(
            IDictionary<string, object> dict,
            string key,
            object value
        )
        {
            if (value != null)
            {
                dict.Add(key, value);
            }
            return dict;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            if (this.BlobId != null)
            {
                // BlobId (string) pattern
                Regex regexBlobId = new Regex(@"BL[0-9a-fA-F]{40}", RegexOptions.CultureInvariant);
                if (!regexBlobId.Match(this.BlobId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult(
                        "Invalid value for BlobId, must match a pattern of " + regexBlobId,
                        new[] { "BlobId" }
                    );
                }
            }

            if (this.AccountId != null)
            {
                // AccountId (string) pattern
                Regex regexAccountId = new Regex(
                    @"AC[0-9a-fA-F]{40}",
                    RegexOptions.CultureInvariant
                );
                if (!regexAccountId.Match(this.AccountId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult(
                        "Invalid value for AccountId, must match a pattern of " + regexAccountId,
                        new[] { "AccountId" }
                    );
                }
            }

            // Alias (string) maxLength
            if (this.Alias != null && this.Alias.Length > 64)
            {
                yield return new ValidationResult(
                    "Invalid value for Alias, length must be less than 64.",
                    new[] { "Alias" }
                );
            }

            yield break;
        }
    }
}
