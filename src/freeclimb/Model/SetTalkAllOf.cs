/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// SetTalkAllOf
    /// </summary>
    [DataContract(Name = "SetTalk_allOf")]
    public partial class SetTalkAllOf : IEquatable<SetTalkAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetTalkAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SetTalkAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SetTalkAllOf" /> class.
        /// </summary>
        /// <param name="callId">ID of the call leg that is to be muted or unmuted. The Call must be in a Conference or an error will be triggered. (required).</param>
        /// <param name="talk">Specifying &#x60;false&#x60; mutes the Participant..</param>
        public SetTalkAllOf(string callId = default(string), bool talk = default(bool))
        {
            // to ensure "callId" is required (not null)
            if (callId == null) {
                throw new ArgumentNullException("callId is a required property for SetTalkAllOf and cannot be null");
            }
            this.CallId = callId;
            this.Talk = talk;
        }

        /// <summary>
        /// ID of the call leg that is to be muted or unmuted. The Call must be in a Conference or an error will be triggered.
        /// </summary>
        /// <value>ID of the call leg that is to be muted or unmuted. The Call must be in a Conference or an error will be triggered.</value>
        [DataMember(Name = "callId", IsRequired = true, EmitDefaultValue = false)]
        public string CallId { get; set; }

        /// <summary>
        /// Specifying &#x60;false&#x60; mutes the Participant.
        /// </summary>
        /// <value>Specifying &#x60;false&#x60; mutes the Participant.</value>
        [DataMember(Name = "talk", EmitDefaultValue = true)]
        public bool Talk { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SetTalkAllOf {\n");
            sb.Append("  CallId: ").Append(CallId).Append("\n");
            sb.Append("  Talk: ").Append(Talk).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetTalkAllOf);
        }

        /// <summary>
        /// Returns true if SetTalkAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of SetTalkAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetTalkAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CallId == input.CallId ||
                    (this.CallId != null &&
                    this.CallId.Equals(input.CallId))
                ) && 
                (
                    this.Talk == input.Talk ||
                    this.Talk.Equals(input.Talk)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallId != null)
                {
                    hashCode = (hashCode * 59) + this.CallId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Talk.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
