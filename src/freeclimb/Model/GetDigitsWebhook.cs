/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using JsonSubTypes;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// A POST request with the following fields will be sent to the actionUrl provided in your GetDigits command.
    /// </summary>
    [DataContract(Name = "GetDigitsWebhook")]
    [JsonConverter(typeof(JsonSubtypes), "RequestType")]
    public partial class GetDigitsWebhook : Webhook, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets CallStatus
        /// </summary>
        [DataMember(Name = "callStatus", EmitDefaultValue = true)]
        public CallStatus? CallStatus { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name = "direction", EmitDefaultValue = true)]
        public CallDirection? Direction { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public GetDigitsReason? Reason { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetDigitsWebhook" /> class.
        /// </summary>
        /// <param name="requestType">Context or reason why this request is being made. Will be getDigits - The GetDigits command has completed and its actionUrl is being invoked. (default to &quot;GetDigitsWebhook&quot;).</param>
        /// <param name="callId">Unique ID for this Call, generated by FreeClimb..</param>
        /// <param name="accountId">Account ID associated with your account..</param>
        /// <param name="from">Phone number of the party that initiated the Call (in E.164 format)..</param>
        /// <param name="to">Phone number provisioned to you and to which this Call is directed (in E.164 format)..</param>
        /// <param name="callStatus">callStatus.</param>
        /// <param name="direction">direction.</param>
        /// <param name="conferenceId">Unique ID of the Conference..</param>
        /// <param name="queueId">This is only populated if the request pertains to a Queue. Otherwise, it is set to null..</param>
        /// <param name="digits">tring of digits entered by the Caller, excluding the terminating digit (if used). The string of digits will be replaced by &#39;xxxxx&#39; when privacyMode is set to true.</param>
        /// <param name="reason">reason.</param>
        /// <param name="parentCallId">ID of the Call that created this leg (child call)..</param>
        public GetDigitsWebhook(
            string requestType = @"GetDigitsWebhook",
            string callId = default(string),
            string accountId = default(string),
            string from = default(string),
            string to = default(string),
            CallStatus? callStatus = default(CallStatus?),
            CallDirection? direction = default(CallDirection?),
            string conferenceId = default(string),
            string queueId = default(string),
            string digits = default(string),
            GetDigitsReason? reason = default(GetDigitsReason?),
            string parentCallId = default(string)
        )
            : base()
        {
            base.RequestType = requestType;

            this.CallId = callId;

            this.AccountId = accountId;

            this.From = from;

            this.To = to;

            this.CallStatus = callStatus;

            this.Direction = direction;

            this.ConferenceId = conferenceId;

            this.QueueId = queueId;

            this.Digits = digits;

            this.Reason = reason;

            this.ParentCallId = parentCallId;
        }

        private static readonly JsonSerializerSettings _serializerSettings =
            new JsonSerializerSettings
            {
                // OpenAPI generated types generally hide default constructors.
                ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,
                ContractResolver = new DefaultContractResolver
                {
                    NamingStrategy = new CamelCaseNamingStrategy { OverrideSpecifiedNames = false },
                },
            };

        /// <summary>
        /// Deserializes json payload into instance GetDigitsWebhook
        /// </summary>
        /// <param name="jsonPayload"></param>
        /// <returns>instanceof RemoveFromQueueNotificationWebhook</returns>
        public static GetDigitsWebhook Deserialize(string jsonPayload)
        {
            return (GetDigitsWebhook)
                JsonConvert.DeserializeObject(
                    jsonPayload,
                    typeof(GetDigitsWebhook),
                    _serializerSettings
                );
        }

        /// <summary>
        /// Unique ID for this Call, generated by FreeClimb.
        /// </summary>
        /// <value>Unique ID for this Call, generated by FreeClimb.</value>
        [DataMember(Name = "callId", EmitDefaultValue = false)]
        public string CallId { get; set; }

        /// <summary>
        /// Account ID associated with your account.
        /// </summary>
        /// <value>Account ID associated with your account.</value>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Phone number of the party that initiated the Call (in E.164 format).
        /// </summary>
        /// <value>Phone number of the party that initiated the Call (in E.164 format).</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public string From { get; set; }

        /// <summary>
        /// Phone number provisioned to you and to which this Call is directed (in E.164 format).
        /// </summary>
        /// <value>Phone number provisioned to you and to which this Call is directed (in E.164 format).</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        /// Unique ID of the Conference.
        /// </summary>
        /// <value>Unique ID of the Conference.</value>
        [DataMember(Name = "conferenceId", EmitDefaultValue = false)]
        public string ConferenceId { get; set; }

        /// <summary>
        /// This is only populated if the request pertains to a Queue. Otherwise, it is set to null.
        /// </summary>
        /// <value>This is only populated if the request pertains to a Queue. Otherwise, it is set to null.</value>
        [DataMember(Name = "queueId", EmitDefaultValue = true)]
        public string QueueId { get; set; }

        /// <summary>
        /// tring of digits entered by the Caller, excluding the terminating digit (if used). The string of digits will be replaced by &#39;xxxxx&#39; when privacyMode is set to true
        /// </summary>
        /// <value>tring of digits entered by the Caller, excluding the terminating digit (if used). The string of digits will be replaced by &#39;xxxxx&#39; when privacyMode is set to true</value>
        [DataMember(Name = "digits", EmitDefaultValue = false)]
        public string Digits { get; set; }

        /// <summary>
        /// ID of the Call that created this leg (child call).
        /// </summary>
        /// <value>ID of the Call that created this leg (child call).</value>
        [DataMember(Name = "parentCallId", EmitDefaultValue = false)]
        public string ParentCallId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetDigitsWebhook {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  RequestType: ").Append(RequestType).Append("\n");
            sb.Append("  CallId: ").Append(CallId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  CallStatus: ").Append(CallStatus).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  ConferenceId: ").Append(ConferenceId).Append("\n");
            sb.Append("  QueueId: ").Append(QueueId).Append("\n");
            sb.Append("  Digits: ").Append(Digits).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  ParentCallId: ").Append(ParentCallId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented,
                new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }
            );
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the GetDigitsWebhook instance.
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public override IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            AddToDictionary(props, "requestType", RequestType);
            AddToDictionary(props, "callId", CallId);
            AddToDictionary(props, "accountId", AccountId);
            AddToDictionary(props, "from", From);
            AddToDictionary(props, "to", To);
            AddToDictionary(props, "callStatus", CallStatus);
            AddToDictionary(props, "direction", Direction);
            AddToDictionary(props, "conferenceId", ConferenceId);
            AddToDictionary(props, "queueId", QueueId);
            AddToDictionary(props, "digits", Digits);
            AddToDictionary(props, "reason", Reason);
            AddToDictionary(props, "parentCallId", ParentCallId);
            return props;
        }

        private IDictionary<string, object> AddToDictionary(
            IDictionary<string, object> dict,
            string key,
            object value
        )
        {
            if (value != null)
            {
                dict.Add(key, value);
            }
            return dict;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }
}
