/*
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using freeclimb.Enums;
using JsonSubTypes;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using OpenAPIDateConverter = freeclimb.Client.OpenAPIDateConverter;

namespace freeclimb.Model
{
    /// <summary>
    /// The GetSpeech command has completed and its actionUrl is being invoked. A PerCL response is expected, unless reason is hangup.
    /// </summary>
    [DataContract(Name = "GetSpeechWebhook")]
    [JsonConverter(typeof(JsonSubtypes), "RequestType")]
    public partial class GetSpeechWebhook : Webhook, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets CallStatus
        /// </summary>
        [DataMember(Name = "callStatus", EmitDefaultValue = true)]
        public CallStatus? CallStatus { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name = "direction", EmitDefaultValue = true)]
        public CallDirection? Direction { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public GetSpeechReason? Reason { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetSpeechWebhook" /> class.
        /// </summary>
        /// <param name="requestType">Context or reason why this request is being made. Will be getSpeech - The GetSpeech command has completed and its actionUrl is being invoked. (default to &quot;GetSpeechWebhook&quot;).</param>
        /// <param name="callId">Unique ID for this Call, generated by FreeClimb..</param>
        /// <param name="accountId">Account ID associated with your account..</param>
        /// <param name="from">Phone number of the party that initiated the Call (in E.164 format)..</param>
        /// <param name="to">Phone number provisioned to you and to which this Call is directed (in E.164 format)..</param>
        /// <param name="callStatus">callStatus.</param>
        /// <param name="direction">direction.</param>
        /// <param name="conferenceId">Unique ID of the Conference..</param>
        /// <param name="queueId">This is only populated if the request pertains to a Queue. Otherwise, it is set to null..</param>
        /// <param name="reason">reason.</param>
        /// <param name="recognitionResult">Semantic content (either a string if speech was recognized or a digit if a digit was input instead of speech) returned from the entry or tag that was recognized within the grammar. The content will be replaced by &#39;xxxxx&#39; when privacyMode is set to true. This field is populated only if the reason field is set to recognition or digit..</param>
        /// <param name="confidence">Level of confidence in the obtained result. This is a value in the range 0 to 100 â€“ with 0 being total lack of confidence and 100 being absolute certainty in the recognition. This field is populated only if the reason field is set to recognition..</param>
        /// <param name="parentCallId">ID of the Call that created this leg (child call)..</param>
        /// <param name="completionReason">Advanced diagnostic information if reason was error. See RFC 6787 section 9.4.12 - speech recognition..</param>
        /// <param name="completionCause">Advanced diagnostic information if reason was error. See RFC 6787 section 9.4.11 - speech recognition..</param>
        /// <param name="mrcpCode">Advanced diagnostic information if reason was error. See RFC 6787 section 5.4 - MRCPv2 specification..</param>
        /// <param name="mrcpDiagnostic">Advanced diagnostic information if reason was error. See RFC 6787 section 5.4 - MRCPv2 specification..</param>
        public GetSpeechWebhook(
            string requestType = @"GetSpeechWebhook",
            string callId = default(string),
            string accountId = default(string),
            string from = default(string),
            string to = default(string),
            CallStatus? callStatus = default(CallStatus?),
            CallDirection? direction = default(CallDirection?),
            string conferenceId = default(string),
            string queueId = default(string),
            GetSpeechReason? reason = default(GetSpeechReason?),
            string recognitionResult = default(string),
            int confidence = default(int),
            string parentCallId = default(string),
            string completionReason = default(string),
            string completionCause = default(string),
            int mrcpCode = default(int),
            string mrcpDiagnostic = default(string)
        )
            : base()
        {
            base.RequestType = requestType;

            this.CallId = callId;

            this.AccountId = accountId;

            this.From = from;

            this.To = to;

            this.CallStatus = callStatus;

            this.Direction = direction;

            this.ConferenceId = conferenceId;

            this.QueueId = queueId;

            this.Reason = reason;

            this.RecognitionResult = recognitionResult;

            this.Confidence = confidence;

            this.ParentCallId = parentCallId;

            this.CompletionReason = completionReason;

            this.CompletionCause = completionCause;

            this.MrcpCode = mrcpCode;

            this.MrcpDiagnostic = mrcpDiagnostic;
        }

        private static readonly JsonSerializerSettings _serializerSettings =
            new JsonSerializerSettings
            {
                // OpenAPI generated types generally hide default constructors.
                ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,
                ContractResolver = new DefaultContractResolver
                {
                    NamingStrategy = new CamelCaseNamingStrategy { OverrideSpecifiedNames = false },
                },
            };

        /// <summary>
        /// Deserializes json payload into instance GetSpeechWebhook
        /// </summary>
        /// <param name="jsonPayload"></param>
        /// <returns>instanceof RemoveFromQueueNotificationWebhook</returns>
        public static GetSpeechWebhook Deserialize(string jsonPayload)
        {
            return (GetSpeechWebhook)
                JsonConvert.DeserializeObject(
                    jsonPayload,
                    typeof(GetSpeechWebhook),
                    _serializerSettings
                );
        }

        /// <summary>
        /// Unique ID for this Call, generated by FreeClimb.
        /// </summary>
        /// <value>Unique ID for this Call, generated by FreeClimb.</value>
        [DataMember(Name = "callId", EmitDefaultValue = false)]
        public string CallId { get; set; }

        /// <summary>
        /// Account ID associated with your account.
        /// </summary>
        /// <value>Account ID associated with your account.</value>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Phone number of the party that initiated the Call (in E.164 format).
        /// </summary>
        /// <value>Phone number of the party that initiated the Call (in E.164 format).</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public string From { get; set; }

        /// <summary>
        /// Phone number provisioned to you and to which this Call is directed (in E.164 format).
        /// </summary>
        /// <value>Phone number provisioned to you and to which this Call is directed (in E.164 format).</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        /// Unique ID of the Conference.
        /// </summary>
        /// <value>Unique ID of the Conference.</value>
        [DataMember(Name = "conferenceId", EmitDefaultValue = false)]
        public string ConferenceId { get; set; }

        /// <summary>
        /// This is only populated if the request pertains to a Queue. Otherwise, it is set to null.
        /// </summary>
        /// <value>This is only populated if the request pertains to a Queue. Otherwise, it is set to null.</value>
        [DataMember(Name = "queueId", EmitDefaultValue = true)]
        public string QueueId { get; set; }

        /// <summary>
        /// Semantic content (either a string if speech was recognized or a digit if a digit was input instead of speech) returned from the entry or tag that was recognized within the grammar. The content will be replaced by &#39;xxxxx&#39; when privacyMode is set to true. This field is populated only if the reason field is set to recognition or digit.
        /// </summary>
        /// <value>Semantic content (either a string if speech was recognized or a digit if a digit was input instead of speech) returned from the entry or tag that was recognized within the grammar. The content will be replaced by &#39;xxxxx&#39; when privacyMode is set to true. This field is populated only if the reason field is set to recognition or digit.</value>
        [DataMember(Name = "recognitionResult", EmitDefaultValue = false)]
        public string RecognitionResult { get; set; }

        /// <summary>
        /// Level of confidence in the obtained result. This is a value in the range 0 to 100 â€“ with 0 being total lack of confidence and 100 being absolute certainty in the recognition. This field is populated only if the reason field is set to recognition.
        /// </summary>
        /// <value>Level of confidence in the obtained result. This is a value in the range 0 to 100 â€“ with 0 being total lack of confidence and 100 being absolute certainty in the recognition. This field is populated only if the reason field is set to recognition.</value>
        [DataMember(Name = "confidence", EmitDefaultValue = false)]
        public int Confidence { get; set; }

        /// <summary>
        /// ID of the Call that created this leg (child call).
        /// </summary>
        /// <value>ID of the Call that created this leg (child call).</value>
        [DataMember(Name = "parentCallId", EmitDefaultValue = false)]
        public string ParentCallId { get; set; }

        /// <summary>
        /// Advanced diagnostic information if reason was error. See RFC 6787 section 9.4.12 - speech recognition.
        /// </summary>
        /// <value>Advanced diagnostic information if reason was error. See RFC 6787 section 9.4.12 - speech recognition.</value>
        [DataMember(Name = "completionReason", EmitDefaultValue = false)]
        public string CompletionReason { get; set; }

        /// <summary>
        /// Advanced diagnostic information if reason was error. See RFC 6787 section 9.4.11 - speech recognition.
        /// </summary>
        /// <value>Advanced diagnostic information if reason was error. See RFC 6787 section 9.4.11 - speech recognition.</value>
        [DataMember(Name = "completionCause", EmitDefaultValue = false)]
        public string CompletionCause { get; set; }

        /// <summary>
        /// Advanced diagnostic information if reason was error. See RFC 6787 section 5.4 - MRCPv2 specification.
        /// </summary>
        /// <value>Advanced diagnostic information if reason was error. See RFC 6787 section 5.4 - MRCPv2 specification.</value>
        [DataMember(Name = "mrcpCode", EmitDefaultValue = false)]
        public int MrcpCode { get; set; }

        /// <summary>
        /// Advanced diagnostic information if reason was error. See RFC 6787 section 5.4 - MRCPv2 specification.
        /// </summary>
        /// <value>Advanced diagnostic information if reason was error. See RFC 6787 section 5.4 - MRCPv2 specification.</value>
        [DataMember(Name = "mrcpDiagnostic", EmitDefaultValue = false)]
        public string MrcpDiagnostic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSpeechWebhook {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  RequestType: ").Append(RequestType).Append("\n");
            sb.Append("  CallId: ").Append(CallId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  CallStatus: ").Append(CallStatus).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  ConferenceId: ").Append(ConferenceId).Append("\n");
            sb.Append("  QueueId: ").Append(QueueId).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  RecognitionResult: ").Append(RecognitionResult).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("  ParentCallId: ").Append(ParentCallId).Append("\n");
            sb.Append("  CompletionReason: ").Append(CompletionReason).Append("\n");
            sb.Append("  CompletionCause: ").Append(CompletionCause).Append("\n");
            sb.Append("  MrcpCode: ").Append(MrcpCode).Append("\n");
            sb.Append("  MrcpDiagnostic: ").Append(MrcpDiagnostic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented,
                new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }
            );
        }

        /// <summary>
        /// Retrieve the KVP Dictionary for the GetSpeechWebhook instance.
        /// </summary>
        /// <returns>KVP Dictionary</returns>
        public override IDictionary<string, object> ToKvp()
        {
            IDictionary<string, object> props = new Dictionary<string, object>();
            props.Add("requestType", RequestType);
            props.Add("callId", CallId);
            props.Add("accountId", AccountId);
            props.Add("from", From);
            props.Add("to", To);
            props.Add("callStatus", CallStatus);
            props.Add("direction", Direction);
            props.Add("conferenceId", ConferenceId);
            props.Add("queueId", QueueId);
            props.Add("reason", Reason);
            props.Add("recognitionResult", RecognitionResult);
            props.Add("confidence", Confidence);
            props.Add("parentCallId", ParentCallId);
            props.Add("completionReason", CompletionReason);
            props.Add("completionCause", CompletionCause);
            props.Add("mrcpCode", MrcpCode);
            props.Add("mrcpDiagnostic", MrcpDiagnostic);
            return props;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }
}
