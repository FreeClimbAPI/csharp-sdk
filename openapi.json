{
  "openapi": "3.0.0",
  "info": {
    "title": "FreeClimb API",
    "version": "1.0.0",
    "description": "FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.",
    "contact": {
      "name": "FreeClimb API Support",
      "url": "https://www.freeclimb.com/support/",
      "email": "support@freeclimb.com"
    }
  },
  "servers": [
    {
      "url": "https://www.freeclimb.com/apiserver"
    }
  ],
  "components": {
    "parameters": {
      "AccountId": {
        "name": "accountId",
        "in": "path",
        "description": "ID of the account",
        "required": true,
        "x-account-id": true,
        "schema": {
          "type": "string"
        }
      },
      "Capabilities.Voice": {
        "name": "capabilities.voice",
        "in": "query",
        "description": "",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "Capabilities.Sms": {
        "name": "capabilities.sms",
        "in": "query",
        "description": "",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "Capabilities.TollFree": {
        "name": "capabilities.tollFree",
        "in": "query",
        "description": "",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "Capabilities.TenDLC": {
        "name": "capabilities.tenDLC",
        "in": "query",
        "description": "",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "Capabilities.ShortCode": {
        "name": "capabilities.shortCode",
        "in": "query",
        "description": "",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      }
    },
    "securitySchemes": {
      "fc": {
        "scheme": "basic",
        "type": "http",
        "description": "HTTP requests to the FreeClimb REST API are protected with HTTP Basic authentication --- you use your FreeClimb-generated account ID and API key to authenticate each HTTP request. You can view your credentials under the API Keys section in your Dashboard."
      }
    },
    "schemas": {
      "AccountStatus": {
        "type": "string",
        "enum": ["closed", "suspended", "active"],
        "x-enum-varnames": ["CLOSED", "SUSPENDED", "ACTIVE"],
        "x-enum": true,
        "description": "The status of this account. It is one of: active, suspended, or closed.",
        "nullable": true
      },
      "AccountType": {
        "type": "string",
        "description": "The type of this account. It is one of: trial or full.",
        "enum": ["trial", "full"],
        "x-enum": true,
        "x-enum-varnames": ["TRIAL", "FULL"],
        "nullable": true
      },
      "AnsweredBy": {
        "type": "string",
        "nullable": true,
        "enum": ["human", "machine"],
        "x-enum-varnames": ["HUMAN", "MACHINE"],
        "x-enum": true,
        "description": "If this Call was initiated with answering machine detection, either `human` or `machine`. Empty otherwise."
      },
      "CallDirection": {
        "type": "string",
        "nullable": true,
        "enum": ["inbound", "outboundAPI", "outboundDial"],
        "x-enum-varnames": ["INBOUND", "OUTBOUND_API", "OUTBOUND_DIAL"],
        "x-enum": true,
        "description": "Direction of the Call. `inbound` for Calls into FreeClimb, `outboundAPI` for Calls initiated via the REST API,  `outboundDial` for Calls initiated by the `OutDial` PerCL command."
      },
      "CallStatus": {
        "type": "string",
        "nullable": true,
        "enum": [
          "queued",
          "ringing",
          "inProgress",
          "canceled",
          "completed",
          "failed",
          "busy",
          "noAnswer"
        ],
        "x-enum-varnames": [
          "QUEUED",
          "RINGING",
          "IN_PROGRESS",
          "CANCELED",
          "COMPLETED",
          "FAILED",
          "BUSY",
          "NO_ANSWER"
        ],
        "x-enum": true,
        "description": "* `queued` &ndash; Call is ready and waiting in line before going out. * `ringing` &ndash; Call is currently ringing. * `inProgress` &ndash; Call was answered and is currently in progress. * `canceled` &ndash; Call was hung up while it was queued or ringing. * `completed` &ndash; Call was answered and has ended normally. * `busy` &ndash; Caller received a busy signal. * `failed` &ndash; Call could not be completed as dialed, most likely because the phone number was non-existent. * `noAnswer` &ndash; Call ended without being answered."
      },
      "ConferenceStatus": {
        "type": "string",
        "nullable": true,
        "enum": ["empty", "populated", "inProgress", "terminated"],
        "x-enum-varnames": ["EMPTY", "POPULATED", "IN_PROGRESS", "TERMINATED"],
        "x-enum": true,
        "description": "The status of the Conference. One of: creating, empty, populated, inProgress, or terminated."
      },
      "GetSpeechReason": {
        "type": "string",
        "enum": [
          "error",
          "hangup",
          "digit",
          "noInput",
          "noMatch",
          "recognition"
        ],
        "x-enum-varnames": [
          "ERROR",
          "HANGUP",
          "DIGIT",
          "NO_INPUT",
          "NO_MATCH",
          "RECOGNITION"
        ],
        "x-enum": true
      },
      "GrammarFileBuiltIn": {
        "type": "string",
        "enum": [
          "ALPHNUM6",
          "ANY_DIG",
          "DIG1",
          "DIG2",
          "DIG3",
          "DIG4",
          "DIG5",
          "DIG6",
          "DIG7",
          "DIG8",
          "DIG9",
          "DIG10",
          "DIG11",
          "UP_TO_20_DIGIT_SEQUENCE",
          "VERSAY_YESNO"
        ],
        "x-enum-varnames": [
          "ALPHNUM6",
          "ANY_DIG",
          "DIG1",
          "DIG2",
          "DIG3",
          "DIG4",
          "DIG5",
          "DIG6",
          "DIG7",
          "DIG8",
          "DIG9",
          "DIG10",
          "DIG11",
          "UP_TO_20_DIGIT_SEQUENCE",
          "VERSAY_YESNO"
        ],
        "x-enum": true
      },
      "GrammarType": {
        "type": "string",
        "enum": ["URL", "BUILTIN"],
        "nullable": true,
        "x-enum-varnames": ["URL", "BUILT_IN"],
        "x-enum": true,
        "description": "The grammar file type to use for speech recognition. A value of 'URL' indicates the grammarFile attribute specifies a URL that points to the grammar file. A value of `BUILTIN` indicates the grammarFile attribute specifies the name of one of the platform built-in grammar files."
      },
      "IfMachine": {
        "type": "string",
        "enum": ["redirect", "hangup"],
        "x-enum-varnames": ["REDIRECT", "HANGUP"],
        "x-enum": true,
        "description": "Specifies how FreeClimb should handle this OutDial if an answering machine answers the Call. Valid values: `redirect` invokes the ifMachineUrl for instructions. `hangup` hangs up the Call. The ifMachineUrl will not be invoked."
      },
      "Language": {
        "type": "string",
        "enum": [
          "ca-ES",
          "da-DK",
          "de-DE",
          "en-AU",
          "en-CA",
          "en-GB",
          "en-IN",
          "en-US",
          "es-ES",
          "es-MX",
          "fi-FI",
          "fr-CA",
          "fr-FR",
          "it-IT",
          "ja-JP",
          "ko-KR",
          "nb-NO",
          "nl-NL",
          "pl-PL",
          "pt-BR",
          "pt-PT",
          "ru-RU",
          "sv-SE",
          "zh-CN",
          "zh-HK",
          "zh-TW"
        ],
        "x-enum-varnames": [
          "CATALAN",
          "DANISH",
          "GERMAN",
          "ENGLISH_AU",
          "ENGLISH_CA",
          "ENGLISH_UK",
          "ENGLISH_IN",
          "ENGLISH_US",
          "ENGLISH_ES",
          "ENGLISH_MX",
          "FINNISH",
          "FRENCH_CA",
          "FRENCH_FR",
          "ITALIAN",
          "JAPANESE",
          "KOREAN",
          "NORWEGIAN",
          "DUTCH",
          "POLISH",
          "PORTUGESE_BR",
          "PORTUGESE_PT",
          "RUSSIAN",
          "SWEDISH",
          "CHINESE_CN",
          "CHINESE_HK",
          "CHINESE_TW"
        ],
        "x-enum": true
      },
      "LogLevel": {
        "type": "string",
        "enum": ["info", "warning", "error"],
        "nullable": true,
        "x-enum-varnames": ["INFO", "WARNING", "ERROR"],
        "x-enum": true,
        "description": "Level of the log. Possible values are info, warning, and error."
      },
      "MachineType": {
        "type": "string",
        "enum": ["answeringMachine", "faxMachine"],
        "x-enum-varnames": ["ANSWERING_MACHINE", "FAX_MACHINE"],
        "x-enum": true
      },
      "MessageDirection": {
        "type": "string",
        "enum": ["inbound", "outbound"],
        "x-enum-varnames": ["INBOUND", "OUTBOUND"],
        "x-enum": true
      },
      "MessageStatus": {
        "type": "string",
        "nullable": true,
        "description": "Indicates the state of the message through the message lifecycle including: new, queued, rejected, sending, sent, failed, received, undelivered, expired, deleted, and unknown",
        "enum": [
          "new",
          "queued",
          "rejected",
          "sending",
          "sent",
          "failed",
          "received",
          "undelivered",
          "expired",
          "deleted",
          "unknown"
        ],
        "x-enum-varnames": [
          "NEW",
          "QUEUED",
          "REJECTED",
          "SENDING",
          "SENT",
          "FAILED",
          "RECEIVED",
          "UNDELIVERED",
          "EXPIRED",
          "DELETED",
          "UNKNOWN"
        ],
        "x-enum": true
      },
      "PlayBeep": {
        "type": "string",
        "nullable": true,
        "enum": ["always", "never", "entryOnly", "exitOnly"],
        "x-enum-varnames": ["ALWAYS", "NEVER", "ENTRY_ONLY", "EXIT_ONLY"],
        "x-enum": true,
        "description": "Indicates whether to play a beep when a Participant enters or leaves the Conference. either `always`, `never`, `entryOnly`, or `exitOnly`. Leaving this unset will make conference default to `always` ",
        "default": "always",
        "x-enum-default-attr": "ALWAYS"
      },
      "QueueResultStatus": {
        "type": "string",
        "enum": ["queueFull", "dequeued", "hangup", "systemError"],
        "x-enum-varnames": ["QUEUE_FULL", "DEQUEUED", "HANGUP", "SYSTEM_ERROR"],
        "x-enum": true
      },
      "RecordUtteranceTermReason": {
        "type": "string",
        "enum": ["finishKey", "timeout", "hangup", "maxLength"],
        "x-enum-varnames": ["FINISH_KEY", "TIMEOUT", "HANGUP", "MAX_LENGTH"],
        "x-enum": true
      },
      "RequestType": {
        "type": "string",
        "enum": [
          "inboundCall",
          "record",
          "getDigits",
          "getSpeech",
          "redirect",
          "pause",
          "outDialStart",
          "outDialConnect",
          "outDialApiConnect",
          "machineDetected",
          "dequeue",
          "queueWait",
          "addToQueueNotification",
          "removeFromQueueNotification",
          "callStatus",
          "createConference",
          "conferenceStatus",
          "leaveConference",
          "addToConferenceNotification",
          "conferenceRecordingStatus",
          "conferenceCallControl",
          "messageDelivery",
          "messageStatus"
        ],
        "x-enum-varnames": [
          "INBOUND_CALL",
          "RECORD",
          "GET_DIGITS",
          "GET_SPEECH",
          "REDIRECT",
          "PAUSE",
          "OUT_DIAL_START",
          "OUT_DIAL_CONNECT",
          "OUT_DIAL_API_CONNECT",
          "MACHINE_DETECTED",
          "DEQUEUE",
          "QUEUE_WAIT",
          "ADD_TO_QUEUE_NOTIFICATION",
          "REMOVE_FROM_QUEUE_NOTIFICATION",
          "CALL_STATUS",
          "CREATE_CONFERENCE",
          "CONFERENCE_STATUS",
          "LEAVE_CONFERENCE",
          "ADD_TO_CONFERENCE_NOTIFICATION",
          "CONFERENCE_RECORDING_STATUS",
          "CONFERENCE_CALL_CONTROL",
          "MESSAGE_DELIVERY",
          "MESSAGE_STATUS"
        ],
        "x-enum": true
      },
      "UpdateCallRequestStatus": {
        "type": "string",
        "enum": ["canceled", "completed"],
        "x-enum-varnames": ["CANCELED", "COMPLETED"],
        "x-enum": true,
        "description": "Either `canceled` or `completed`.  Specifying `canceled` attempts to hang up calls that are queued without affecting calls already in progress. Specifying `completed` attempts to hang up a call already in progress."
      },
      "UpdateConferenceRequestStatus": {
        "type": "string",
        "enum": ["empty", "terminated"],
        "x-enum-varnames": ["EMPTY", "TERMINATED"],
        "x-enum": true,
        "description": "New status of the conference. Valid values: `empty` or `terminated`. For more information, see **Status Parameter** below.**"
      },
      "PerclScript": {
        "type": "object",
        "description": "A PerCL script to be returned to the FreeClimb servers in FreeClimb applications",
        "x-percl-script": true,
        "properties": {
          "commands": {
            "type": "array",
            "description": "A JSON array of PerCL commands",
            "x-is-list": true,
            "items": {
              "$ref": "#/components/schemas/PerclCommand"
            }
          }
        }
      },
      "PerclCommand": {
        "type": "object",
        "description": "An individual command used in a PerCLScript.",
        "x-percl-command-base": true,
        "discriminator": {
          "propertyName": "command",
          "mapping": {
            "AddToConference": "#/components/schemas/AddToConference",
            "CreateConference": "#/components/schemas/CreateConference",
            "Dequeue": "#/components/schemas/Dequeue",
            "Enqueue": "#/components/schemas/Enqueue",
            "GetDigits": "#/components/schemas/GetDigits",
            "GetSpeech": "#/components/schemas/GetSpeech",
            "Hangup": "#/components/schemas/Hangup",
            "OutDial": "#/components/schemas/OutDial",
            "Pause": "#/components/schemas/Pause",
            "Park": "#/components/schemas/Park",
            "Play": "#/components/schemas/Play",
            "PlayEarlyMedia": "#/components/schemas/PlayEarlyMedia",
            "RecordUtterance": "#/components/schemas/RecordUtterance",
            "Redirect": "#/components/schemas/Redirect",
            "Reject": "#/components/schemas/Reject",
            "RemoveFromConference": "#/components/schemas/RemoveFromConference",
            "Say": "#/components/schemas/Say",
            "SendDigits": "#/components/schemas/SendDigits",
            "SetListen": "#/components/schemas/SetListen",
            "SetTalk": "#/components/schemas/SetTalk",
            "Sms": "#/components/schemas/Sms",
            "StartRecordCall": "#/components/schemas/StartRecordCall",
            "TerminateConference": "#/components/schemas/TerminateConference",
            "TranscribeUtterance": "#/components/schemas/TranscribeUtterance",
            "Unpark": "#/components/schemas/Unpark"
          }
        },
        "properties": {
          "command": {
            "x-is-no-property": true,
            "type": "string",
            "description": "Name of PerCL Command (this is automatically derived from mapping configuration and should not be manually supplied in any arguments)"
          }
        }
      },
      "AddToConference": {
        "description": "The `AddToConference` command adds a Participant to a Conference. Two Call legs can be bridged together by creating a Conference and adding both Call legs to it via `AddToConference`.",
        "x-percl-command": true,
        "x-ref-properties": [
          "false",
          "\"TEST_STRING\"",
          "\"TEST_STRING\"",
          "\"TEST_STRING\"",
          "\"TEST_STRING\"",
          "false",
          "\"TEST_STRING\"",
          "false",
          "false"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand"
          },
          {
            "type": "object",
            "required": ["conferenceId"],
            "properties": {
              "allowCallControl": {
                "description": "If `true`, Call control will be enabled for this Participant's Call leg.",
                "type": "boolean"
              },
              "callControlSequence": {
                "description": "Defines a sequence of digits that, when entered by this caller, invokes the `callControlUrl`. Only digits plus '*', and '#' may be used.",
                "type": "string"
              },
              "callControlUrl": {
                "description": "URL to be invoked when this Participant enters the digit sequence defined in the `callControlSequence` attribute.",
                "type": "string"
              },
              "conferenceId": {
                "description": "ID of the Conference to which to add the Participant (Call leg). Conference must exist or an error will result.",
                "type": "string"
              },
              "leaveConferenceUrl": {
                "description": "URL to be invoked when the Participant leaves the Conference. ",
                "type": "string"
              },
              "listen": {
                "description": "If `true`, the Participant joins the Conference with listen privileges. This may be modified later via the REST API or `SetListen` PerCL command.",
                "type": "boolean"
              },
              "notificationUrl": {
                "description": "When the Participant enters the Conference, this URL will be invoked using an HTTP POST request with the standard request parameters.",
                "type": "string"
              },
              "startConfOnEnter": {
                "description": "Flag that indicates whether a Conference starts upon entry of this particular Participant. This is usually set to `true` for moderators and `false` for all other Participants.",
                "type": "boolean"
              },
              "talk": {
                "description": "If `true`, the Participant joins the Conference with talk privileges. This may be modified later via the REST API or `SetTalk` PerCL command. ",
                "type": "boolean"
              }
            }
          }
        ]
      },
      "CreateConference": {
        "description": "The `CreateConference` command does exactly what its name implies — it creates an unpopulated Conference (one without any Participants). Once created, a Conference remains in FreeClimb until explicitly terminated by a customer. Once a Conference has been terminated, it can no longer be used.",
        "x-percl-command": true,
        "x-ref-properties": [
          "\"TEST_STRING\"",
          "false",
          "PlayBeep.ALWAYS",
          "false",
          "\"https://a.com\"",
          "\"https://a.com\"",
          "\"TEST_STRING\""
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand"
          },
          {
            "type": "object",
            "required": ["actionUrl"],
            "properties": {
              "actionUrl": {
                "description": " This URL is invoked once the Conference is successfully created. Actions on the Conference, such as adding Participants, can be performed via the PerCL script returned in the response. ",
                "type": "string",
                "x-is-uri": true
              },
              "alias": {
                "description": "Descriptive name for the Conference. ",
                "type": "boolean"
              },
              "playBeep": {
                "$ref": "#/components/schemas/PlayBeep"
              },
              "record": {
                "description": "When set to `true`, the entire Conference is recorded. The `statusCallbackUrl` of the Conference will receive a `conferenceRecordingEnded` Webhook when the Conference transitions from the `inProgress` to empty state.",
                "type": "boolean"
              },
              "statusCallbackUrl": {
                "description": "This URL is invoked when the status of the Conference changes or when a recording of the Conference has become available.",
                "type": "string"
              },
              "waitUrl": {
                "description": "If specified, this URL provides the custom hold music for the Conference when it is in the populated state. This attribute is always fetched using HTTP GET and is fetched just once – when the Conference is created. The URL must be an audio file that is reachable and readable by FreeClimb.",
                "type": "string"
              }
            }
          }
        ]
      },
      "Dequeue": {
        "description": "The `Dequeue` command transfers control of a Call that is in a Queue so that the waiting caller exits the Queue. Execution continues with the first command in the PerCL script returned by the `actionUrl` specified in the `Enqueue` command.",
        "x-percl-command": true,
        "x-no-properties": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand"
          },
          {
            "type": "object"
          }
        ]
      },
      "Enqueue": {
        "description": "The `Enqueue` command adds the current Call to a call Queue. If the specified Queue does not exist, it is created and then the Call is added to it. The default maximum length of the queue is 100. This can be modified using the REST API.",
        "x-percl-command": true,
        "x-ref-properties": [
          "\"TEST_STRING\"",
          "\"TEST_STRING\"",
          "\"TEST_STRING\"",
          "\"TEST_STRING\"",
          "\"TEST_STRING\""
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand",
            "x-is-uri": true
          },
          {
            "type": "object",
            "required": ["queueId", "waitUrl", "actionUrl"],
            "properties": {
              "actionUrl": {
                "description": "A request is made to this URL when the Call leaves the Queue, which can occur if enqueue of the Call fails or when the call is dequeued via the `Dequeue` command, the REST API (POST to Queue Member resource), or the caller hangs up.",
                "type": "string",
                "x-is-uri": true
              },
              "notificationUrl": {
                "description": "URL to be invoked when the call enters the queue. The request to the URL contains the standard request parameters.This is a notification only; any PerCL returned will be ignored.",
                "type": "string",
                "x-is-uri": true
              },
              "queueId": {
                "description": "ID of the Queue to which to add the Call. If the Queue does not exist, it will be created. The ID must start with QU followed by 40 hex characters.",
                "type": "string"
              },
              "waitUrl": {
                "description": "A request is made to this URL when the Call leaves the Queue, which can occur if enqueue of the Call fails or when the call is dequeued via the `Dequeue` command, the REST API (POST to Queue Member resource), or the caller hangs up.",
                "type": "string"
              }
            }
          }
        ]
      },
      "GetDigits": {
        "description": "The `GetDigits` command collects DTMF inputs from the caller. It is only supported only when there is a single party on the Call. `GetDigits` is a Terminal Command — any actions following it are never executed. When the Caller is done entering the digits, FreeClimb submits that data to the provided `actionUrl` using an HTTP POST request. Your server will be required to respond to the FreeClimb Webhook with PerCL to continue handling the call.",
        "x-percl-command": true,
        "x-ref-properties": [
          "\"https://a.com\"",
          "1",
          "\"TEST_STRING\"",
          "false",
          "300",
          "1",
          "1",
          "new List<PerclCommand>()",
          "false",
          "\"TEST_STRING\""
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand",
            "x-is-uri": true
          },
          {
            "type": "object",
            "required": ["actionUrl"],
            "properties": {
              "actionUrl": {
                "description": "When the Caller has finished entering digits, FreeClimb will make an HTTP POST request to this URL. A PerCL response is expected to continue handling the Call. Make sure to keep “http://“ in the URL.",
                "type": "string",
                "x-is-uri": true
              },
              "digitTimeoutMs": {
                "description": " Maximum time in milliseconds that FreeClimb will wait for the Caller to press any digit after the last digit entered, before making a determination that a `timeout` has occurred and moving on to make the request to the actionUrl to submit the results of the `GetDigits` command. This timeout interval begins and resets after each digit entered.",
                "type": "integer"
              },
              "finishOnKey": {
                "description": "Digit that causes the input sequence to be deemed complete. This attribute defers to the `timeout` attribute – so, if a `timeout` occurs, then the command terminates regardless of the value of `finishOnKey`.",
                "type": "string"
              },
              "flushBuffer": {
                "description": "If set to true, the FreeClimb platform starts with an empty DTMF buffer to store the digits entered by the caller. If set to false, FreeClimb will append the user inputs to the end of the existing digits buffer and will return digits from the start of the digits buffer.",
                "type": "boolean"
              },
              "initialTimeoutMs": {
                "description": "Maximum time in milliseconds that FreeClimb will wait for the Caller to press the first digit before making a determination that a `timeout` has occurred and moving on to make the request to the `actionUrl` to submit the results of the `GetDigits` command. This timeout interval begins when all nested commands have been fully executed.",
                "type": "integer"
              },
              "maxDigits": {
                "description": "Maximum number of digits expected in the input. If the terminating digit is not entered and the caller has entered the maximum number of digits allowed, the `GetDigits` command terminates regardless of the value of `finishOnKey`.",
                "type": "integer"
              },
              "minDigits": {
                "description": "Minimum number of digits expected in the input. If specified, FreeClimb will return the collected digits only if the Caller has entered at least that many digits.",
                "type": "integer"
              },
              "prompts": {
                "description": "JSON array of PerCL commands to nest within the `GetDigits` command. The `Say`, `Play`, and `Pause` commands can be used. The nested actions are executed while FreeClimb is waiting for input from the Caller.",
                "type": "array",
                "x-is-list": true,
                "items": {
                  "$ref": "#/components/schemas/PerclCommand"
                }
              },
              "privacyMode": {
                "description": "Parameter `privacyMode` will not log the `text` as required by PCI compliance.",
                "type": "boolean"
              }
            }
          }
        ]
      },
      "GetSpeech": {
        "description": "The `GetSpeech` command enables the Caller to respond to the application using a supported language. Unlike DTMF entry, which implicitly restricts the user to using the available buttons on the phone key pad, speech input allows for flexible audio inputs based on grammar. FreeClimb supports grammars written using GRXML compatible with the Microsoft Speech Platform. `GetSpeech` is only supported on a single call leg. It is not supported when there are two or more call legs connected (as in within a Conference).",
        "x-percl-command": true,
        "x-ref-properties": [
          "\"https://a.com\"",
          "GrammarType.URL",
          "\"TEST_STRING\"",
          "\"TEST_STRING\"",
          "false",
          "new List<PerclCommand>()",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "false",
          "\"TEST_STRING\""
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand"
          },
          {
            "type": "object",
            "required": ["actionUrl", "grammarFile"],
            "properties": {
              "actionUrl": {
                "description": "When the caller has finished speaking or the command has timed out, FreeClimb will make a POST request to this URL. A PerCL response is expected to continue handling the call.",
                "type": "string",
                "format": "uri",
                "x-is-uri": true,
                "x-is-url": true
              },
              "grammarType": {
                "$ref": "#/components/schemas/GrammarType"
              },
              "grammarFile": {
                "description": "The grammar file to use for speech recognition. If grammarType is set to URL, this attribute is specified as a download URL.",
                "type": "string"
              },
              "grammarRule": {
                "description": "The grammar rule within the specified grammar file to use for speech recognition. This attribute is optional if `grammarType` is `URL` and ignored if `grammarType` is `BUILTIN`.",
                "type": "string"
              },
              "playBeep": {
                "description": "Indicates whether a beep should be played just before speech recognition is initiated so that the speaker can start to speak.",
                "type": "boolean"
              },
              "prompts": {
                "description": "The JSON array of PerCL commands to nest within the `GetSpeech` command. The `Say`, `Play`, and `Pause` commands can be used. The nested actions are executed while FreeClimb is waiting for input from the caller. This allows for playing menu options to the caller and to prompt for the expected input. These commands stop executing when the caller begins to input speech.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PerclCommand"
                },
                "x-is-list": true
              },
              "noInputTimeoutMs": {
                "description": "When recognition is started and there is no speech detected for `noInputTimeoutMs` milliseconds, the recognizer will terminate the recognition operation.",
                "type": "integer"
              },
              "recognitionTimeoutMs": {
                "description": "When playback of prompts ends and there is no match for `recognitionTimeoutMs` milliseconds, the recognizer will terminate the recognition operation.",
                "type": "integer"
              },
              "confidenceThreshold": {
                "description": "When a recognition resource recognizes a spoken phrase, it associates a confidence level with that match. Parameter `confidenceThreshold` specifies what confidence level is considered a successful match. Values are between 0.0 and 1.0.",
                "type": "number"
              },
              "sensitivityLevel": {
                "description": "The speech recognizer supports a variable level of sound sensitivity. The sensitivityLevel attribute allows for filtering out background noise, so it is not mistaken for speech. Values are between 0.0 and 1.0 ",
                "type": "number"
              },
              "speechCompleteTimeoutMs": {
                "description": "Parameter `speechCompleteTimeoutMs` specifies the length of silence required following user speech before the speech recognizer finalizes a result. This timeout applies when the recognizer currently has a complete match against an active grammar. Reasonable speech complete timeout values are typically in the range of 0.3 seconds to 1.0 seconds.",
                "type": "integer"
              },
              "speechIncompleteTimeoutMs": {
                "description": "Parameter `speechIncompleteTimeoutMs` specifies the length of silence following user speech after which a recognizer finalizes a result. This timeout applies when the speech prior to the silence is an incomplete match of all active grammars. Timeout `speechIncompleteTimeoutMs` is usually longer than `speechCompleteTimeoutMs` to allow users to pause mid-utterance.",
                "type": "integer"
              },
              "privacyMode": {
                "description": "Parameter privacyMode will not log the `text` as required by PCI compliance.",
                "type": "boolean"
              }
            }
          }
        ]
      },
      "Hangup": {
        "description": "The `Hangup` command terminates a Call. If `Hangup` is used as the first action in a PerCL response, it does not prevent FreeClimb from answering the Call and billing your account. See the `Reject` command to hang up at no charge.",
        "x-percl-command": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand"
          },
          {
            "type": "object",
            "properties": {
              "reason": {
                "description": "The user defined reason for the hangup. In general, applications should use a set of enumerated values that are predefined to cover all exit points of the Call flows for the given application.",
                "type": "string"
              }
            }
          }
        ]
      },
      "OutDial": {
        "description": "The OutDial command is used to call a phone number",
        "x-percl-command": true,
        "x-ref-properties": [
          "\"https://a.com\"",
          "\"https://a.com\"",
          "\"TEST_STRING\"",
          "\"TEST_STRING\"",
          "IfMachine.REDIRECT",
          "\"https://a.com\"",
          "\"TEST_STRING\"",
          "\"TEST_STRING\"",
          "1",
          "false",
          "\"TEST_STRING\""
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand",
            "x-is-uri": true
          },
          {
            "required": [
              "actionUrl",
              "callConnectUrl",
              "callingNumber",
              "destination"
            ],
            "type": "object",
            "properties": {
              "actionUrl": {
                "description": "URL to which FreeClimb sends an HTTP POST request. ",
                "type": "string",
                "x-is-uri": true
              },
              "callConnectUrl": {
                "description": "URL to which FreeClimb makes an HTTP POST request informing the result of the OutDial.",
                "type": "string",
                "x-is-uri": true
              },
              "callingNumber": {
                "description": "he caller ID to show to the called party when FreeClimb calls. This can be one of the following: The To or From number provided in the first Webhook to your webserver. Any phone number you have purchased from FreeClimb.",
                "type": "string"
              },
              "destination": {
                "description": "E.164 representation of the phone number to Call. ",
                "type": "string"
              },
              "ifMachine": {
                "$ref": "#/components/schemas/IfMachine"
              },
              "ifMachineUrl": {
                "description": "When the `ifMachine` flag is set to `redirect`, this attribute specifies a URL to which FreeClimb makes a POST request when an answering machine or a fax machine is detected. This URL is required if the `ifMachine` flag is set to `redirect`. Otherwise, it should not be included.",
                "type": "string"
              },
              "sendDigits": {
                "description": "DTMF tones to play to the outdialed Call. This is typically used to dial a number and then dial an extension.",
                "type": "string"
              },
              "statusCallbackUrl": {
                "description": "When the outdialed Call leg terminates, FreeClimb sends a `callStatus` Webhook to the `statusCallbackUrl`. This is a notification only; any PerCL command returned is ignored.",
                "type": "string"
              },
              "timeout": {
                "description": "Maximum time in seconds the `OutDial` command waits for the called party to answer the Call. When a timeout occurs, FreeClimb invokes the `callConnectUrl` Webhook to report that the out-dialed Call has ended with a status of `noAnswer`.",
                "type": "integer"
              },
              "privacyMode": {
                "description": "Parameter `privacyMode` will not log the `text` as required by PCI compliance.",
                "type": "boolean"
              }
            }
          }
        ]
      },
      "Park": {
        "description": "The `Park` command allows a caller to be put on hold.  You can provide hold music,messages,etc until ready to resume the call. Park is a terminal command.  Actions performed on the Call while on hold are provided in a PerCL script in response to the waitUrl property. Actions performed on the Call after it has been unparked (resumed) will be provided in a PerCL script in response to the actionUrl provided. A Call can be resumed in two ways -- REST API invocation or the Unpark percl command. No actions can be nested within Park and Park cannot be nested in any other actions. ",
        "x-percl-command": true,
        "x-ref-properties": [
          "\"https://a.com\"",
          "\"https://a.com\"",
          "\"TEST_STRING\"",
          "\"TEST_STRING\""
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand",
            "x-is-uri": true
          },
          {
            "type": "object",
            "required": ["waitUrl", "actionUrl"],
            "properties": {
              "waitUrl": {
                "description": "Specifies a URL pointing to a PerCL script containing actions to be executed while the caller is Parked. Once the script returned by the waitUrl runs out of commands to execute, FreeClimb will re-request the waitUrl and start over, essentially looping the script requests indefinitely.",
                "type": "string",
                "x-is-uri": true
              },
              "actionUrl": {
                "description": "A request is made to this URL when the Call is resumed, which can occur if the Call is resumed via the Unpark command, the REST API (POST to Call resource), or the caller hangs up. The PerCL script returned in response to the actionUrl will be executed on the resumed call.",
                "type": "string",
                "x-is-uri": true
              },
              "notificationUrl": {
                "description": "URL to be invoked when the Call is parked. The request to the URL contains the standard request parameters.",
                "type": "string"
              }
            }
          }
        ]
      },
      "Pause": {
        "description": "The `Pause` command halts execution of the current PerCL script for a specified number of milliseconds. If `Pause` is the first command in a PerCL document, FreeClimb will wait for the specified time to elapse before picking up the call.",
        "x-percl-command": true,
        "x-ref-properties": ["1"],
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand"
          },
          {
            "type": "object",
            "required": ["length"],
            "properties": {
              "length": {
                "description": "Length in milliseconds. FreeClimb will wait silently before continuing on.",
                "type": "integer"
              }
            }
          }
        ]
      },
      "Play": {
        "description": "The `Play` command plays an audio file back to the caller. The audio file may be located at any location accessible via a URL. `Play` can exist as a stand-alone command or as a nested command. It does not allow barge-in unless nested within a `GetSpeech` command. The file will always be played to completion unless nested.",
        "x-percl-command": true,
        "x-ref-properties": ["\"TEST_STRING\"", "1", "false"],
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand"
          },
          {
            "required": ["file"],
            "type": "object",
            "properties": {
              "file": {
                "description": "RL of the audio file to be played to the caller. The URL can be the `recordingUrl` generated from the `RecordUtterance` or `StartRecordCall` PerCL commands. ",
                "type": "string"
              },
              "loop": {
                "description": "Number of times the audio file is played. Specifying '0' causes the Play action to loop until the Call is hung up.",
                "type": "integer"
              },
              "privacyMode": {
                "description": "Parameter `privacyMode` will not log the `text` as required by PCI compliance.",
                "type": "boolean"
              }
            }
          }
        ]
      },
      "PlayEarlyMedia": {
        "description": "`PlayEarlyMedia` is relevant only when present as the very first command in the PerCL script returned for an incoming Call. In such cases, the command is executed before FreeClimb attempts to connect the call. The audio file it uses can be stored in any location that is accessible via URL.",
        "x-percl-command": true,
        "x-ref-properties": ["\"TEST_STRING\""],
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand"
          },
          {
            "required": ["file"],
            "type": "object",
            "properties": {
              "file": {
                "description": "RL of the audio file to be played to the caller. The URL can be the `recordingUrl` generated from the `RecordUtterance` or `StartRecordCall` PerCL commands or any accessible URL. FreeClimb will respect Cache-Control headers for this file. Use these to limit repeated requests for unchanged audio. If no Cache-Control header is provided, the file will be cached for seven days by default.",
                "type": "string"
              }
            }
          }
        ]
      },
      "RecordUtterance": {
        "description": "The `RecordUtterance` command records the caller's voice and returns the URL of a file containing the audio recording. `RecordUtterance` is blocking and is a terminal command. As such, the `actionUrl` property is required, and control of the Call picks up using the PerCL returned in response to the `actionUrl`. Recording information is returned in the `actionUrl` request.",
        "x-percl-command": true,
        "x-ref-properties": [
          "\"https://a.com\"",
          "1",
          "\"TEST_STRING\"",
          "1",
          "false",
          "false",
          "false"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand",
            "x-is-uri": true
          },
          {
            "required": ["actionUrl"],
            "type": "object",
            "properties": {
              "actionUrl": {
                "description": "URL to which information on the completed recording is submitted. The PerCL received in response is then used to continue with Call processing.",
                "type": "string",
                "x-is-uri": true
              },
              "silenceTimeoutMs": {
                "description": "Interval of silence that should elapse before ending the recording.",
                "type": "integer"
              },
              "finishOnKey": {
                "description": "Key that triggers the end of the recording. any digit, '#', or '*'",
                "type": "string"
              },
              "maxLengthSec": {
                "description": "Maximum length for the command execution in seconds.",
                "type": "integer"
              },
              "playBeep": {
                "description": "Indicates whether to play a beep sound before the start of the recording. If set to `false`, no beep is played.",
                "type": "boolean"
              },
              "autoStart": {
                "description": "If `false`, recording begins immediately after the RecordUtterance command is processed. If `true`, recording begins when audio is present and if audio begins before the `maxLengthSec` timeout. If no audio begins before `maxLengthSec`, no recording is generated.",
                "type": "boolean"
              },
              "privacyMode": {
                "description": "Parameter `privacyMode` will not log the `text` as required by PCI compliance.",
                "type": "boolean"
              }
            }
          }
        ]
      },
      "Redirect": {
        "description": "The `Redirect` command transfers control of a Call to the PerCL at a different URL. `Redirect` is a terminal command, so any actions following it are never executed. The maximum number of redirections allowed during the life time of a Call is 256. This is intended to prevent a Call from possibly looping infinitely due to errors in PerCL being generated.",
        "x-percl-command": true,
        "x-ref-properties": ["\"https://a.com\""],
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand",
            "x-is-uri": true
          },
          {
            "required": ["actionUrl"],
            "type": "object",
            "properties": {
              "actionUrl": {
                "description": "URL to request a new PerCL script to continue with the current Call's processing. When `Redirect` invokes the `actionUrl`, an `inbound` Webhook is sent. This request therefore looks identical to the initial request (made to the `voiceUrl` of the number that was called) for an inbound Call.",
                "type": "string",
                "x-is-uri": true
              }
            }
          }
        ]
      },
      "Reject": {
        "description": "The `Reject` command blocks an incoming Call. Using `Reject` is the only way to prevent FreeClimb from answering a Call. Any other response will result in an answered Call and your account will be billed.",
        "x-percl-command": true,
        "x-ref-properties": ["\"TEST_STRING\""],
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand"
          },
          {
            "type": "object",
            "properties": {
              "reason": {
                "description": "Reason for the rejection. This can be any string value. In general, applications should use a set of enumerated values that are predefined to cover all exit points of the call flows for the given application.",
                "type": "string"
              }
            }
          }
        ]
      },
      "RemoveFromConference": {
        "description": "The `RemoveFromConference` command removes a Participant from a Conference but does not hang up. Instead, the Call is simply unbridged and what happens next with the Call is determined by the PerCL returned in response to the `leaveConferenceUrl` attribute.",
        "x-percl-command": true,
        "x-no-properties": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand"
          },
          {
            "required": [],
            "type": "object",
            "properties": {}
          }
        ]
      },
      "Say": {
        "description": "The `Say` command provides Text-To-Speech (TTS) support. It converts text to speech and then renders it in a female voice back to the caller. `Say` is useful in cases where it's difficult to pre-record a prompt for any reason. `Say` does not allow barge-in unless nested within a `GetSpeech` command. The file will always be played to completion unless nested.",
        "x-percl-command": true,
        "x-ref-properties": [
          "\"TEST_STRING\"",
          "\"TEST_STRING\"",
          "1",
          "false"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand"
          },
          {
            "required": ["text"],
            "type": "object",
            "properties": {
              "text": {
                "description": "The message to be played to the caller using TTS. The size of the string is limited to 4 KB (or 4,096 bytes). An empty string will cause the command to be skipped.",
                "type": "string"
              },
              "language": {
                "description": "Language and (by implication) the locale to use. This implies the accent and pronunciations to be usde for the TTS. The complete list of valid values for the language attribute is shown below.",
                "type": "string"
              },
              "loop": {
                "description": "Number of times the text is said. Specifying '0' causes the `Say` action to loop until the Call is hung up.",
                "type": "integer",
                "default": 1
              },
              "privacyMode": {
                "description": "Parameter `privacyMode` will not log the `text` as required by PCI compliance.",
                "type": "boolean"
              }
            }
          }
        ]
      },
      "SendDigits": {
        "description": "The `SendDigits` command plays DTMF tones on a live Call. This is useful for navigating through IVR menus or dialing extensions.",
        "x-percl-command": true,
        "x-ref-properties": ["\"TEST_STRING\"", "1", "false"],
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand"
          },
          {
            "required": ["digits"],
            "type": "object",
            "properties": {
              "digits": {
                "description": "String containing the digits to be played. The string cannot be empty and can include any digit, plus `#`, or `*`, and allows embedding specification for delay or pause between the output of individual digits.",
                "type": "string"
              },
              "pauseMs": {
                "description": "Pause between digits in milliseconds. Valid values are 100-1000 milliseconds and will be adjusted by FreeClimb to satisfy the constraint.",
                "type": "integer"
              },
              "privacyMode": {
                "description": "Parameter `privacyMode` will not log the `text` as required by PCI compliance.",
                "type": "boolean"
              }
            }
          }
        ]
      },
      "SetListen": {
        "description": "The `SetListen` command enables or disables the listen privilege for a Conference Participant provided both calls are in the same conference. The Participant can hear what the other participants are saying only if this privilege is enabled.",
        "x-percl-command": true,
        "x-ref-properties": ["false"],
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand"
          },
          {
            "required": [],
            "type": "object",
            "properties": {
              "listen": {
                "description": "Specifying `false` will silence the Conference for this Participant.",
                "type": "boolean"
              }
            }
          }
        ]
      },
      "SetTalk": {
        "description": "The `SetTalk` command enables or disables the talk privilege for a Participant in a Conference provided both calls are in the same conference. If 'true', no audio from that Participant is shared with the other Participants of the Conference.",
        "x-percl-command": true,
        "x-ref-properties": ["false"],
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand"
          },
          {
            "required": [],
            "type": "object",
            "properties": {
              "talk": {
                "description": "Specifying `false` mutes the Participant.",
                "type": "boolean"
              }
            }
          }
        ]
      },
      "Sms": {
        "description": "The `Sms` command can be used to send an SMS message to a phone number during a phone call. International SMS is disabled by default.",
        "x-percl-command": true,
        "x-ref-properties": [
          "\"TEST_STRING\"",
          "\"TEST_STRING\"",
          "\"TEST_STRING\""
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand"
          },
          {
            "required": ["to", "from", "text"],
            "type": "object",
            "properties": {
              "to": {
                "description": "E.164 representation of the phone number to which the message will be sent. Must be within FreeClimb's service area and E.164 formatting (e.g., +18003608245).",
                "type": "string"
              },
              "from": {
                "description": "E.164 representation of the phone number to use as the sender. This must be an incoming phone number you have purchased from FreeClimb.",
                "type": "string"
              },
              "text": {
                "description": "Text contained in the message (maximum 160 characters).",
                "type": "string"
              },
              "notificationUrl": {
                "description": "When the message changes status, this URL will be invoked using HTTP POST with the messageStatus parameters. This is a notification only; any PerCL returned will be ignored.",
                "type": "string"
              }
            }
          }
        ]
      },
      "StartRecordCall": {
        "description": "The `StartRecordCall` command records the current call and returns the URL of a file containing the audio recording when recording completes. `StartRecordCall` is non-blocking. After recording of the current call begins, control of the call moves to the PerCL command that follows `StartRecordCall` in the current PerCL script.",
        "x-percl-command": true,
        "x-no-properties": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand"
          },
          {
            "type": "object"
          }
        ]
      },
      "TerminateConference": {
        "description": "The `TerminateConference` command terminates an existing Conference. Any active participants are hung up on by FreeClimb. If this is not the desired behavior, use the `RemoveFromConference` command to unbridge Calls that should not be hung up. Note: The Call requesting TerminateConference must be on the same Conference for this command to execute.",
        "x-percl-command": true,
        "x-no-properties": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand"
          },
          {
            "required": [],
            "type": "object",
            "properties": {}
          }
        ]
      },
      "Unpark": {
        "description": "The `Unpark` command resumes a parked call.  Execution continues with the first command in the PerCL scripted returned by the actionUrl specified in the Park command as long as the call is still in progress.  If the call is no longer in progress, any returned PerCL will not be executed. Unpark is a terminal command -- any commands following it in the same script are not executed.",
        "x-percl-command": true,
        "x-no-properties": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand"
          },
          {
            "type": "object"
          }
        ]
      },
      "MutableResourceModel": {
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "description": "The URI for this resource, relative to /apiserver."
          },
          "dateCreated": {
            "type": "string",
            "description": "The date that this resource was created (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT)."
          },
          "dateUpdated": {
            "type": "string",
            "description": "The date that this resource was last updated (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT)."
          },
          "revision": {
            "type": "integer",
            "description": "Revision count for the resource. This count is set to 1 on creation and is incremented every time it is updated."
          }
        }
      },
      "PaginationModel": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total amount of requested resource.",
            "nullable": true
          },
          "start": {
            "type": "integer",
            "description": "Resource index at start of current page",
            "nullable": true
          },
          "end": {
            "type": "integer",
            "description": "Resource index at end of current page",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Current page",
            "nullable": true
          },
          "numPages": {
            "type": "integer",
            "description": "Total number of pages",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page",
            "nullable": true
          },
          "nextPageUri": {
            "type": "string",
            "description": "Uri to retrieve the next page of items",
            "nullable": true
          }
        }
      },
      "Capabilities": {
        "description": "Details for which features this number may be used.",
        "type": "object",
        "required": ["voice", "sms", "tollFree", "tenDLC", "shortCode"],
        "x-is-object": true,
        "x-ref-properties": [false, false, false, false, false],
        "properties": {
          "voice": {
            "description": "Indicates whether a number can be used for voice calls. Replaces voiceEnabled.",
            "type": "boolean",
            "nullable": true
          },
          "sms": {
            "description": "Indicates whether a number can be used SMS messaging. Replaces smsEnabled.",
            "type": "boolean",
            "nullable": true
          },
          "tollFree": {
            "description": "Indicates that a number is toll-free and will make toll-free calls, and when enabled, toll-free messages.",
            "type": "boolean",
            "nullable": true
          },
          "tenDLC": {
            "description": "Indicates that a number, if sms is true, will be used for 10DLC messaging",
            "type": "boolean",
            "nullable": true
          },
          "shortCode": {
            "description": "Indicates that a number is a short code and can be used for short code messaging",
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "TFN": {
        "description": "TollFree Campaign details for this number",
        "type": "object",
        "required": ["campaignId"],
        "x-is-object": true,
        "x-ref-properties": ["\"TEST_STRING\""],
        "properties": {
          "campaignId": {
            "description": "alphanumeric identifier for the TollFree campaign associated with this number",
            "type": "string"
          }
        }
      },
      "AccountRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Description for this account."
          },
          "label": {
            "type": "string",
            "description": "Group to which this account belongs."
          }
        }
      },
      "AccountResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MutableResourceModel"
          },
          {
            "type": "object",
            "properties": {
              "accountId": {
                "type": "string",
                "description": "String that uniquely identifies this account resource.",
                "nullable": true
              },
              "apiKey": {
                "type": "string",
                "description": "The API key assigned to this account. This key must be kept a secret by the customer.",
                "nullable": true
              },
              "alias": {
                "type": "string",
                "description": "A description for this account.",
                "nullable": true
              },
              "label": {
                "type": "string",
                "description": "A string that identifies a category or group to which the account belongs.",
                "nullable": true
              },
              "type": {
                "$ref": "#/components/schemas/AccountType"
              },
              "status": {
                "$ref": "#/components/schemas/AccountStatus"
              },
              "subresourceUris": {
                "type": "object",
                "description": "The list of subresources for this account.",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApplicationResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MutableResourceModel"
          },
          {
            "type": "object",
            "properties": {
              "accountId": {
                "type": "string",
                "description": "ID of the account that owns this phone number.",
                "nullable": true
              },
              "applicationId": {
                "type": "string",
                "description": "ID of the Application that FreeClimb should contact if a Call or SMS arrives for this phone number or a Call from this number is placed. An incoming phone number is not useful until associated with an applicationId.",
                "nullable": true
              },
              "alias": {
                "type": "string",
                "description": "Description for this phone number. Typically the conventionally-formatted version of the phone number.",
                "nullable": true
              },
              "voiceUrl": {
                "type": "string",
                "description": "The URL FreeClimb will request when a phone number assigned to this Application receives a Call. Used for inbound calls only.",
                "nullable": true
              },
              "voiceFallbackUrl": {
                "type": "string",
                "description": "The URL that FreeClimb will request if it times out waiting for a response from the voiceUrl. Used for inbound calls only.",
                "nullable": true
              },
              "callConnectUrl": {
                "type": "string",
                "description": "The URL to which FreeClimb will make a POST request informing the result of the outbound Call request. The status property of the request message specifies if the Call was connected or not.",
                "nullable": true
              },
              "statusCallbackUrl": {
                "type": "string",
                "description": "A URL to which FreeClimb will make a POST request when the Call ends to notify this app.",
                "nullable": true
              },
              "smsUrl": {
                "type": "string",
                "description": "The URL FreeClimb will request when a phone number assigned to this Application receives an incoming SMS message. Used for inbound SMS only.",
                "nullable": true
              },
              "smsFallbackUrl": {
                "type": "string",
                "description": "The URL that FreeClimb will request if it times out waiting for a response from the smsUrl. Used for inbound SMS only.",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApplicationRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "A human readable description of the application, with maximum length 64 characters."
          },
          "voiceUrl": {
            "type": "string",
            "description": "The URL that FreeClimb will request when an inbound call arrives on a phone number assigned to this application. Used only for inbound calls.",
            "nullable": true
          },
          "voiceFallbackUrl": {
            "type": "string",
            "description": "The URL that FreeClimb will request if it times out waiting for a response from the voiceUrl. Used for inbound calls only. Note: A PerCL response is expected to control the inbound call.",
            "nullable": true
          },
          "callConnectUrl": {
            "type": "string",
            "description": "The URL that FreeClimb will request when an outbound call request is complete. Used for outbound calls only.  Note: A PerCL response is expected if the outbound call is connected (status=InProgress) to control the call.",
            "nullable": true
          },
          "statusCallbackUrl": {
            "type": "string",
            "description": "The URL that FreeClimb will request to pass call status (such as call ended) to the application.  Note: This is a notification only; any PerCL returned will be ignored.",
            "nullable": true
          },
          "smsUrl": {
            "type": "string",
            "description": "The URL that FreeClimb will request when a phone number assigned to this application receives an incoming SMS message. Used for inbound SMS only.  Note: Any PerCL returned will be ignored.",
            "nullable": true
          },
          "smsFallbackUrl": {
            "type": "string",
            "description": "The URL that FreeClimb will request if it times out waiting for a response from the smsUrl. Used for inbound SMS only.  Note: Any PerCL returned will be ignored.",
            "nullable": true
          }
        }
      },
      "ApplicationList": {
        "x-implements": "Pagination",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationModel"
          },
          {
            "type": "object",
            "properties": {
              "applications": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplicationResult"
                },
                "nullable": true,
                "x-is-list": true
              }
            }
          }
        ]
      },
      "AvailableNumber": {
        "type": "object",
        "properties": {
          "capabilities": {
            "$ref": "#/components/schemas/Capabilities"
          },
          "campaignId": {
            "type": "string",
            "description": "The campaign ID generated by the campaign registry",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number, in E.164 format (+ country code and phone number: +18003608245).",
            "nullable": true
          },
          "voiceEnabled": {
            "type": "boolean",
            "description": "Typically set to true for all numbers.",
            "deprecated": true,
            "nullable": true
          },
          "smsEnabled": {
            "type": "boolean",
            "description": "Indicates whether the phone number can send and receive SMS messages.",
            "deprecated": true,
            "nullable": true
          },
          "region": {
            "type": "string",
            "description": "The state or province of this phone number.",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "The country of this phone number.",
            "nullable": true
          }
        }
      },
      "AvailableNumberList": {
        "x-implements": "Pagination",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationModel"
          },
          {
            "type": "object",
            "properties": {
              "availablePhoneNumbers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AvailableNumber"
                },
                "nullable": true,
                "x-is-list": true
              }
            }
          }
        ]
      },
      "IncomingNumberResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MutableResourceModel"
          },
          {
            "type": "object",
            "properties": {
              "capabilities": {
                "$ref": "#/components/schemas/Capabilities"
              },
              "campaignId": {
                "type": "string",
                "description": "The campaign ID generated by the campaign registry",
                "nullable": true
              },
              "phoneNumberId": {
                "type": "string",
                "description": "String that uniquely identifies this phone number resource.",
                "nullable": true
              },
              "accountId": {
                "type": "string",
                "description": "ID of the account that owns this phone number.",
                "nullable": true
              },
              "applicationId": {
                "type": "string",
                "description": "ID of the Application that FreeClimb should contact if a Call or SMS arrives for this phone number or a Call from this number is placed. An incoming phone number is not useful until associated with an applicationId.",
                "nullable": true
              },
              "phoneNumber": {
                "type": "string",
                "description": "Phone number in E.164 format.",
                "nullable": true
              },
              "alias": {
                "type": "string",
                "description": "Description for this phone number. Typically the conventionally-formatted version of the phone number.",
                "nullable": true
              },
              "region": {
                "type": "string",
                "description": "State or province of this phone number.",
                "nullable": true
              },
              "country": {
                "type": "string",
                "description": "Country of this phone number.",
                "nullable": true
              },
              "voiceEnabled": {
                "type": "boolean",
                "description": "Indicates whether the phone number can handle Calls. Typically set to true for all numbers.",
                "deprecated": true,
                "nullable": true
              },
              "smsEnabled": {
                "type": "boolean",
                "description": "Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers.",
                "deprecated": true,
                "nullable": true
              },
              "offnet": {
                "type": "boolean",
                "description": "The offnet field is a boolean representing whether the number is offnet registered or not. This field will be rendered only for requests to the IncomingPhone number resource.",
                "nullable": true
              },
              "tfn": {
                "$ref": "#/components/schemas/TFN",
                "nullable": true
              }
            }
          }
        ]
      },
      "IncomingNumberRequest": {
        "type": "object",
        "properties": {
          "applicationId": {
            "type": "string",
            "description": "ID of the Application that should handle calls to this number."
          },
          "alias": {
            "type": "string",
            "description": "Description for this phone number."
          },
          "campaignId": {
            "type": "string",
            "description": "The campaign ID generated by the campaign registry",
            "nullable": true
          }
        }
      },
      "IncomingNumberList": {
        "x-implements": "Pagination",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationModel"
          },
          {
            "type": "object",
            "properties": {
              "incomingPhoneNumbers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IncomingNumberResult"
                },
                "nullable": true,
                "x-is-list": true
              }
            }
          }
        ]
      },
      "BuyIncomingNumberRequest": {
        "type": "object",
        "required": ["phoneNumber"],
        "properties": {
          "phoneNumber": {
            "type": "string",
            "description": "Phone number to purchase in E.164 format (as returned in the list of Available Phone Numbers)."
          },
          "alias": {
            "type": "string",
            "description": "Description for this new incoming phone number (max 64 characters)."
          },
          "applicationId": {
            "type": "string",
            "description": "ID of the application that should handle phone calls to the number."
          }
        }
      },
      "CallResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MutableResourceModel"
          },
          {
            "type": "object",
            "properties": {
              "callId": {
                "type": "string",
                "description": "String that uniquely identifies this Call resource.",
                "nullable": true
              },
              "parentCallId": {
                "type": "string",
                "description": "ID of the Call that created this leg (child Call).",
                "nullable": true
              },
              "accountId": {
                "type": "string",
                "description": "ID of the account that owns this Call.",
                "nullable": true
              },
              "from": {
                "type": "string",
                "description": "Phone number that initiated this Call.",
                "nullable": true
              },
              "to": {
                "type": "string",
                "description": "Phone number that received this Call.",
                "nullable": true
              },
              "phoneNumberId": {
                "type": "string",
                "description": "If the Call was inbound, this is the ID of the IncomingPhoneNumber that received the Call (DNIS). If the Call was outbound, this is the ID of the phone number from which the Call was placed (ANI).",
                "nullable": true
              },
              "callStatus": {
                "$ref": "#/components/schemas/CallStatus"
              },
              "startTime": {
                "type": "string",
                "description": "Start time of the Call (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT). Empty if the Call has not yet been dialed.",
                "nullable": true
              },
              "connectTime": {
                "type": "string",
                "description": "Time the Call was answered (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT). Empty if the Call has not yet been dialed.",
                "nullable": true
              },
              "endTime": {
                "type": "string",
                "description": "End time of the Call (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT). Empty if the Call did not complete successfully.",
                "nullable": true
              },
              "duration": {
                "type": "integer",
                "description": "Total length of the Call in seconds. Measures time between startTime and endTime. This value is empty for busy, failed, unanswered or ongoing Calls.",
                "nullable": true
              },
              "connectDuration": {
                "type": "integer",
                "description": "Length of time that the Call was connected in seconds. Measures time between connectTime and endTime. This value is empty for busy, failed, unanswered or ongoing Calls.",
                "nullable": true
              },
              "direction": {
                "$ref": "#/components/schemas/CallDirection"
              },
              "answeredBy": {
                "$ref": "#/components/schemas/AnsweredBy"
              },
              "subresourceUris": {
                "type": "object",
                "description": "The list of subresources for this Call. These include things like logs and recordings associated with the Call.",
                "nullable": true
              }
            }
          }
        ]
      },
      "UpdateCallRequest": {
        "type": "object",
        "required": ["status"],
        "properties": {
          "status": {
            "$ref": "#/components/schemas/UpdateCallRequestStatus"
          }
        }
      },
      "MakeCallRequest": {
        "type": "object",
        "required": ["from", "to"],
        "properties": {
          "from": {
            "type": "string",
            "description": "Phone number to use as the caller ID. This can be: (a) The To or From number provided in FreeClimb's initial request to your app or (b) Any incoming phone number you have purchased from FreeClimb."
          },
          "to": {
            "type": "string",
            "description": "Phone number to place the Call to."
          },
          "applicationId": {
            "type": "string",
            "description": "Required if no `parentCallId` or `callConnectUrl` has been provided. ID of the application FreeClimb should use to handle this phone call. FreeClimb will use the `callConnectUrl` and `statusCallbackUrl` set on the application unless the `callConnectUrl` attribute is also provided with the request. In this case, the URL specified in that `callConnectUrl` attribute will be used as a replacement of the `callConnectUrl` originally assigned in the application. If the `callConnectUrl` is not set as either an attribute of the request or as part of the specified application, an error will be provided. The application’s voiceUrl parameter is not used for outbound calls."
          },
          "sendDigits": {
            "type": "string",
            "description": "String of digits to dial after connecting to the number. It can include digits `0-9`, `*`, and `#`, and allows embedding a pause between the output of individual digits. The default pause is 500 milliseconds. So, a string such as *1234#* will be played in 2 seconds because of the 4 standard pauses implied within the string. A custom pause is specified by including a positive integer wrapped in curly braces: {n}. For more information, see **sendDigits examples** below."
          },
          "ifMachine": {
            "type": "string",
            "description": "Specifies how FreeClimb should handle this Call if an answering machine answers it."
          },
          "ifMachineUrl": {
            "type": "string",
            "description": "This attribute specifies a URL to which FreeClimb will make a POST request when an answering machine or a fax machine is detected. This URL is required if the ifMachine flag is set to redirect. When ifMachine is set to hangup, ifMachineUrl must not be included in the request. For more information, see **ifMachineUrl example** below."
          },
          "timeout": {
            "type": "integer",
            "description": "Number of seconds that FreeClimb should allow the phone to ring before assuming there is no answer. Default is 30 seconds. Maximum allowed ring-time is determined by the target phone's provider. Note that most providers limit ring-time to 120 seconds.",
            "default": 30,
            "format": "int32"
          },
          "parentCallId": {
            "type": "string",
            "description": "Required if no `applicationId` or `callConnectUrl` has been provided. The ID of the parent Call in the case that this new Call is meant to be treated as a child of an existing Call. This attribute should be included when possible to reduce latency when adding child calls to Conferences containing the parent Call. A call can only be used as a parent once the call is in progress or as an inbound call that is still ringing. An outbound call is considered to be in progress once the `outdialConnect` or `outdialApiConnect` webhook is invoked. An inbound call is ringing when the inbound webhook is invoked. If a `callConnectUrl` attribute is also included with the `parentCallId` in the request, this URL will be used as a replacement of the `callConnectUrl` originally assigned in the parent call."
          },
          "privacyMode": {
            "type": "boolean",
            "description": "Activate privacy mode in order to obscure log data that can potentially expose private information."
          },
          "callConnectUrl": {
            "type": "string",
            "description": "The URL that FreeClimb should use to handle this phone call. If an applicationId or parentCallId have already been provided, this callConnectUrl attribute will be used as a replacement of the callConnectUrl originally assigned in the application or parent call."
          }
        }
      },
      "CallList": {
        "x-implements": "Pagination",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationModel"
          },
          {
            "type": "object",
            "properties": {
              "calls": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CallResult"
                },
                "nullable": true,
                "x-is-list": true
              }
            }
          }
        ]
      },
      "RecordingResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MutableResourceModel"
          },
          {
            "type": "object",
            "properties": {
              "recordingId": {
                "type": "string",
                "description": "String that uniquely identifies this recording resource.",
                "nullable": true
              },
              "accountId": {
                "type": "string",
                "description": "ID of the account that created this recording.",
                "nullable": true
              },
              "callId": {
                "type": "string",
                "description": "ID of the Call that was recorded. If a Conference was recorded, this value is empty and the conferenceId property is populated.",
                "nullable": true
              },
              "durationSec": {
                "type": "integer",
                "description": "Length of the recording in seconds.",
                "nullable": true
              },
              "conferenceId": {
                "type": "string",
                "description": "ID of the Conference that was recorded. If a Call was recorded, this value is empty and the callId property is populated.",
                "nullable": true
              }
            }
          }
        ]
      },
      "RecordingList": {
        "x-implements": "Pagination",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationModel"
          },
          {
            "type": "object",
            "properties": {
              "recordings": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RecordingResult"
                },
                "nullable": true,
                "x-is-list": true
              }
            }
          }
        ]
      },
      "LogResult": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "integer",
            "description": "Time that the log was generated. The time is represented as microseconds since the Unix Epoch.",
            "nullable": true
          },
          "level": {
            "$ref": "#/components/schemas/LogLevel"
          },
          "requestId": {
            "type": "string",
            "description": "ID of the request associated with the log. The requestId is propagated across all logs generated by FreeClimb when processing a request.",
            "nullable": true
          },
          "accountId": {
            "type": "string",
            "description": "ID of the account that this log was generated under.",
            "nullable": true
          },
          "callId": {
            "type": "string",
            "description": "ID of the Call associated with the log. Can be set to null if the log was generated without regard to a specific Call.",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "A simple string describing the event being logged.",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "JSON document containing metadata about the event. Some log messages may include request and response header content in this field.",
            "nullable": true
          }
        }
      },
      "LogList": {
        "x-implements": "Pagination",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationModel"
          },
          {
            "type": "object",
            "properties": {
              "logs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LogResult"
                },
                "nullable": true,
                "x-is-list": true
              }
            }
          }
        ]
      },
      "ConferenceResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MutableResourceModel"
          },
          {
            "type": "object",
            "properties": {
              "conferenceId": {
                "type": "string",
                "description": "A string that uniquely identifies this Conference resource.",
                "nullable": true
              },
              "accountId": {
                "type": "string",
                "description": "ID of the account that created this Conference.",
                "nullable": true
              },
              "alias": {
                "type": "string",
                "description": "A description for this Conference.",
                "nullable": true
              },
              "playBeep": {
                "$ref": "#/components/schemas/PlayBeep",
                "description": "Setting that controls when a beep is played. One of: always, never, entryOnly, exitOnly. Defaults to always."
              },
              "record": {
                "type": "boolean",
                "description": "Flag indicating whether recording is enabled for this Conference.",
                "nullable": true
              },
              "status": {
                "$ref": "#/components/schemas/ConferenceStatus"
              },
              "waitUrl": {
                "type": "string",
                "description": "URL referencing the audio file to be used as default wait music for the Conference when it is in the populated state.",
                "nullable": true
              },
              "actionUrl": {
                "type": "string",
                "description": "URL invoked once the Conference is successfully created.",
                "nullable": true
              },
              "statusCallbackUrl": {
                "type": "string",
                "description": "URL to inform that the Conference status has changed.",
                "nullable": true
              },
              "subresourceUris": {
                "type": "object",
                "description": "The list of subresources for this Conference. This includes participants and/or recordings.",
                "nullable": true
              }
            }
          }
        ]
      },
      "MessagesList": {
        "x-implements": "Pagination",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationModel"
          },
          {
            "type": "object",
            "properties": {
              "messages": {
                "type": "array",
                "description": "Array of messages",
                "items": {
                  "$ref": "#/components/schemas/MessageResult"
                },
                "nullable": true,
                "x-is-list": true
              }
            }
          }
        ]
      },
      "MessageRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MutableResourceModel"
          },
          {
            "type": "object",
            "required": ["from", "to", "text"],
            "properties": {
              "from": {
                "type": "string",
                "description": "Phone number to use as the sender. This must be an incoming phone number that you have purchased from FreeClimb."
              },
              "to": {
                "type": "string",
                "description": "Phone number to receive the message. Must be within FreeClimb's service area."
              },
              "text": {
                "type": "string",
                "description": "Text contained in the message (maximum 160 characters).   **Note:** For text, only ASCII characters are supported."
              },
              "notificationUrl": {
                "type": "string",
                "description": "When the Message changes status, this URL is invoked using HTTP POST with the messageStatus parameters.  **Note:** This is a notification only; any PerCL returned is ignored."
              },
              "mediaUrls": {
                "type": "array",
                "description": "an array of HTTP URLs which are to be used as attachments to the message. This will force the message into being an MMS message and must be done using a from number which is MMS capabile.",
                "x-is-list": true,
                "items": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          }
        ]
      },
      "CompletionRequest": {
        "type": "object",
        "required": ["query"],
        "properties": {
          "query": {
            "type": "string",
            "maxLength": 2000,
            "description": "Question to ask the Knowledge Base",
            "x-completion-request-query": true
          }
        }
      },
      "CompletionResult": {
        "type": "object",
        "required": ["response", "status"],
        "x-completion-result": true,
        "properties": {
          "response": {
            "type": "string",
            "description": "The generative response from the KnowledgeBase"
          },
          "status": {
            "type": "string",
            "x-has-writer": true,
            "description": "Completion result status. Possible values: success, no_context",
            "x-enum-type": "CompletionResultStatusEnum",
            "x-enum-type-c-sharp": "StatusEnum",
            "enum": ["success", "no_context"],
            "x-enum-varnames": ["SUCCESS", "NO_CONTEXT"],
            "x-enum-varnames-python": ["success", "no_context"]
          }
        }
      },
      "ConferenceList": {
        "x-implements": "Pagination",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationModel"
          },
          {
            "type": "object",
            "properties": {
              "conferences": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConferenceResult"
                },
                "nullable": true,
                "x-is-list": true
              }
            }
          }
        ]
      },
      "MessageResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MutableResourceModel"
          },
          {
            "type": "object",
            "properties": {
              "accountId": {
                "type": "string",
                "description": "String that uniquely identifies this account resource.",
                "nullable": true
              },
              "messageId": {
                "type": "string",
                "description": "String that uniquely identifies this message resource",
                "nullable": true
              },
              "status": {
                "$ref": "#/components/schemas/MessageStatus"
              },
              "from": {
                "type": "string",
                "description": "Phone number in E.164 format that sent the message.",
                "nullable": true
              },
              "to": {
                "type": "string",
                "description": "Phone number in E.164 format that received the message.",
                "nullable": true
              },
              "text": {
                "type": "string",
                "description": "Message contents",
                "nullable": true
              },
              "direction": {
                "type": "string",
                "description": "Noting whether the message was inbound or outbound",
                "nullable": true
              },
              "notificationUrl": {
                "type": "string",
                "description": "URL invoked when message sent",
                "nullable": true
              },
              "brandId": {
                "type": "string",
                "description": "The unique identifier for the brand associated with the message",
                "nullable": true
              },
              "campaignId": {
                "type": "string",
                "description": "The unique identifier for the campaign associated with the message",
                "nullable": true
              },
              "segmentCount": {
                "type": "number",
                "description": "The number of segments into which the message was split",
                "nullable": true
              },
              "mediaUrls": {
                "type": "array",
                "description": "an array of HTTP URLs which were attached this this message",
                "x-is-list": true,
                "items": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          }
        ]
      },
      "CreateConferenceRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "A description for this Conference. Maximum 64 characters."
          },
          "playBeep": {
            "$ref": "#/components/schemas/PlayBeep"
          },
          "record": {
            "type": "boolean",
            "description": "Setting to `true` records the entire Conference."
          },
          "waitUrl": {
            "type": "string",
            "description": "If specified, a URL for the audio file that provides custom hold music for the Conference when it is in the populated state. Otherwise, FreeClimb uses a system default audio file. This is always fetched using HTTP GET and is fetched just once &mdash; when the Conference is created."
          },
          "statusCallbackUrl": {
            "type": "string",
            "description": "This URL is invoked when the status of the Conference changes. For more information, see **statusCallbackUrl** (below)."
          }
        }
      },
      "UpdateConferenceRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Description for this conference. Maximum 64 characters."
          },
          "playBeep": {
            "$ref": "#/components/schemas/PlayBeep"
          },
          "status": {
            "$ref": "#/components/schemas/UpdateConferenceRequestStatus"
          }
        }
      },
      "ConferenceParticipantResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MutableResourceModel"
          },
          {
            "type": "object",
            "properties": {
              "accountId": {
                "type": "string",
                "description": "ID of the account that created this participant.",
                "nullable": true
              },
              "conferenceId": {
                "type": "string",
                "description": "ID of the conference this participant is in.",
                "nullable": true
              },
              "callId": {
                "type": "string",
                "description": "ID of the Call associated with this Participant.",
                "nullable": true
              },
              "talk": {
                "type": "boolean",
                "description": "True if this Participant has talk privileges in the Conference. False otherwise.",
                "nullable": true
              },
              "listen": {
                "type": "boolean",
                "description": "True if this Participant has listen privileges in the Conference. False otherwise.",
                "nullable": true
              },
              "startConfOnEnter": {
                "type": "boolean",
                "description": "True if this Participant joining the Conference caused the Conference to start (status = inProgress). False otherwise.",
                "nullable": true
              }
            }
          }
        ]
      },
      "UpdateConferenceParticipantRequest": {
        "type": "object",
        "properties": {
          "talk": {
            "type": "boolean",
            "description": "(Optional) Default is `true`. Setting to `false` mutes the Participant. FreeClimb returns an error and ignores any other value."
          },
          "listen": {
            "type": "boolean",
            "description": "(Optional) Default is `true`. Setting to `false` silences the Conference for this Participant. FreeClimb returns an error and ignores any other value."
          }
        }
      },
      "ConferenceParticipantList": {
        "x-implements": "Pagination",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationModel"
          },
          {
            "type": "object",
            "properties": {
              "participants": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConferenceParticipantResult"
                },
                "nullable": true,
                "x-is-list": true
              }
            }
          }
        ]
      },
      "QueueResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MutableResourceModel"
          },
          {
            "type": "object",
            "properties": {
              "accountId": {
                "type": "string",
                "description": "ID of the account that created this Queue.",
                "nullable": true
              },
              "queueId": {
                "type": "string",
                "description": "A string that uniquely identifies this Queue resource.",
                "nullable": true
              },
              "alias": {
                "type": "string",
                "description": "A description for this Queue.",
                "nullable": true
              },
              "maxSize": {
                "type": "integer",
                "description": "The maximum number of Calls permitted in the Queue. Default is 100. Maximum is 1000.",
                "nullable": true
              },
              "currentSize": {
                "type": "integer",
                "description": "Count of Calls currently in the Queue.",
                "nullable": true
              },
              "averageQueueRemovalTime": {
                "type": "integer",
                "description": "The average amount of time (in seconds) for a call to be removed from the queue.",
                "nullable": true
              },
              "subresourceUris": {
                "type": "object",
                "description": "List of subresources for this Queue (which includes Queue members).",
                "nullable": true
              }
            }
          }
        ]
      },
      "QueueRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Description for this Queue. Max length is 64 characters."
          },
          "maxSize": {
            "type": "integer",
            "description": "Maximum number of calls this queue can hold. Default is 100. Maximum is 1000. **Note:** Reducing the maxSize of a Queue causes the Queue to reject incoming requests until it shrinks below the new value of maxSize.",
            "default": 100,
            "format": "int32"
          }
        }
      },
      "QueueList": {
        "x-implements": "Pagination",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationModel"
          },
          {
            "type": "object",
            "properties": {
              "queues": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/QueueResult"
                },
                "nullable": true,
                "x-is-list": true
              }
            }
          }
        ]
      },
      "QueueMember": {
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "description": "URI for this Queue Member resource, relative to the API base URL.",
            "nullable": true
          },
          "callId": {
            "type": "string",
            "description": "ID of the Call associated with this Queue Member.",
            "nullable": true
          },
          "waitTime": {
            "type": "integer",
            "description": "Number of seconds the Member has been in the queue.",
            "nullable": true
          },
          "position": {
            "type": "integer",
            "description": "Member's current position in the Queue, 1 indexed.",
            "nullable": true
          },
          "dateEnqueued": {
            "type": "string",
            "description": "Date that the Member was enqueued (GMT), given in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT).",
            "nullable": true
          }
        }
      },
      "QueueMemberList": {
        "x-implements": "Pagination",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationModel"
          },
          {
            "type": "object",
            "properties": {
              "queueMembers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/QueueMember"
                },
                "nullable": true,
                "x-is-list": true
              }
            }
          }
        ]
      },
      "FilterLogsRequest": {
        "type": "object",
        "required": ["pql"],
        "properties": {
          "pql": {
            "type": "string",
            "description": "The filter query for retrieving logs. See **Performance Query Language** below."
          }
        }
      },
      "SMSTenDLCCampaignsListResult": {
        "x-implements": "Pagination",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationModel"
          },
          {
            "type": "object",
            "properties": {
              "campaigns": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SMSTenDLCCampaign"
                },
                "nullable": true,
                "x-is-list": true
              }
            }
          }
        ]
      },
      "SMSTenDLCCampaign": {
        "required": [
          "brandId",
          "campaignId",
          "cspId",
          "description",
          "mock",
          "subUsecases",
          "usecase"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "ID of the account that created this Queue.",
            "nullable": true
          },
          "campaignId": {
            "type": "string",
            "description": "Alphanumeric identifier assigned by the registry for a campaign. This identifier is required by the NetNumber OSR SMS enabling process of 10DLC."
          },
          "cspId": {
            "type": "string",
            "description": "Alphanumeric identifier of the CSP associated with this campaign."
          },
          "resellerId": {
            "maxLength": 8,
            "type": "string",
            "nullable": true,
            "description": "Alphanumeric identifier of the reseller that you want to associate with this campaign."
          },
          "status": {
            "type": "string",
            "x-has-writer": true,
            "description": "Current campaign status. Possible values: ACTIVE, EXPIRED. A newly created campaign defaults to ACTIVE status. ",
            "x-enum-type": "SMSTenDLCCampaignStatusEnum",
            "x-enum-type-c-sharp": "StatusEnum",
            "enum": ["ACTIVE", "EXPIRED"],
            "x-enum-varnames": ["ACTIVE", "EXPIRED"]
          },
          "createDate": {
            "type": "string",
            "description": "Unix timestamp when campaign was created.",
            "format": "date-time",
            "x-is-date-time": true
          },
          "autoRenewal": {
            "type": "boolean",
            "description": "Campaign subscription auto-renewal status."
          },
          "billedDate": {
            "type": "string",
            "description": "Campaign recent billed date.",
            "format": "date-time",
            "x-is-date-time": true,
            "nullable": true
          },
          "brandId": {
            "maxLength": 8,
            "type": "string",
            "description": "Alphanumeric identifier of the brand associated with this campaign."
          },
          "usecase": {
            "maxLength": 20,
            "type": "string",
            "description": "Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase` operation to retrieve usecases available for given brand."
          },
          "subUsecases": {
            "uniqueItems": true,
            "x-is-set": true,
            "type": "array",
            "description": "Campaign sub-usecases. Must be of defined valid sub-usecase types. Use `/registry/enum/usecase` operation to retrieve list of valid sub-usecases",
            "items": {
              "type": "string",
              "description": "Campaign sub-usecases. Must be of defined valid sub-usecase types. Use `/registry/enum/usecase` operation to retrieve list of valid sub-usecases"
            }
          },
          "description": {
            "maxLength": 4096,
            "type": "string",
            "description": "Summary description of this campaign."
          },
          "embeddedLink": {
            "type": "boolean",
            "description": "Does message generated by the campaign include URL link in SMS?",
            "default": false
          },
          "embeddedPhone": {
            "type": "boolean",
            "description": "Does message generated by the campaign include phone number in SMS?",
            "default": false
          },
          "affiliateMarketing": {
            "type": "boolean",
            "description": "Does message content controlled by affiliate marketing other than the brand?"
          },
          "numberPool": {
            "type": "boolean",
            "description": "Does campaign utilize pool of phone nubers?",
            "default": false
          },
          "ageGated": {
            "type": "boolean",
            "description": "Age gated content in campaign."
          },
          "directLending": {
            "type": "boolean"
          },
          "subscriberOptin": {
            "type": "boolean",
            "description": "Does campaign require subscriber to opt-in before SMS is sent to subscriber?",
            "default": false
          },
          "subscriberOptout": {
            "type": "boolean",
            "description": "Does campaign support subscriber opt-out keyword(s)?",
            "default": false
          },
          "subscriberHelp": {
            "type": "boolean",
            "description": "Does campaign responds to help keyword(s)?",
            "default": false
          },
          "sample1": {
            "maxLength": 1024,
            "type": "string",
            "description": "Message sample. Some campaign tiers require 1 or more message samples."
          },
          "sample2": {
            "maxLength": 1024,
            "type": "string",
            "nullable": true,
            "description": "Message sample. Some campaign tiers require 2 or more message samples."
          },
          "sample3": {
            "maxLength": 1024,
            "type": "string",
            "nullable": true,
            "description": "Message sample. Some campaign tiers require 3 or more message samples."
          },
          "sample4": {
            "maxLength": 1024,
            "type": "string",
            "nullable": true,
            "description": "Message sample. Some campaign tiers require 4 or more message samples."
          },
          "sample5": {
            "maxLength": 1024,
            "type": "string",
            "nullable": true,
            "description": "Message sample. Some campaign tiers require 5 or more message samples."
          },
          "messageFlow": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true,
            "description": "Message flow description."
          },
          "helpMessage": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "description": "Help message of the campaign."
          },
          "optinKeywords": {
            "maxLength": 255,
            "type": "string",
            "description": "Subscriber opt-in keywords. Multiple keywords are comma separated without space."
          },
          "optoutKeywords": {
            "maxLength": 255,
            "type": "string",
            "description": "Subscriber opt-out keywords. Multiple keywords are comma separated without space."
          },
          "helpKeywords": {
            "maxLength": 255,
            "type": "string",
            "description": "Subscriber help keywords. Multiple keywords are comma separated without space."
          },
          "optinMessage": {
            "maxLength": 255,
            "type": "string",
            "description": "Subscriber opt-in message."
          },
          "optoutMessage": {
            "maxLength": 255,
            "type": "string",
            "description": "Subscriber opt-out message."
          },
          "referenceId": {
            "maxLength": 50,
            "type": "string",
            "nullable": true,
            "description": "Caller supplied campaign reference ID. If supplied, the value must be unique across all submitted campaigns. Can be used to prevent duplicate campaign registrations."
          },
          "mock": {
            "type": "boolean",
            "description": "Campaign created from mock brand. Mocked campaign cannot be shared with an upstream CNP."
          },
          "nextRenewalOrExpirationDate": {
            "type": "string",
            "nullable": true,
            "description": "When the campaign would be due for its next renew/bill date.",
            "format": "date",
            "x-is-date": true,
            "example": "2000-01-01"
          }
        },
        "example": {
          "campaignId": "CX56XX4",
          "accountId": "ACe39970fb7c31c747c67148900b4d9da60a41e532",
          "cspId": "SX56XX4",
          "brandId": "BX56XX4",
          "usecase": "2FA",
          "description": "mock campaign.",
          "subUsecases": [],
          "resellerId": null,
          "sample1": "Your verification code from FreeClimb is 000000. It expires in 10 minutes.",
          "sample2": null,
          "sample3": null,
          "sample4": null,
          "sample5": null,
          "messageFlow": null,
          "helpMessage": null,
          "referenceId": null,
          "status": "EXPIRED",
          "mock": true,
          "autoRenewal": false,
          "embeddedLink": false,
          "embeddedPhone": false,
          "affiliateMarketing": false,
          "numberPool": false,
          "ageGated": false,
          "directLending": false,
          "subscriberOptin": true,
          "subscriberOptout": false,
          "subscriberHelp": true,
          "createDate": "2022-07-05T15:17:05Z",
          "billedDate": "2022-07-05T00:00:00Z",
          "nextRenewalOrExpirationDate": null
        }
      },
      "SMSTenDLCPartnerCampaignsListResult": {
        "x-implements": "Pagination",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationModel"
          },
          {
            "type": "object",
            "properties": {
              "partnerCampaigns": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SMSTenDLCPartnerCampaign"
                },
                "nullable": true,
                "x-is-list": true
              }
            }
          }
        ]
      },
      "SMSTenDLCPartnerCampaign": {
        "required": ["brandId", "campaignId", "description", "usecase"],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "ID of the account that created this Queue.",
            "nullable": true
          },
          "campaignId": {
            "type": "string",
            "description": "Alphanumeric identifier assigned by the registry for a campaign. This identifier is required by the NetNumber OSR SMS enabling process of 10DLC."
          },
          "status": {
            "type": "string",
            "x-has-writer": true,
            "description": "Current campaign status. Possible values: ACTIVE, EXPIRED. A newly created campaign defaults to ACTIVE status. ",
            "x-enum-type": "SMSTenDLCPartnerCampaignStatusEnum",
            "x-enum-type-c-sharp": "StatusEnum",
            "enum": ["ACTIVE", "EXPIRED"],
            "x-enum-varnames": ["ACTIVE", "EXPIRED"]
          },
          "createDate": {
            "type": "string",
            "description": "Unix timestamp when campaign was created.",
            "format": "date-time",
            "x-is-date-time": true
          },
          "brandId": {
            "maxLength": 8,
            "type": "string",
            "description": "Alphanumeric identifier of the brand associated with this campaign."
          },
          "usecase": {
            "maxLength": 20,
            "type": "string",
            "description": "Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase` operation to retrieve usecases available for given brand."
          },
          "description": {
            "maxLength": 4096,
            "type": "string",
            "description": "Summary description of this campaign."
          },
          "embeddedLink": {
            "type": "boolean",
            "description": "Does message generated by the campaign include URL link in SMS?",
            "default": false
          },
          "embeddedPhone": {
            "type": "boolean",
            "description": "Does message generated by the campaign include phone number in SMS?",
            "default": false
          },
          "affiliateMarketing": {
            "type": "boolean",
            "description": "Does message content controlled by affiliate marketing other than the brand?"
          },
          "numberPool": {
            "type": "boolean",
            "description": "Does campaign utilize pool of phone nubers?",
            "default": false
          },
          "ageGated": {
            "type": "boolean",
            "description": "Age gated content in campaign."
          },
          "directLending": {
            "type": "boolean"
          },
          "subscriberOptin": {
            "type": "boolean",
            "description": "Does campaign require subscriber to opt-in before SMS is sent to subscriber?",
            "default": false
          },
          "subscriberOptout": {
            "type": "boolean",
            "description": "Does campaign support subscriber opt-out keyword(s)?",
            "default": false
          },
          "subscriberHelp": {
            "type": "boolean",
            "description": "Does campaign responds to help keyword(s)?",
            "default": false
          },
          "sample1": {
            "maxLength": 1024,
            "type": "string",
            "description": "Message sample. Some campaign tiers require 1 or more message samples."
          },
          "sample2": {
            "maxLength": 1024,
            "type": "string",
            "nullable": true,
            "description": "Message sample. Some campaign tiers require 2 or more message samples."
          },
          "sample3": {
            "maxLength": 1024,
            "type": "string",
            "nullable": true,
            "description": "Message sample. Some campaign tiers require 3 or more message samples."
          },
          "sample4": {
            "maxLength": 1024,
            "type": "string",
            "nullable": true,
            "description": "Message sample. Some campaign tiers require 4 or more message samples."
          },
          "sample5": {
            "maxLength": 1024,
            "type": "string",
            "nullable": true,
            "description": "Message sample. Some campaign tiers require 5 or more message samples."
          },
          "messageFlow": {
            "maxLength": 2048,
            "type": "string",
            "nullable": true,
            "description": "Message flow description."
          },
          "helpMessage": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "description": "Help message of the campaign."
          },
          "optinKeywords": {
            "maxLength": 255,
            "type": "string",
            "description": "Subscriber opt-in keywords. Multiple keywords are comma separated without space."
          },
          "optoutKeywords": {
            "maxLength": 255,
            "type": "string",
            "description": "Subscriber opt-out keywords. Multiple keywords are comma separated without space."
          },
          "helpKeywords": {
            "maxLength": 255,
            "type": "string",
            "description": "Subscriber help keywords. Multiple keywords are comma separated without space."
          },
          "optinMessage": {
            "maxLength": 255,
            "type": "string",
            "description": "Subscriber opt-in message."
          },
          "optoutMessage": {
            "maxLength": 255,
            "type": "string",
            "description": "Subscriber opt-out message."
          },
          "brand": {
            "$ref": "#/components/schemas/SMSTenDLCPartnerCampaignBrand",
            "x-partner-campaign-brand": true
          }
        },
        "example": {
          "campaignId": "CX56XX4",
          "accountId": "ACe39970fb7c31c747c67148900b4d9da60a41e532",
          "brandId": "BX56XX4",
          "usecase": "2FA",
          "description": "mock campaign.",
          "sample1": "Your verification code from FreeClimb is 000000. It expires in 10 minutes.",
          "sample2": null,
          "sample3": null,
          "sample4": null,
          "sample5": null,
          "messageFlow": null,
          "helpMessage": null,
          "status": "EXPIRED",
          "embeddedLink": false,
          "embeddedPhone": false,
          "affiliateMarketing": false,
          "numberPool": false,
          "ageGated": false,
          "directLending": false,
          "subscriberOptin": true,
          "subscriberOptout": false,
          "subscriberHelp": true,
          "createDate": "2022-07-05T15:17:05Z",
          "optinKeywords": "START",
          "optoutKeywords": "STOP",
          "helpKeywords": "HELP",
          "optinMessage": "",
          "optoutMessage": "",
          "brand": {
            "optionalAttributes": {},
            "brandId": "BVCEBIJ",
            "firstName": "",
            "lastName": "",
            "displayName": "FreeClimb LLC(mock)",
            "companyName": "FreeClimb LLC",
            "phone": "+18475722071",
            "email": "bmabry@vailsys.com",
            "website": "https://www.freeclimb.com/",
            "evpVettingScore": 22
          }
        }
      },
      "SMSTenDLCPartnerCampaignBrand": {
        "required": ["email", "phone"],
        "type": "object",
        "x-is-object": true,
        "x-sms-ten-dlc-partner-campaign-brand": true,
        "x-ref-properties": [
          "\"TEST_STRING\"",
          "\"TEST_STRING\"",
          "\"TEST_STRING\"",
          "\"TEST_STRING\"",
          "\"TEST_STRING\"",
          "\"TEST_STRING\"",
          "\"TEST_STRING\"",
          "\"TEST_STRING\"",
          "new Dictionary<string, object>()",
          "1"
        ],
        "properties": {
          "accountId": {
            "type": "string",
            "description": "ID of the account that created this Queue.",
            "nullable": true
          },
          "brandId": {
            "type": "string",
            "description": "Unique identifier assigned to the brand by the registry.",
            "readOnly": true
          },
          "firstName": {
            "maxLength": 100,
            "type": "string",
            "description": "First or given name. ",
            "example": "John"
          },
          "lastName": {
            "maxLength": 100,
            "type": "string",
            "description": "Last or Surname.",
            "example": "Doe"
          },
          "displayName": {
            "maxLength": 255,
            "type": "string",
            "description": "Display or marketing name of the brand.",
            "example": "ABC Mobile"
          },
          "companyName": {
            "maxLength": 255,
            "type": "string",
            "description": "(Required for Non-profit/private/public) Legal company name.",
            "example": "ABC Inc."
          },
          "phone": {
            "maxLength": 20,
            "type": "string",
            "description": "Valid phone number in e.164 international format.",
            "example": "+12024567890"
          },
          "email": {
            "maxLength": 100,
            "type": "string",
            "description": "Valid email address of brand support contact."
          },
          "website": {
            "maxLength": 100,
            "type": "string",
            "description": "Brand website URL.",
            "example": "http://www.abcmobile.com"
          },
          "optionalAttributes": {
            "x-is-map": true,
            "type": "object",
            "x-is-hash": true,
            "additionalProperties": {
              "type": "object",
              "description": "Optional brand attributes. Please refer to GET /enum/optionalAttributeNames for dictionary of optional attribute names."
            },
            "description": "Optional brand attributes. Please refer to GET /enum/optionalAttributeNames for dictionary of optional attribute names."
          },
          "evpVettingScore": {
            "type": "integer",
            "description": "External vetting score."
          }
        }
      },
      "SMSTenDLCBrandsListResult": {
        "x-implements": "Pagination",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationModel"
          },
          {
            "type": "object",
            "properties": {
              "brands": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SMSTenDLCBrand"
                },
                "nullable": true,
                "x-is-list": true
              }
            }
          }
        ]
      },
      "SMSTenDLCBrand": {
        "required": [
          "brandRelationship",
          "country",
          "displayName",
          "email",
          "entityType",
          "identityStatus",
          "mock",
          "phone",
          "vertical"
        ],
        "type": "object",
        "x-sms-ten-dlc-brand": true,
        "properties": {
          "accountId": {
            "type": "string",
            "description": "ID of the account that created this Queue.",
            "nullable": true
          },
          "entityType": {
            "maxLength": 20,
            "type": "string",
            "x-has-writer": true,
            "description": "Entity type behind the brand. This is the form of business establishment.",
            "x-enum-type": "SMSTenDLCBrandEntityTypeEnum",
            "x-enum-type-c-sharp": "EntityTypeEnum",
            "enum": [
              "PRIVATE_PROFIT",
              "PUBLIC_PROFIT",
              "NON_PROFIT",
              "GOVERNMENT",
              "SOLE_PROPRIETOR"
            ],
            "x-enum-varnames": [
              "PRIVATE_PROFIT",
              "PUBLIC_PROFIT",
              "NON_PROFIT",
              "GOVERNMENT",
              "SOLE_PROPRIETOR"
            ]
          },
          "cspId": {
            "type": "string",
            "description": "Unique identifier assigned to the csp by the registry.",
            "readOnly": true
          },
          "brandId": {
            "type": "string",
            "description": "Unique identifier assigned to the brand by the registry.",
            "readOnly": true
          },
          "firstName": {
            "maxLength": 100,
            "type": "string",
            "description": "First or given name. ",
            "example": "John"
          },
          "lastName": {
            "maxLength": 100,
            "type": "string",
            "description": "Last or Surname.",
            "example": "Doe"
          },
          "displayName": {
            "maxLength": 255,
            "type": "string",
            "description": "Display or marketing name of the brand.",
            "example": "ABC Mobile"
          },
          "companyName": {
            "maxLength": 255,
            "type": "string",
            "description": "(Required for Non-profit/private/public) Legal company name.",
            "example": "ABC Inc."
          },
          "ein": {
            "maxLength": 21,
            "type": "string",
            "description": "(Required for Non-profit) Government assigned corporate tax ID. EIN is 9-digits in U.S.",
            "example": "111111111"
          },
          "einIssuingCountry": {
            "maxLength": 2,
            "type": "string",
            "description": "ISO2 2 characters country code. Example: US - United States",
            "example": "US"
          },
          "phone": {
            "maxLength": 20,
            "type": "string",
            "description": "Valid phone number in e.164 international format.",
            "example": "+12024567890"
          },
          "street": {
            "maxLength": 100,
            "type": "string",
            "description": "Street number and name.",
            "example": "123 6th Ave"
          },
          "city": {
            "maxLength": 100,
            "type": "string",
            "description": "City name",
            "example": "New York"
          },
          "state": {
            "maxLength": 20,
            "type": "string",
            "description": "State. Must be 2 letters code for United States.",
            "example": "NY"
          },
          "postalCode": {
            "maxLength": 10,
            "type": "string",
            "description": "Postal codes. Use 5 digit zipcode for United States",
            "example": "10001"
          },
          "country": {
            "maxLength": 2,
            "type": "string",
            "description": "ISO2 2 characters country code. Example: US - United States",
            "example": "US"
          },
          "email": {
            "maxLength": 100,
            "type": "string",
            "description": "Valid email address of brand support contact."
          },
          "stockSymbol": {
            "maxLength": 10,
            "type": "string",
            "description": "(Required for public company) stock symbol.",
            "example": "ABC"
          },
          "stockExchange": {
            "type": "string",
            "x-has-writer": true,
            "description": "(Required for public company) stock exchange.",
            "example": "NASDAQ",
            "x-enum-type": "SMSTenDLCBrandStockExchangeEnum",
            "x-enum-type-c-sharp": "StockExchangeEnum",
            "enum": [
              "NONE",
              "NASDAQ",
              "NYSE",
              "AMEX",
              "AMX",
              "ASX",
              "B3",
              "BME",
              "BSE",
              "FRA",
              "ICEX",
              "JPX",
              "JSE",
              "KRX",
              "LON",
              "NSE",
              "OMX",
              "SEHK",
              "SGX",
              "SSE",
              "STO",
              "SWX",
              "SZSE",
              "TSX",
              "TWSE",
              "VSE",
              "OTHER"
            ],
            "x-enum-varnames": [
              "NONE",
              "NASDAQ",
              "NYSE",
              "AMEX",
              "AMX",
              "ASX",
              "B3",
              "BME",
              "BSE",
              "FRA",
              "ICEX",
              "JPX",
              "JSE",
              "KRX",
              "LON",
              "NSE",
              "OMX",
              "SEHK",
              "SGX",
              "SSE",
              "STO",
              "SWX",
              "SZSE",
              "TSX",
              "TWSE",
              "VSE",
              "OTHER"
            ]
          },
          "ipAddress": {
            "maxLength": 50,
            "type": "string",
            "description": "IP address of the browser requesting to create brand identity."
          },
          "website": {
            "maxLength": 100,
            "type": "string",
            "description": "Brand website URL.",
            "example": "http://www.abcmobile.com"
          },
          "brandRelationship": {
            "type": "string",
            "x-has-writer": true,
            "description": "Brand relationship to the CSP",
            "x-enum-type": "SMSTenDLCBrandBrandRelationshipEnum",
            "x-enum-type-c-sharp": "BrandRelationshipEnum",
            "enum": [
              "BASIC_ACCOUNT",
              "SMALL_ACCOUNT",
              "MEDIUM_ACCOUNT",
              "LARGE_ACCOUNT",
              "KEY_ACCOUNT"
            ],
            "x-enum-varnames": [
              "BASIC_ACCOUNT",
              "SMALL_ACCOUNT",
              "MEDIUM_ACCOUNT",
              "LARGE_ACCOUNT",
              "KEY_ACCOUNT"
            ]
          },
          "vertical": {
            "maxLength": 50,
            "type": "string",
            "description": "Vertical or industry segment of the brand."
          },
          "altBusinessId": {
            "maxLength": 50,
            "type": "string",
            "description": "Alternate business identifier such as DUNS, LEI, or GIIN"
          },
          "altBusinessIdType": {
            "type": "string",
            "x-has-writer": true,
            "x-enum-type": "SMSTenDLCBrandAltBusinessIdTypeEnum",
            "x-enum-type-c-sharp": "AltBusinessIdTypeEnum",
            "enum": ["NONE", "DUNS", "GIIN", "LEI"],
            "x-enum-varnames": ["NONE", "DUNS", "GIIN", "LEI"],
            "description": "The type of the Alternative business identifier"
          },
          "universalEin": {
            "type": "string",
            "description": "Universal EIN of Brand, Read Only.",
            "readOnly": true
          },
          "referenceId": {
            "maxLength": 50,
            "type": "string",
            "description": "Caller supplied brand reference ID. If supplied, the value must be unique across all submitted brands. Can be used to prevent duplicate brand registrations."
          },
          "optionalAttributes": {
            "x-is-map": true,
            "type": "object",
            "x-is-hash": true,
            "additionalProperties": {
              "type": "object",
              "description": "Optional brand attributes. Please refer to GET /enum/optionalAttributeNames for dictionary of optional attribute names."
            },
            "description": "Optional brand attributes. Please refer to GET /enum/optionalAttributeNames for dictionary of optional attribute names."
          },
          "mock": {
            "type": "boolean",
            "description": "Test brand."
          },
          "identityStatus": {
            "type": "string",
            "x-has-writer": true,
            "description": "TCR assessment of the brand identification status.",
            "x-enum-type": "SMSTenDLCBrandIdentityStatusEnum",
            "x-enum-type-c-sharp": "IdentityStatusEnum",
            "enum": [
              "SELF_DECLARED",
              "UNVERIFIED",
              "VERIFIED",
              "VETTED_VERIFIED"
            ],
            "x-enum-varnames": [
              "SELF_DECLARED",
              "UNVERIFIED",
              "VERIFIED",
              "VETTED_VERIFIED"
            ]
          },
          "createDate": {
            "type": "string",
            "description": "Unix timestamp when brand was created.",
            "format": "date-time",
            "x-is-date-time": true
          }
        },
        "description": "A brand is a business identity behind the campaign.",
        "example": {
          "mock": true,
          "optionalAttributes": {},
          "accountId": "AC1234512345123451234512345123451234512345",
          "brandId": "BVCEBIJ",
          "cspId": "SKGC6G0",
          "firstName": "",
          "lastName": "",
          "displayName": "FreeClimb LLC(mock)",
          "companyName": "FreeClimb LLC",
          "ein": "843793747",
          "einIssuingCountry": "US",
          "phone": "+18475722071",
          "street": "570 Lake Cook Rd Ste 400",
          "city": "Deerfield",
          "state": "IL",
          "postalCode": "60015",
          "country": "US",
          "email": "bmabry@vailsys.com",
          "stockSymbol": "",
          "stockExchange": "NASDAQ",
          "ipAddress": "127.0.0.1",
          "website": "https://www.freeclimb.com/",
          "vertical": "TECHNOLOGY",
          "universalEin": "US_843793747",
          "referenceId": "ACdeadbeef",
          "entityType": "PRIVATE_PROFIT",
          "brandRelationship": "SMALL_ACCOUNT",
          "identityStatus": "VERIFIED",
          "createDate": "2022-07-01T20:29:23Z"
        }
      },
      "SMSTollFreeCampaignsListResult": {
        "x-implements": "Pagination",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginationModel"
          },
          {
            "type": "object",
            "properties": {
              "brands": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SMSTollFreeCampaign"
                },
                "nullable": true,
                "x-is-list": true
              }
            }
          }
        ]
      },
      "SMSTollFreeCampaign": {
        "type": "object",
        "required": [
          "accountId",
          "campaignId",
          "useCase",
          "registrationStatus",
          "dateCreated",
          "dateUpdated",
          "revision"
        ],
        "x-sms-toll-free-campaign": true,
        "properties": {
          "accountId": {
            "type": "string",
            "description": "ID of the account that created this toll-free campaign",
            "nullable": true
          },
          "campaignId": {
            "type": "string",
            "description": "Alphanumeric identifier used by the platform to identify this toll-free campaign"
          },
          "useCase": {
            "type": "string"
          },
          "registrationStatus": {
            "type": "string",
            "x-has-writer": true,
            "description": "Current toll-free campaign registration status.Possible values: UNREGISTERED,INITIATED,PENDING,DECLINED,REGISTERED. A newly created campaign defaults to INITIATED status. ",
            "x-enum-type": "SMSTollFreeCampaignRegistrationStatusEnum",
            "x-enum-type-c-sharp": "RegistrationStatusEnum",
            "enum": [
              "UNREGISTERED",
              "INITIATED",
              "PENDING",
              "DECLINED",
              "REGISTERED"
            ],
            "x-enum-varnames": [
              "UNREGISTERED",
              "INITIATED",
              "PENDING",
              "DECLINED",
              "REGISTERED"
            ]
          },
          "dateCreated": {
            "type": "string"
          },
          "dateUpdated": {
            "type": "string"
          },
          "revision": {
            "type": "integer"
          }
        }
      },
      "TranscribeUtterance": {
        "title": "TranscribeUtterance",
        "x-stoplight": {
          "id": "u509r3zqc38ze"
        },
        "description": "The `TranscribeUtterance` command transcribes the caller’s voice and returns transcription of the audio and optionally returns the recording of the audio transcribed.\n\n`TranscribeUtterance` is blocking and is a terminal command. As such, the actionUrl property is required, and control of the Call picks up using the `PerCL` returned in response of the `actionUrl`. Recording and Transcription information is returned in the actionUrl request. If the reason this command ended was due to the call hanging up, any PerCL returned will not execute.",
        "x-percl-command": true,
        "x-ref-properties": [
          "\"TEST_STRING\"",
          "false",
          "new TranscribeUtteranceAllOfRecord()",
          "false",
          "false",
          "new List<Object>()",
          "\"TEST_STRING\""
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/PerclCommand"
          },
          {
            "required": ["actionUrl"],
            "type": "object",
            "description": "The `TranscribeUtterance` command transcribes the caller’s voice and returns transcription of the audio and optionally returns the recording of the audio transcribed.\n\n`TranscribeUtterance` is blocking and is a terminal command. As such, the actionUrl property is required, and control of the Call picks up using the `PerCL` returned in response of the `actionUrl`. Recording and Transcription information is returned in the actionUrl request. If the reason this command ended was due to the call hanging up, any PerCL returned will not execute.",
            "properties": {
              "actionUrl": {
                "type": "string"
              },
              "playBeep": {
                "type": "boolean",
                "default": false
              },
              "record": {
                "type": "object",
                "x-is-object": true,
                "properties": {
                  "saveRecording": {
                    "type": "boolean",
                    "default": false
                  },
                  "maxLengthSec": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 60,
                    "default": 60
                  },
                  "rcrdTerminationSilenceTimeMs": {
                    "type": "integer",
                    "exclusiveMinimum": true,
                    "minimum": 0,
                    "maximum": 3000
                  }
                }
              },
              "privacyForLogging": {
                "type": "boolean",
                "default": false
              },
              "privacyForRecording": {
                "type": "boolean",
                "default": false
              },
              "prompts": {
                "type": "array",
                "x-is-list": true,
                "items": {}
              }
            }
          }
        ],
        "x-examples": {
          "Example 1": {
            "TranscribeUtterance": {
              "actionUrl": "http://yoursite.com/handleTranscription",
              "record": {
                "maxLengthSec": 60,
                "saveRecording": true,
                "rcrdTerminationSilenceTimeMs": 2000
              },
              "playBeep": true,
              "prompts": [
                {
                  "Play": {
                    "file": "https://yoursite.com/path/to/please-record-greeting.wav"
                  }
                }
              ]
            }
          }
        }
      },
      "CreateWebRTCToken": {
        "type": "object",
        "required": ["to", "from", "uses"],
        "x-web-rtc": true,
        "additionalProperties": false,
        "properties": {
          "to": {
            "type": "string",
            "description": "E.164 formatted phone number to which calls using this token will be made."
          },
          "from": {
            "type": "string",
            "description": "E.164 formatted phone number owned by the reqeusting account from which calls using this token will be made."
          },
          "uses": {
            "type": "integer",
            "description": "number of times this token may be used for a WebRTC call",
            "minimum": 1
          }
        }
      }
    }
  },
  "security": [
    {
      "fc": []
    }
  ],
  "paths": {
    "/Accounts/{accountId}": {
      "get": {
        "tags": [],
        "summary": "Get an Account",
        "operationId": "get-an-account",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Account Details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [],
        "summary": "Manage an account",
        "operationId": "update-an-account",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "requestBody": {
          "description": "Account details to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful Account update"
          }
        }
      }
    },
    "/Accounts/{accountId}/Applications/{applicationId}": {
      "get": {
        "tags": [],
        "summary": "Get an Application",
        "operationId": "get-an-application",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "A string that uniquely identifies this application resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Application Details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [],
        "summary": "Update an application",
        "operationId": "update-an-application",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "A string that uniquely identifies this application resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Application details to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationRequest"
              }
            }
          }
        },
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Update Application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [],
        "summary": "Delete an application",
        "operationId": "delete-an-application",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "String that uniquely identifies this application resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "deprecated": false,
        "responses": {
          "204": {
            "description": "Successful application deletion"
          }
        }
      }
    },
    "/Accounts/{accountId}/Applications": {
      "get": {
        "tags": [],
        "summary": "List applications",
        "operationId": "list-applications",
        "x-is-paginated": true,
        "parameters": [
          {
            "name": "alias",
            "in": "query",
            "description": "Return only applications with aliases that exactly match this value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "deprecated": false,
        "responses": {
          "200": {
            "description": "List of Applications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [],
        "summary": "Create an application",
        "operationId": "create-an-application",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "requestBody": {
          "description": "Application Details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationRequest"
              }
            }
          }
        },
        "deprecated": false,
        "responses": {
          "201": {
            "description": "Application successfuly created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResult"
                }
              }
            }
          }
        }
      }
    },
    "/AvailablePhoneNumbers": {
      "get": {
        "tags": [],
        "summary": "List available numbers",
        "operationId": "list-available-numbers",
        "x-is-paginated": true,
        "parameters": [
          {
            "name": "phoneNumber",
            "in": "query",
            "description": "PCRE-compatible regular expression to filter against `phoneNumber` field, which is in E.164 format.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "region",
            "in": "query",
            "description": "State or province of this phone number.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country of this phone number.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "voiceEnabled",
            "in": "query",
            "description": "Indicates whether the phone number can handle Calls. Typically set to true for all numbers.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "smsEnabled",
            "in": "query",
            "description": "Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "$ref": "#/components/parameters/Capabilities.Voice"
          },
          {
            "$ref": "#/components/parameters/Capabilities.Sms"
          },
          {
            "$ref": "#/components/parameters/Capabilities.TollFree"
          },
          {
            "$ref": "#/components/parameters/Capabilities.TenDLC"
          },
          {
            "$ref": "#/components/parameters/Capabilities.ShortCode"
          }
        ],
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Available Numbers List",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableNumberList"
                }
              }
            }
          }
        }
      }
    },
    "/Accounts/{accountId}/IncomingPhoneNumbers/{phoneNumberId}": {
      "get": {
        "tags": [],
        "summary": "Get an Incoming Number",
        "operationId": "get-an-incoming-number",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "phoneNumberId",
            "in": "path",
            "description": "String that uniquely identifies this phone number resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Incoming Phone Number result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncomingNumberResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [],
        "summary": "Update an Incoming Number",
        "operationId": "update-an-incoming-number",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "phoneNumberId",
            "in": "path",
            "description": "String that uniquely identifies this phone number resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Incoming Number details to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncomingNumberRequest"
              }
            }
          }
        },
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Updated Incoming Phone Number",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncomingNumberResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [],
        "summary": "Delete an Incoming Number",
        "operationId": "delete-an-incoming-number",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "phoneNumberId",
            "in": "path",
            "description": "String that uniquely identifies this phone number resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "deprecated": false,
        "responses": {
          "204": {
            "description": "Successful Incoming Number deletion."
          }
        }
      }
    },
    "/Accounts/{accountId}/IncomingPhoneNumbers": {
      "get": {
        "tags": [],
        "summary": "List Incoming Numbers",
        "operationId": "list-incoming-numbers",
        "x-is-paginated": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "phoneNumber",
            "in": "query",
            "description": "Only show incoming phone number resources that match this PCRE-compatible regular expression.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alias",
            "in": "query",
            "description": "Only show incoming phone numbers with aliases that exactly match this value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "region",
            "in": "query",
            "description": "State or province of this phone number.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country of this phone number.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "in": "query",
            "description": "ID of the Application that FreeClimb should contact if a Call or SMS arrives for this phone number or a Call from this number is placed. An incoming phone number is not useful until associated with an applicationId.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hasApplication",
            "in": "query",
            "description": "Indication of whether the phone number has an application linked to it.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "voiceEnabled",
            "in": "query",
            "description": "Indicates whether the phone number can handle Calls. Typically set to true for all numbers.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "deprecated": true
          },
          {
            "name": "smsEnabled",
            "in": "query",
            "description": "Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "deprecated": true
          },
          {
            "name": "hasCampaign",
            "in": "query",
            "description": "Indication of whether the phone number has a campaign associated with it",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/Capabilities.Voice"
          },
          {
            "$ref": "#/components/parameters/Capabilities.Sms"
          },
          {
            "$ref": "#/components/parameters/Capabilities.TollFree"
          },
          {
            "$ref": "#/components/parameters/Capabilities.TenDLC"
          },
          {
            "$ref": "#/components/parameters/Capabilities.ShortCode"
          },
          {
            "name": "tfn.campaignId",
            "in": "query",
            "required": false,
            "description": "Only show incoming phone number resources that have been assigned to the provided TFNCampaign ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offnet",
            "in": "query",
            "required": false,
            "description": "Indication of whether the phone number was registered as an offnet number. This field will be rendered only for requests to the IncomingPhone number resource.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "deprecated": false,
        "responses": {
          "200": {
            "description": "List of Incoming Phone Numbers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncomingNumberList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [],
        "summary": "Buy a Phone Number",
        "operationId": "buy-a-phone-number",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "requestBody": {
          "description": "Incoming Number transaction details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuyIncomingNumberRequest"
              }
            }
          }
        },
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Successful Incoming Number transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncomingNumberResult"
                }
              }
            }
          }
        }
      }
    },
    "/Accounts/{accountId}/KnowledgeBases/{knowledgeBaseId}/Completion": {
      "post": {
        "tags": [],
        "summary": "Query the knowledge base",
        "operationId": "create-knowledge-base-completion",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "knowledgeBaseId",
            "in": "path",
            "description": "A string that uniquely identifies the KnowledgeBase resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Completion request details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompletionRequest"
              }
            }
          }
        },
        "deprecated": false,
        "responses": {
          "200": {
            "description": "KnowledgeaBase completion response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompletionResult"
                }
              }
            }
          }
        }
      }
    },
    "/Accounts/{accountId}/Calls/{callId}": {
      "get": {
        "tags": [],
        "summary": "Get a Call",
        "operationId": "get-a-call",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "callId",
            "in": "path",
            "description": "String that uniquely identifies this call resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Call Resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [],
        "summary": "Update a Live Call",
        "operationId": "update-a-live-call",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "callId",
            "in": "path",
            "description": "String that uniquely identifies this call resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Call details to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCallRequest"
              }
            }
          }
        },
        "deprecated": false,
        "responses": {
          "202": {
            "description": "Successfully queued call"
          }
        }
      }
    },
    "/Accounts/{accountId}/Calls": {
      "post": {
        "tags": [],
        "summary": "Make a Call",
        "operationId": "make-a-call",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "requestBody": {
          "description": "Call details for making a call",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MakeCallRequest"
              }
            }
          }
        },
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Call that was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallResult"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [],
        "summary": "List Calls",
        "operationId": "list-calls",
        "x-is-paginated": true,
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "description": "If active is set to true then all calls of the nature queued, ringing, inProgress are returned in the query.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Only show Calls to this phone number.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Only show Calls from this phone number.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Only show Calls currently in this status. May be `queued`, `ringing`, `inProgress`, `canceled`, `completed`, `failed`, `busy`, or `noAnswer`.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CallStatus"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "Only show Calls that started at or after this time, given as YYYY-MM-DD hh:mm:ss.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "Only show Calls that ended at or before this time, given as YYYY-MM- DD hh:mm:ss.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentCallId",
            "in": "query",
            "description": "Only show Calls spawned by the call with this ID.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "in": "query",
            "description": "Only show calls belonging to the given applicationId. This parameter can be repeated to return calls from multiple Applications.",
            "explode": true,
            "required": false,
            "schema": {
              "type": "array",
              "maxItems": 16,
              "items": {
                "type": "string",
                "pattern": "^AP[0-9a-fA-F]{40}$"
              }
            }
          },
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Successful retrieved call list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallList"
                }
              }
            }
          }
        }
      }
    },
    "/Accounts/{accountId}/Calls/{callId}/Recordings": {
      "get": {
        "tags": [],
        "summary": "List Call Recordings",
        "operationId": "list-call-recordings",
        "x-is-paginated": true,
        "parameters": [
          {
            "name": "dateCreated",
            "in": "query",
            "description": "Only show recordings created on the specified date, in the form *YYYY-MM-DD*.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "callId",
            "in": "path",
            "description": "String that uniquely identifies this call resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "deprecated": false,
        "responses": {
          "200": {
            "description": "List of recordings for a call",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordingList"
                }
              }
            }
          }
        }
      }
    },
    "/Accounts/{accountId}/Calls/{callId}/Logs": {
      "get": {
        "tags": [],
        "summary": "List Call Logs",
        "operationId": "list-call-logs",
        "x-is-paginated": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "callId",
            "in": "path",
            "description": "String that uniquely identifies this call resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Logs for this call",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogList"
                }
              }
            }
          }
        }
      }
    },
    "/Accounts/{accountId}/Calls/WebRTC/Token": {
      "post": {
        "summary": "Make a JWT for WebRTC calling",
        "operationId": "make-a-webrtc-jwt",
        "x-web-rtc": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "requestBody": {
          "description": "Information needed to craft a JWT compatible with the platforms WebRTC APIs",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebRTCToken"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created JWT",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjEyMzQ1Njc4LCJjdXN0b20iOnsidG8iOiIrMTEyMjMzMzQ0NDQiLCJmcm9tIjoiKzE0NDQ0MzMzMjIxIiwidXNlcyI6MX19.H3UKv7poe0adLoFpilxOtC5dGsE5eb2ZxiuygDPs23E"
                }
              }
            }
          }
        }
      }
    },
    "/Accounts/{accountId}/Conferences": {
      "post": {
        "tags": [],
        "summary": "Create a Conference",
        "operationId": "create-a-conference",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "requestBody": {
          "description": "Conference to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConferenceRequest"
              }
            }
          }
        },
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Details of created conference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConferenceResult"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [],
        "summary": "List Conferences",
        "operationId": "list-conferences",
        "x-is-paginated": true,
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Only show conferences that currently have the specified status. Valid values: `empty`, `populated`, `inProgress`, or `terminated`.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alias",
            "in": "query",
            "description": "List Conferences whose alias exactly matches this string.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateCreated",
            "in": "query",
            "description": "Only show Conferences that were created on the specified date, in the form *YYYY-MM-DD*.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateUpdated",
            "in": "query",
            "description": "Only show Conferences that were last updated on the specified date, in the form *YYYY-MM-DD*.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "deprecated": false,
        "responses": {
          "200": {
            "description": "List of Conferences",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConferenceList"
                }
              }
            }
          }
        }
      }
    },
    "/Accounts/{accountId}/Conferences/{conferenceId}": {
      "post": {
        "tags": [],
        "summary": "Update a Conference",
        "operationId": "update-a-conference",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "conferenceId",
            "in": "path",
            "description": "String that uniquely identifies this conference resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Conference Details to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConferenceRequest"
              }
            }
          }
        },
        "deprecated": false,
        "responses": {
          "204": {
            "description": "Successful conference details update"
          }
        }
      },
      "get": {
        "tags": [],
        "summary": "Get a Conference",
        "operationId": "get-a-conference",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "conferenceId",
            "in": "path",
            "description": "A string that uniquely identifies this conference resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Successfully retrieved conference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConferenceResult"
                }
              }
            }
          }
        }
      }
    },
    "/Accounts/{accountId}/Conferences/{conferenceId}/Participants/{callId}": {
      "post": {
        "tags": [],
        "summary": "Update a Participant",
        "operationId": "update-a-participant",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "conferenceId",
            "in": "path",
            "description": "ID of the conference this participant is in.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "callId",
            "in": "path",
            "description": "ID of the Call associated with this participant.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Conference participant details to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConferenceParticipantRequest"
              }
            }
          }
        },
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Successfully retrieved conference participant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConferenceParticipantResult"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [],
        "summary": "Get a Participant",
        "operationId": "get-a-participant",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "conferenceId",
            "in": "path",
            "description": "ID of the conference this participant is in.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "callId",
            "in": "path",
            "description": "ID of the Call associated with this participant.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Successfully retrieved conference participant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConferenceParticipantResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [],
        "summary": "Remove a Participant",
        "operationId": "remove-a-participant",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "conferenceId",
            "in": "path",
            "description": "ID of the conference this participant is in.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "callId",
            "in": "path",
            "description": "ID of the Call associated with this participant.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "deprecated": false,
        "responses": {
          "204": {
            "description": "Successfully deleted conference participant"
          }
        }
      }
    },
    "/Accounts/{accountId}/Conferences/{conferenceId}/Participants": {
      "get": {
        "tags": [],
        "summary": "List Participants",
        "operationId": "list-participants",
        "x-is-paginated": true,
        "parameters": [
          {
            "name": "talk",
            "in": "query",
            "description": "Only show Participants with the talk privilege.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "listen",
            "in": "query",
            "description": "Only show Participants with the listen privilege.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "conferenceId",
            "in": "path",
            "description": "ID of the conference this participant is in.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Successfully retrieved conference participant list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConferenceParticipantList"
                }
              }
            }
          }
        }
      }
    },
    "/Accounts/{accountId}/Conferences/{conferenceId}/Recordings": {
      "get": {
        "tags": [],
        "summary": "List Conference Recordings",
        "operationId": "list-conference-recordings",
        "x-is-paginated": true,
        "parameters": [
          {
            "name": "callId",
            "in": "query",
            "description": "Show only Recordings made during the Call with this ID.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateCreated",
            "in": "query",
            "description": "Only show Recordings created on this date, formatted as *YYYY-MM-DD*.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "conferenceId",
            "in": "path",
            "description": "Show only Recordings made during the conference with this ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Recordings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordingList"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Accounts/{accountId}/Queues/{queueId}": {
      "post": {
        "tags": [],
        "summary": "Update a Queue",
        "operationId": "update-a-queue",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "queueId",
            "in": "path",
            "description": "A string that uniquely identifies this Queue resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Queue Details to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueueRequest"
              }
            }
          }
        },
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Successfully updated queue",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueResult"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [],
        "summary": "Get a Queue",
        "operationId": "get-a-queue",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "queueId",
            "in": "path",
            "description": "A string that uniquely identifies this queue resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Successfully retrieved queue",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueResult"
                }
              }
            }
          }
        }
      }
    },
    "/Accounts/{accountId}/Queues": {
      "get": {
        "tags": [],
        "summary": "List Active Queues",
        "operationId": "list-active-queues",
        "x-is-paginated": true,
        "parameters": [
          {
            "name": "alias",
            "in": "query",
            "description": "Return only the Queue resources with aliases that exactly match this name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Successfuly retrieved queue list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [],
        "summary": "Create a Queue",
        "operationId": "create-a-queue",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "requestBody": {
          "description": "Queue details used to create a queue",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueueRequest"
              }
            }
          }
        },
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Successfuly created queue",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueResult"
                }
              }
            }
          }
        }
      }
    },
    "/Accounts/{accountId}/Queues/{queueId}/Members/Front": {
      "get": {
        "tags": [],
        "summary": "Get Head Member",
        "operationId": "get-head-member",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "queueId",
            "in": "path",
            "description": "String that uniquely identifies the Queue that the Member belongs to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Successfully retrieved queue member",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueMember"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [],
        "summary": "Dequeue Head Member",
        "operationId": "dequeue-head-member",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "queueId",
            "in": "path",
            "description": "String that uniquely identifies this queue resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "deprecated": false,
        "responses": {
          "202": {
            "description": "Accepted dequeue request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueMember"
                }
              }
            }
          }
        }
      }
    },
    "/Accounts/{accountId}/Queues/{queueId}/Members": {
      "get": {
        "tags": [],
        "summary": "List Members",
        "operationId": "list-members",
        "x-is-paginated": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "queueId",
            "in": "path",
            "description": "String that uniquely identifies the Queue that the Member belongs to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Successfully retrieved queue member list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueMemberList"
                }
              }
            }
          }
        }
      }
    },
    "/Accounts/{accountId}/Queues/{queueId}/Members/{callId}": {
      "get": {
        "tags": [],
        "summary": "Get a Member",
        "operationId": "get-a-member",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "queueId",
            "in": "path",
            "description": "String that uniquely identifies the Queue that the Member belongs to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "callId",
            "in": "path",
            "description": "ID of the Call that the Member belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Successfully retrieved a queue member",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueMember"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [],
        "summary": "Dequeue a Member",
        "operationId": "dequeue-a-member",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "queueId",
            "in": "path",
            "description": "String that uniquely identifies the Queue that the Member belongs to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "callId",
            "in": "path",
            "description": "ID if the Call that the Member belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "deprecated": false,
        "responses": {
          "202": {
            "description": "Accepted dequeue request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueMember"
                }
              }
            }
          }
        }
      }
    },
    "/Accounts/{accountId}/Logs": {
      "get": {
        "tags": [],
        "summary": "List All Account Logs",
        "operationId": "list-all-account-logs",
        "x-is-paginated": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Successfully retrieved log list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [],
        "summary": "Filter Logs",
        "operationId": "filter-logs",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "requestBody": {
          "description": "Filter logs request paramters",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterLogsRequest"
              }
            }
          }
        },
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Successfully retrieved log list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogList"
                }
              }
            }
          }
        }
      }
    },
    "/Accounts/{accountId}/Recordings": {
      "get": {
        "tags": [],
        "summary": "List Recordings",
        "operationId": "list-recordings",
        "x-is-paginated": true,
        "parameters": [
          {
            "name": "callId",
            "in": "query",
            "description": "Show only Recordings made during the Call with this ID.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conferenceId",
            "in": "query",
            "description": "Show only Recordings made during the conference with this ID.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateCreated",
            "in": "query",
            "description": "Only show Recordings created on this date, formatted as *YYYY-MM-DD*.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Recordings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordingList"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Accounts/{accountId}/Recordings/{recordingId}": {
      "get": {
        "tags": [],
        "summary": "Get a Recording",
        "operationId": "get-a-recording",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "recordingId",
            "in": "path",
            "description": "String that uniquely identifies this recording resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordingResult"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [],
        "summary": "Delete a Recording",
        "operationId": "delete-a-recording",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "recordingId",
            "in": "path",
            "description": "String that uniquely identifies this recording resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Recording Deleted"
          }
        },
        "deprecated": false
      }
    },
    "/Accounts/{accountId}/Recordings/{recordingId}/Stream": {
      "get": {
        "tags": [],
        "summary": "Stream a Recording File",
        "operationId": "stream-a-recording-file",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "recordingId",
            "in": "path",
            "description": "String that uniquely identifies this recording resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Streaming a Recording represented with audio/x-wav mime-type",
            "content": {
              "audio/x-wav": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Accounts/{accountId}/Recordings/{recordingId}/Download": {
      "get": {
        "tags": [],
        "summary": "Download a Recording File",
        "operationId": "download-a-recording-file",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "recordingId",
            "in": "path",
            "description": "String that uniquely identifies this recording resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Download a Recording file represented with audio/x-wav mime-type",
            "content": {
              "audio/x-wav": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Accounts/{accountId}/Messages": {
      "get": {
        "tags": [],
        "summary": "List SMS Messages",
        "operationId": "list-sms-messages",
        "x-is-paginated": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "to",
            "in": "query",
            "description": "Only show Messages to this phone number.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Only show Messages from this phone number.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beginTime",
            "in": "query",
            "description": "Only show Messages sent at or after this time (GMT), given as *YYYY-MM-DD hh:mm:ss*.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "Only show messages sent at or before this time (GMT), given as *YYYY-MM-DD hh:mm*..",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "direction",
            "in": "query",
            "description": "Either `inbound` or `outbound`. Only show Messages that were either *sent from* or *received by* FreeClimb.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/MessageDirection"
            }
          },
          {
            "name": "campaignId",
            "in": "query",
            "description": "Only show messages associated with this campaign ID.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "brandId",
            "in": "query",
            "description": "Only show messages associated with this brand ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is10DLC",
            "in": "query",
            "description": "Only show messages that were sent as part of a 10DLC campaign.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of messages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagesList"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [],
        "summary": "Send an SMS Message",
        "operationId": "send-an-sms-message",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "requestBody": {
          "description": "Details to create a message",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The message has been accepted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Accounts/{accountId}/Messages/{messageId}": {
      "get": {
        "tags": [],
        "summary": "Get an SMS Message",
        "operationId": "get-an-sms-message",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "String that uniquely identifies this Message resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The specific SMS message that’s been processed by FreeClimb",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResult"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Accounts/{accountId}/Messages/10DLC/Campaigns": {
      "get": {
        "tags": [],
        "summary": "Get list of SMS 10DLC Campaigns",
        "operationId": "get-tenDLC-sms-Campaigns",
        "x-is-paginated": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "brandId",
            "in": "query",
            "description": "The unique identifier for a brand",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list SMS 10DLC campaigns",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SMSTenDLCCampaignsListResult"
                },
                "example": {
                  "total": 1,
                  "start": 0,
                  "end": 0,
                  "page": 0,
                  "numPages": 1,
                  "pageSize": 100,
                  "nextPageUri": null,
                  "campaigns": [
                    {
                      "campaignId": "C3TMRFL",
                      "accountId": "ACe39970fb7c31c747c67148900b4d9da60a41e532",
                      "cspId": "SKGC6G0",
                      "brandId": "BVCEBIJ",
                      "usecase": "2FA",
                      "description": "bmabry mock campaign.",
                      "subUsecases": [],
                      "resellerId": null,
                      "sample1": "Your verification code from FreeClimb is 000000. It expires in 10 minutes.",
                      "sample2": null,
                      "sample3": null,
                      "sample4": null,
                      "sample5": null,
                      "messageFlow": null,
                      "helpMessage": null,
                      "referenceId": null,
                      "status": "EXPIRED",
                      "mock": true,
                      "autoRenewal": false,
                      "embeddedLink": false,
                      "embeddedPhone": false,
                      "affiliateMarketing": false,
                      "numberPool": false,
                      "ageGated": false,
                      "directLending": false,
                      "subscriberOptin": true,
                      "subscriberOptout": false,
                      "subscriberHelp": true,
                      "createDate": "2022-07-05T15:17:05Z",
                      "billedDate": "2022-07-05T00:00:00Z",
                      "nextRenewalOrExpirationDate": null
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Accounts/{accountId}/Messages/10DLC/Campaigns/{campaignId}": {
      "get": {
        "tags": [],
        "summary": "Get a 10DLC SMS Campaign",
        "operationId": "get-tenDLC-sms-campaign",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "String that uniquely identifies this campaign resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The specific SMS 10DLC Campaign that’s been processed by FreeClimb",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SMSTenDLCCampaign"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Accounts/{accountId}/Messages/10DLC/PartnerCampaigns": {
      "get": {
        "tags": [],
        "summary": "Get list of SMS 10DLC Partner Campaigns",
        "operationId": "get-tenDLC-sms-partnerCampaigns",
        "x-is-paginated": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "brandId",
            "in": "query",
            "description": "The unique identifier for a brand",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list SMS 10DLC partner campaigns",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SMSTenDLCPartnerCampaignsListResult"
                },
                "example": {
                  "total": 1,
                  "start": 0,
                  "end": 0,
                  "page": 0,
                  "numPages": 1,
                  "pageSize": 100,
                  "nextPageUri": null,
                  "sharedCampaigns": [
                    {
                      "campaignId": "CX56XX4",
                      "accountId": "ACe39970fb7c31c747c67148900b4d9da60a41e532",
                      "brandId": "BX56XX4",
                      "usecase": "2FA",
                      "description": "mock campaign.",
                      "sample1": "Your verification code from FreeClimb is 000000. It expires in 10 minutes.",
                      "sample2": null,
                      "sample3": null,
                      "sample4": null,
                      "sample5": null,
                      "messageFlow": null,
                      "helpMessage": null,
                      "status": "EXPIRED",
                      "embeddedLink": false,
                      "embeddedPhone": false,
                      "affiliateMarketing": false,
                      "numberPool": false,
                      "ageGated": false,
                      "directLending": false,
                      "subscriberOptin": true,
                      "subscriberOptout": false,
                      "subscriberHelp": true,
                      "createDate": "2022-07-05T15:17:05Z",
                      "optinKeywords": "START",
                      "optoutKeywords": "STOP",
                      "helpKeywords": "HELP",
                      "optinMessage": "",
                      "optoutMessage": "",
                      "brand": {
                        "optionalAttributes": {},
                        "brandId": "BVCEBIJ",
                        "firstName": "",
                        "lastName": "",
                        "displayName": "FreeClimb LLC(mock)",
                        "companyName": "FreeClimb LLC",
                        "phone": "+18475722071",
                        "email": "bmabry@vailsys.com",
                        "website": "https://www.freeclimb.com/",
                        "evpVettingScore": 22
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Accounts/{accountId}/Messages/10DLC/PartnerCampaigns/{campaignId}": {
      "get": {
        "tags": [],
        "summary": "Get a 10DLC SMS Partner Campaign",
        "operationId": "get-tenDLC-sms-partnerCampaign",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "String that uniquely identifies this campaign resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The specific SMS 10DLC Partner Campaign that’s been processed by FreeClimb",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SMSTenDLCPartnerCampaign"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Accounts/{accountId}/Messages/10DLC/Brands": {
      "get": {
        "tags": [],
        "summary": "Get list of SMS 10DLC Brands",
        "operationId": "get-tenDLC-sms-brands",
        "x-is-paginated": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "responses": {
          "200": {
            "description": "The list SMS 10DLC brands",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SMSTenDLCBrandsListResult"
                },
                "example": {
                  "total": 1,
                  "start": 0,
                  "end": 0,
                  "page": 0,
                  "numPages": 1,
                  "pageSize": 100,
                  "nextPageUri": null,
                  "brands": [
                    {
                      "mock": true,
                      "optionalAttributes": {},
                      "accountId": "AC1234512345123451234512345123451234512345",
                      "brandId": "BVCEBIJ",
                      "cspId": "SKGC6G0",
                      "firstName": "",
                      "lastName": "",
                      "displayName": "FreeClimb LLC(mock)",
                      "companyName": "FreeClimb LLC",
                      "ein": "843793747",
                      "einIssuingCountry": "US",
                      "phone": "+18475722071",
                      "street": "570 Lake Cook Rd Ste 400",
                      "city": "Deerfield",
                      "state": "IL",
                      "postalCode": "60015",
                      "country": "US",
                      "email": "bmabry@vailsys.com",
                      "stockSymbol": "",
                      "stockExchange": "ASX",
                      "ipAddress": "127.0.0.1",
                      "website": "https://www.freeclimb.com/",
                      "vertical": "TECHNOLOGY",
                      "universalEin": "US_843793747",
                      "referenceId": "ACdeadbeef",
                      "entityType": "PRIVATE_PROFIT",
                      "brandRelationship": "SMALL_ACCOUNT",
                      "identityStatus": "VERIFIED",
                      "createDate": "2022-07-01T20:29:23Z"
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Accounts/{accountId}/Messages/10DLC/Brands/{brandId}": {
      "get": {
        "tags": [],
        "summary": "Get a 10DLC SMS Brand",
        "operationId": "get-tenDLC-sms-brand",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "brandId",
            "in": "path",
            "description": "String that uniquely identifies this brand resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The specific SMS 10DLC Brand that’s been processed by FreeClimb",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SMSTenDLCBrand"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Accounts/{accountId}/Messages/TollFree/Campaigns": {
      "get": {
        "tags": [],
        "summary": "Get list of TollFree Campaigns",
        "operationId": "get-tollFree-sms-campaigns",
        "x-is-paginated": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          }
        ],
        "responses": {
          "200": {
            "description": "The list toll-free campaigns",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SMSTollFreeCampaignsListResult"
                },
                "example": {
                  "total": 1,
                  "start": 0,
                  "end": 0,
                  "page": 0,
                  "numPages": 1,
                  "pageSize": 100,
                  "nextPageUri": null,
                  "tfnCampaigns": [
                    {
                      "accountId": "ACe39970fb7c31c747c67148900b4d9da60a41e532",
                      "campaignId": "cmptfn_387ec3f6e03b340553f35f29c8f118cdf3eae08a",
                      "useCase": "example use case",
                      "registrationStatus": "PENDING",
                      "dateCreated": 1704839615,
                      "dateUpdated": 1704839615,
                      "revision": 1
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Accounts/{accountId}/Messages/TollFree/Campaigns/{campaignId}": {
      "get": {
        "tags": [],
        "summary": "Get a TollFree SMS Campaign",
        "operationId": "get-tollFree-sms-campaign",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountId"
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "String that uniquely identifies this TollFree Campaign resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The specific SMS TollFree Campaign that’s been processed by FreeClimb",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SMSTollFreeCampaign"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "x-headers": [],
  "x-explorer-enabled": true,
  "x-proxy-enabled": true,
  "x-samples-enabled": false,
  "x-samples-languages": ["curl", "node", "ruby", "javascript", "python"]
}
